This is to clearify how several mysterious things happen in this operating 
system.

1) There are symbol(hash) tables maintained by each task.  When a symbol is 
not found, the parent task's symbol table is checked.  All process chain back 
to the root process.

2) Binary files have export symbols which are loaded into tables.  The 
operating system kernel has such a table.  In addition, some map files are 
processed to provide more information on symbols--source file links.  This is 
how the [T:/J/ROOT/EDIT.CPZ,3077] Man() page feature works.

3)  The word "public" does very little except allow the
[T:/J/UTILS/HASHUTIL.CPZ,8] HashRep() program 
varients to exclude meaningless symbols.  If you wish a full report of public 
and nonpublic symbols Click Here
`LtfSetMax(1000000);HAllRep;View;`
.

4)  When compilation takes place "dynamically", the structures used by the 
compiler stick around.  Data on classes can be accessed.  See
[T:/J/UTILS/DBG.CPZ,774] ClassRep() or 
[T:/J/UTILS/DBG.CPZ,817] TssRep().

5)  When the joystick is calibrated, a file is created.  To recalibrate the 
joystick, you must del the file "::/J/ROOT/JOY.DTZ".

6)  Filenames ending in 'Z' are automatically compressed and uncompressed
when 
writing to disk. File size in directory listing is the compressed size.

7) Some memory objects are allocated when needed and will decrease the 
available memory displayed. A task keeps memory objects smaller than a couple 
blocks in it's own separate heap when freed and these are not counted in the 
available system free memory, though they are free.  They get returned to the 
system when the task is killed.  To get a sense of this, compile the
operating 
system and see the amount of memory used.  Then, compile it again and far
less 
will be allocated.  This is because it is reusing the small chunks.

8) Binary data is stored beyond the terminating NULL in text files. Map files 
store debug source lines and other files store pictures.

9) Pictures are stored as line coordinates, instead of bit maps.  If you have 
a drawing with, like 10 lines, 40 numbers are stored, compared to, like 
200x200 bytes, for a bitmap.  Therefore, graphics don't take much room.  If 
the number of lines is large, however, it'd be more effecient to store a 
bitmap.

10) If you change code in the /J/ROOT or /J/UTILS directory, you don't need
to 
recompile, you just need to reboot, because that directory gets recompiled 
when you boot. It uses dynamic compilation.  There is no ".BIN" file for 
dynamic compilation.

11)  If you find crappy code, it might be from before the compiler had 
features like the "switch" statement.  Or, it might have been  something done 
hurriedly just to get results.  Some things I dive into without planning,
like 
the dollar sign commands.  After, the idea matured, I cleaned-it-up.

12) The hits on hash entries reflect times they have been searched for and 
found. The [::/J/KERNEL/ROOTK2.HPZ,117] FindExtern() function is used to
search the hash tables for 
functions which weren't in existence yet. The [T:/J/ROOT/WINDOW.CPZ,6]
DrawBorder() function, for 
example, is searched for every time the screen is updated, therefore it has 
lots of hits in a hash table report.




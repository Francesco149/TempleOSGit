public void LtfDm(BYTE *buf,DWORD cnt=0x80)
{
  LtfEntry *ll;
  DWORD old_preempt=Preempt(OFF);
  Ltf *l=Fs->cur_ltf;
  ll=LtfPrintF(l,"$HX -Z %d 16$",cnt);
  ll->data=buf;
  l->cur_entry=ll->next;
  LtfRecalc(l);
  Preempt(old_preempt);
}

public void LtfD(BYTE *buf,DWORD cnt=0x80)
{
  LtfEntry *ll;
  DWORD old_preempt=Preempt(OFF);
  Ltf *l=Fs->cur_ltf;
  ll=LtfPrintF(l,"$HX %d 16$",cnt);
  ll->data=buf;
  l->cur_entry=ll->next;
  LtfRecalc(l);
  Preempt(old_preempt);
}

extern BOOL View();

public BYTE *PatchBlk(DWORD blk,BOOL write=FALSE)
{
  BYTE *buf=MAlloc(BLK_SIZE);
  char ch=0;
  DWORD sc=0;

  RBlks(Fs->cur_partition,buf,blk,1);
  D(buf,BLK_SIZE);
  if (write) {
    coutln "Edit and press ESC to write or ^Q";
    if (View) {
      coutln "Write";
      WBlks(Fs->cur_partition,buf,blk,1);
    }
  }
  return buf;
}

public BYTE *Patch(DWORD c,DWORD cnt=0,BOOL write=FALSE)
{
  BYTE *buf=MAlloc(BLK_SIZE*Fs->cur_partition->spc);
  char ch=0;
  DWORD sc=0;

  if (cnt)
    c=NextClusterNum(Fs->cur_partition,c,cnt);
  RClusters(Fs->cur_partition,buf,c);
  coutln "Cluster:",c;
  LtfD(buf,BLK_SIZE*Fs->cur_partition->spc);
  if (write) {
    coutln "Edit and press ESC to write or ^Q";
    if (View) {
      coutln "Write";
      WClusters(Fs->cur_partition,buf,c);
    }
  }
  return buf;
}


public DWORD UnusedSysMem()
{
  MemBlk *tempm;
  DWORD i,result=0;
  DWORD old_flags=GetFlags;
  Cli;
  tempm=mem_free_list;
  while (tempm) {
    result=result+tempm->pages;
    tempm=tempm->next;
  }
  for (i=0;i<FREE_PAGE_CACHE_SIZE;i++) {
    tempm=free_page_cache[i];
    while (tempm) {
      result+=tempm->pages;
      tempm=tempm->next;
    }
  }
  for (i=0;i<32;i++) {
    tempm=free_page_cache2[i];
    while (tempm) {
      result+=tempm->pages;
      tempm=tempm->next;
    }
  }
  SetFlags(old_flags);
  return result*PAGE_SIZE;
}

public DWORD TaskAllocatedMem(TssStruct *tss)
{
  MemBlk *m=tss->next_mem_blk;
  DWORD result=0;
  DWORD old_flags=GetFlags;
  Cli;
  while (m!=&tss->next_mem_blk) {
    result+=m->pages*PAGE_SIZE;
    m=m->next;
  }
  SetFlags(old_flags);
  return result;
}

public DWORD TaskUnusedAllocatedMem(TssStruct *tss)
{
  DWORD result=0,i;
  UnusedAllocatedMem *u;
  DWORD old_flags=GetFlags;
  Cli;
  for (i=0;i<HEAP_CACHE_SIZE/4;i++) {
    u=tss->heap_cache[i];
    while (u) {
      result+=u->size;
      u=u->next;
    }
  }
  u=tss->malloc_free_list;
  while (u) {
    result+=u->size;
    u=u->next;
  }
  SetFlags(old_flags);
  return result;
}

int CompareUamPtrs(UnusedAllocatedMem **e1,
		     UnusedAllocatedMem **e2)
{
  return *e1-*e2;
}

int CompareUamSize(UnusedAllocatedMem **e1,
		     UnusedAllocatedMem **e2)
{
  return (*e2)->size-(*e1)->size;
}


public void HeapRep(TssStruct *tss=NULL)
{
  int i,cnt;
  UnusedAllocatedMem *u;
  DWORD old_flags=GetFlags;

  if (!tss) tss=Fs;
  Cli;
  for (i=0;i<HEAP_CACHE_SIZE/4;i++) {
    cnt=0;
    u=tss->heap_cache[i];
    while (u) {
      cnt+=u->size;
      u=u->next;
    }
    if (cnt)
      PrintF("%03X:%08X\r\n",i*4,cnt);
  }
  u=tss->malloc_free_list;
  while (u) {
    PrintF("%08X\r\n",u->size);
    u=u->next;
  }
  SetFlags(old_flags);
}



//TODO:Crashes
///More of a heap check at the moment
void CollectFreedAllocatedMem(TssStruct *tss=NULL)
{
  int i,j,cnt;
  UnusedAllocatedMem *u,**sort_buf;
  DWORD old_flags=GetFlags;
  DWORD *dd;

  if (!tss) tss=Fs;
  Cli;
  cnt=0;
  for (i=0;i<HEAP_CACHE_SIZE/4;i++) {
    u=tss->heap_cache[i];
    while (u) {
      cnt++;
      u=u->next;
    }
  }
  u=tss->malloc_free_list;
  while (u) {
    cnt++;
    u=u->next;
  }
  SetFlags(old_flags);

  //We might disturb the Free list and irq's might Free some
  sort_buf=MAlloc(((cnt+512)&0xFFFFFF00)*sizeof(DWORD));

  Cli;
  cnt=0;

  for (i=0;i<HEAP_CACHE_SIZE/4;i++) {
    u=tss->heap_cache[i];
    while (u) {
      sort_buf[cnt++]=u;
      u=u->next;
    }
    tss->heap_cache[i]=NULL;
  }

  u=tss->malloc_free_list;
  while (u) {
    sort_buf[cnt++]=u;
    u=u->next;
  }
  tss->malloc_free_list=NULL;

  for (i=0;i<FREE_PAGE_CACHE_SIZE;i++)
    free_page_cache[i]=NULL;

  for (i=0;i<32;i++)
    free_page_cache2[i]=NULL;

  SetFlags(old_flags);

  QSort(sort_buf,cnt,sizeof(DWORD),&CompareUamPtrs);
  for (i=0;i<cnt;i++) {
    if (sort_buf[i]+sort_buf[i]->size>sort_buf[i+1])
      cout "****";
    coutln sort_buf[i]," ",sort_buf[i]->size;
  }
/*
  j=0;
  for (i=0;i<cnt;i++) {
    if (sort_buf[i]==sort_buf[j]+sort_buf[j]->size &&
	sort_buf[j]->size+sort_buf[i]->size<HEAP_CACHE_SIZE)
      sort_buf[j]->size=sort_buf[j]->size+
			sort_buf[i]->size;
    else
      sort_buf[++j]=sort_buf[i];
  }
  if (cnt) {
    j++;
    QSort(sort_buf,j,sizeof(DWORD),&CompareUamSize);
    for (i=0;i<j;i++) {
      sort_buf[i]->next=sort_buf[i]->size;
      Free(sort_buf[i]+4,tss);
    }
  }
*/
  Free(sort_buf);
}

void TaskRepTask(TssStruct *tss,int indent)
{
  TssStruct *tss1;
  PrintF("%*s%08X $TX+SCX,\"%Q...\",16$ %08X %04X %04X \r\n",
    indent,"",tss,tss->task_descriptor,
    TaskAllocatedMem(tss),
    tss->task_flags,tss->crt_flags);
  tss1=tss->next_child_tss;
  while (tss1!=tss+&tss->next_child_tss-&tss->next_sibling_tss) {
    TaskRepTask(tss1,indent+2);
    tss1=tss1->next_sibling_tss;
  }
}

public void TaskRep()
{
  DWORD old_flags=GetFlags;
  Cli;
  TaskRepTask(root_tss,0);
  SetFlags(old_flags);
}

public void SBpt(TssStruct *tss,BYTE *a)  //set ON Bpt
{
  DWORD old_flags=GetFlags;
  SysBpt *tempb=MAlloc(sizeof(SysBpt),tss);
  Cli;
  tempb->next=tss->bpt_list;
  tempb->address=a;
  tempb->b=*a;
  tss->bpt_list=tempb;
  if (tss==Fs)
    *a=0xCC;
  SetFlags(old_flags);
}

public void RBpt(TssStruct *tss,BYTE *a) //reset one Bpt
{
  DWORD old_flags=GetFlags;
  SysBpt *tempb,*tempb1,*tempb2;
  Cli;
  tempb1=&tss->bpt_list;
  tempb=tss->bpt_list;
  while (tempb) {
    tempb2=tempb->next;
    if (tempb->address==a) {
      if (tss==Fs)
	*a=tempb->b;
      Free(tempb,tss);
      tempb1->next=tempb2;
    } else
      tempb1=&tempb->next;
    tempb=tempb2;
  }
  SetFlags(old_flags);
}

public void CBpt(TssStruct *tss)  //clear all Bpts
{
  BYTE *a;
  DWORD old_flags=GetFlags;
  SysBpt *tempb,*tempb2;
  Cli;
  tempb=tss->bpt_list;
  while (tempb) {
    tempb2=tempb->next;
    a=tempb->address;
    if (tss==Fs)
      *a=tempb->b;
    Free(tempb,tss);
    tempb=tempb2;
  }
  tss->bpt_list=NULL;
  SetFlags(old_flags);
}

public BOOL IsTextFile(char *filename)
{
  return WildFileNameList(TEXT_FILE_MASK,filename);
}

public BOOL IsSourceFile(char *filename)
{
  return WildFileNameList(SOURCE_FILE_MASK,filename);
}



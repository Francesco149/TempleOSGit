	ALIGN 4,0x90
MSG_DRAW_BORDER:	DB "DrawBorder",0;
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_PLOT_SCREEN_CHAR::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,SF_PARAM2[EBP]
	MOV	EAX,SF_PARAM3[EBP]
	OR	EBX,EBX
	JS	@@100
	OR	EAX,EAX
	JS	@@100
	CMP	EBX,DWORD FS:[TSS_CRT_WIDTH]
	JGE	@@100
	CMP	EAX,DWORD FS:[TSS_CRT_HEIGHT]
	JGE	@@100
	IMUL	DWORD FS:[TSS_CRT_WIDTH]
	ADD	EAX,DWORD [SYS_TEXTBASE]
	ADD	EBX,EAX
	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX

	POP	EBP
	MOV	EAX,1
	RET
@@100:	POP	EBP
	XOR	EAX,EAX
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=LINE STRING
	ALIGN	4,0x90
CP_PLOT_WINDOW_CHAR::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	EAX,DWORD SF_PARAM3[EBP]

	OR	EBX,EBX
	JS	@@100
	ADD	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	CMP	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	JG	@@100
	OR	EBX,EBX
	JS	@@100
	CMP	EBX,DWORD FS:[TSS_CRT_WIDTH]
	JGE	@@100

	OR	EAX,EAX
	JS	@@100
	ADD	EAX,DWORD FS:[TSS_WINDOW_TOP]
	CMP	EAX,DWORD FS:[TSS_WINDOW_BOTTOM]
	JG	@@100
	OR	EAX,EAX
	JS	@@100
	CMP	EAX,DWORD FS:[TSS_CRT_HEIGHT]
	JGE	@@100

	IMUL	DWORD FS:[TSS_CRT_WIDTH]
	ADD	EAX,DWORD [SYS_TEXTBASE]
	ADD	EBX,EAX
	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX

	POP	EBP
	MOV	EAX,1
	RET
@@100:	POP	EBP
	XOR	EAX,EAX
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=LINE STRING
	ALIGN	4,0x90
CP_PLOT_BORDER_CHAR::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	EAX,DWORD SF_PARAM3[EBP]

	MOV	EDX,-4
	CMP	EBX,EDX
	JL	@@100
	ADD	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	EDX,DWORD FS:[TSS_WINDOW_RIGHT]
	ADD	EDX,4
	CMP	EBX,EDX
	JG	@@100
	OR	EBX,EBX
	JS	@@100
	CMP	EBX,DWORD FS:[TSS_CRT_WIDTH]
	JGE	@@100

	MOV	EDX,-1
	CMP	EAX,EDX
	JL	@@100
	ADD	EAX,DWORD FS:[TSS_WINDOW_TOP]
	MOV	EDX,DWORD FS:[TSS_WINDOW_BOTTOM]
	INC	EDX
	CMP	EAX,EDX
	JG	@@100
	OR	EAX,EAX
	JS	@@100
	CMP	EAX,DWORD FS:[TSS_CRT_HEIGHT]
	JGE	@@100

	IMUL	DWORD FS:[TSS_CRT_WIDTH]
	ADD	EAX,DWORD [SYS_TEXTBASE]
	ADD	EBX,EAX
	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX

	POP	EBP
	MOV	EAX,1
	RET
@@100:	POP	EBP
	XOR	EAX,EAX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
GR_UPDATE_WINDOWS::
	PUSHAD				//-****

	MOV	ESI,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
@@20:	MOV	EDI,DWORD FS:[TSS_NEXT_TSS]
	CMP	ESI,EDI
	JE	@@30
	MOV	EAX,DWORD TSS_FS[EDI]
	MOV	FS,AX
	BT	DWORD FS:[TSS_CRT_FLAGS],CRTf_SHOW
	JNC	@@20
	PUSH	ESI
	PUSH	0	//Screen coordinates
	PUSH	DWORD FS:[TSS_BORDER_ATTRIBUTE]
	PUSH	DWORD FS:[TSS_WINDOW_BOTTOM]
	PUSH	DWORD FS:[TSS_WINDOW_TOP]
	PUSH	DWORD FS:[TSS_WINDOW_RIGHT]
	PUSH	DWORD FS:[TSS_WINDOW_LEFT]
	MOV	EAX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	CMP	DWORD [SYS_CUR_FOCUS_TASK],EAX
	MOV	EAX,0
	JNE	@@25A
	INC	EAX
@@25A:	PUSH	EAX
	MOV	ESI,MSG_DRAW_BORDER
	CALL	FIND_EXTERN
	JZ	@@25B
	CALL	ESI
@@25B:	ADD	ESP,7*4
	POP	ESI
	MOV	EAX,DWORD FS:[TSS_UPDATE_WINDOW]
	OR	EAX,EAX
	JZ	@@25
	CALL	EAX
@@25:	JMP	@@20
@@30:	MOV	EAX,DWORD TSS_FS[ESI]
	MOV	FS,AX
	POPAD				//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_LTF_DIST::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD SF_PARAM2[EBP]
	SUB	EAX,DWORD SF_PARAM4[EBP]
	JNC	@@10
	NEG	EAX
@@10:	SHL	EAX,6
	MOV	EDX,DWORD SF_PARAM1[EBP]
	SUB	EDX,DWORD SF_PARAM3[EBP]
	JNC	@@20
	NEG	EDX
@@20:	ADD	EAX,EDX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_LINE::
	PUSH	EBP
	MOV	EBP,ESP
	PUSHAD

	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EDX,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	SUB	EBX,EDX
	JNS	@@1
	NEG	EBX
@@1:	SUB	EAX,ECX
	JNS	@@2
	NEG	EAX
@@2:	CMP	EAX,EBX
	JA	DWORD @@50
	CMP	EAX,EBX
	JNE	@@20
//dx=dy
@@10:	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EDX,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	MOV	EDI,1
	SUB	EBX,EDX
	JNS	@@13
	NEG	EDI
@@13:	ADD	EBX,EDI

	MOV	ESI,1
	CMP	EAX,ECX
	JNS	@@12
	NEG	ESI

@@12:	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	PUSH	DWORD 0
	PUSH	EDX
	PUSH	ECX
	PUSH	DWORD SF_PARAM1[EBP]
	CALL	SF_PARAM8[EBP]
	ADD	ESP,16
	POP	EDX
	POP	EBX
	POP	EAX
	ADD	EDX,EDI
	ADD	ECX,ESI
	SUB	EBX,EDI
	JNZ	@@12
	JMP	DWORD @@100

//Y LONGEST, EBX=RISE EAX=RUN
@@20:	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	CMP	EBX,EDX
	JGE	@@20A

@@220A:	SUB	EBX,EDX
	XOR	EDI,EDI
	SUB	EAX,ECX
	JNS	@@220B
	NEG	EAX
	NOT	EDI
@@220B:	MOV	EDX,EAX
	XOR	EAX,EAX
	NEG	EBX
	DIV	EBX	 //dx*100000000/dy
	MOV	ESI,EAX

	OR	EDI,EDI
	JNS	@@222
	NEG	ESI

@@222:	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EDX,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	SUB	EBX,EDX 	//EBX=dy and (ECX,EDX)=start
	NEG	EBX
	INC	EBX
	XOR	EAX,EAX
@@230:	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	PUSH	DWORD 0
	PUSH	EDX
	PUSH	ECX
	PUSH	DWORD SF_PARAM1[EBP]
	CALL	SF_PARAM8[EBP]
	ADD	ESP,16
	POP	EDX
	POP	EBX
	POP	EAX
	DEC	EDX
	ADD	EAX,ESI
	ADC	ECX,EDI
	DEC	EBX
	JNZ	@@230
	JMP	DWORD @@100

@@20A:	SUB	EBX,EDX
	XOR	EDI,EDI
	SUB	EAX,ECX
	JNS	@@20B
	NEG	EAX
	NOT	EDI
@@20B:	MOV	EDX,EAX
	XOR	EAX,EAX
	DIV	EBX	 //dx*100000000/dy
	MOV	ESI,EAX

	OR	EDI,EDI
	JNS	@@22
	NEG	ESI

@@22:	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EDX,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	SUB	EBX,EDX 	//EBX=dy and (ECX,EDX)=start
	INC	EBX
	XOR	EAX,EAX
@@30:	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	PUSH	DWORD 0
	PUSH	EDX
	PUSH	ECX
	PUSH	DWORD SF_PARAM1[EBP]
	CALL	SF_PARAM8[EBP]
	ADD	ESP,16
	POP	EDX
	POP	EBX
	POP	EAX
	INC	EDX
	ADD	EAX,ESI
	ADC	ECX,EDI
	DEC	EBX
	JNZ	@@30
	JMP	DWORD @@100

//X LONGEST
@@50:	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	CMP	EAX,ECX
	JGE	@@70A

	SUB	EAX,ECX
	XOR	EDI,EDI
	SUB	EBX,EDX
	JNS	@@770B
	NEG	EBX
	NOT	EDI
@@770B:	MOV	EDX,EBX
	MOV	EBX,EAX
	XOR	EAX,EAX
	NEG	EBX
	DIV	EBX	//dy*100000000/dx
	MOV	ESI,EAX

	OR	EDI,EDI
	JNS	@@772
	NEG	ESI

@@772:	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EDX,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	SUB	EAX,ECX 	//EAX=dx and (ECX,EDX)=start
	XOR	EBX,EBX
	NEG	EAX
	INC	EAX
@@780:	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	PUSH	DWORD 0
	PUSH	EDX
	PUSH	ECX
	PUSH	DWORD SF_PARAM1[EBP]
	CALL	SF_PARAM8[EBP]
	ADD	ESP,16
	POP	EDX
	POP	EBX
	POP	EAX
	DEC	ECX
	ADD	EBX,ESI
	ADC	EDX,EDI
	DEC	EAX
	JNZ	@@780
	JMP	@@100

@@70A:	SUB	EAX,ECX
	XOR	EDI,EDI
	SUB	EBX,EDX
	JNS	@@70B
	NEG	EBX
	NOT	EDI
@@70B:	MOV	EDX,EBX
	MOV	EBX,EAX
	XOR	EAX,EAX
	DIV	EBX	//dy*100000000/dx
	MOV	ESI,EAX

	OR	EDI,EDI
	JNS	@@72
	NEG	ESI

@@72:	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EDX,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD SF_PARAM5[EBP]
	MOV	EBX,DWORD SF_PARAM6[EBP]

	SUB	EAX,ECX 	//EAX=dx and (ECX,EDX)=start
	XOR	EBX,EBX
	INC	EAX
@@80:	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	PUSH	DWORD 0
	PUSH	EDX
	PUSH	ECX
	PUSH	DWORD SF_PARAM1[EBP]
	CALL	SF_PARAM8[EBP]
	ADD	ESP,16
	POP	EDX
	POP	EBX
	POP	EAX
	INC	ECX
	ADD	EBX,ESI
	ADC	EDX,EDI
	DEC	EAX
	JNZ	@@80

@@100:	POPAD
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
//EBX*(lo ECX,hi EAX)->(lo EAX,hi EDX)
GR_IMUL64::
	OR	EAX,EAX
	JS	@@40
	
	OR	EBX,EBX
	JS	@@20

@@10:	MUL	EBX
	XCHG	EAX,ECX
	MUL	EBX
	ADD	EDX,ECX
	RET

@@20:	NEG	EBX
@@30:	MUL	EBX
	XCHG	EAX,ECX
	MUL	EBX
	ADD	EDX,ECX
	NEG	EAX
	JC	@@31
	DEC	EDX
@@31:	NOT	EDX
	RET

@@40:	NEG	ECX
	JC	@@41
	DEC	EAX
@@41:	NOT	EAX
	OR	EBX,EBX
	JNS	@@30
	NEG	EBX
	MUL	EBX
	XCHG	EAX,ECX
	MUL	EBX
	ADD	EDX,ECX
	RET


////**************************PROCEDURE*************************
//public Jextern CP_GR_ROTATE void GrRotate(int *r,int *x,int *y,int *z);
	ALIGN	4,0x90
CP_GR_ROTATE::
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,24
	PUSHAD
	MOV	EDI,DWORD SF_PARAM2[EBP]
	MOV	EAX,DWORD [EDI]
	MOV	-4[EBP],EAX
	MOV	EDI,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD [EDI]
	MOV	-8[EBP],EAX
	MOV	EDI,DWORD SF_PARAM4[EBP]
	MOV	EAX,DWORD [EDI]
	MOV	-12[EBP],EAX

	MOV	ESI,DWORD SF_PARAM1[EBP]

	MOV	ECX,DWORD [ESI]
	MOV	EAX,DWORD 4[ESI]
	MOV	EBX,DWORD -4[EBP]
	CALL	GR_IMUL64
	PUSH	EDX
	PUSH	EAX
	MOV	ECX,DWORD 8[ESI]
	MOV	EAX,DWORD 12[ESI]
	MOV	EBX,DWORD -8[EBP]
	CALL	GR_IMUL64
	PUSH	EDX
	PUSH	EAX
	MOV	ECX,DWORD 16[ESI]
	MOV	EAX,DWORD 20[ESI]
	MOV	EBX,DWORD -12[EBP]
	CALL	GR_IMUL64
	POP	EBX
	ADD	EAX,EBX
	POP	EBX
	ADC	EDX,EBX
	POP	EBX
	ADD	EAX,EBX
	POP	EBX
	ADC	EDX,EBX
	MOV	DWORD -16[EBP],EDX

	MOV	ECX,DWORD 24[ESI]
	MOV	EAX,DWORD 28[ESI]
	MOV	EBX,DWORD -4[EBP]
	CALL	GR_IMUL64
	PUSH	EDX
	PUSH	EAX
	MOV	ECX,DWORD 32[ESI]
	MOV	EAX,DWORD 36[ESI]
	MOV	EBX,DWORD -8[EBP]
	CALL	GR_IMUL64
	PUSH	EDX
	PUSH	EAX
	MOV	ECX,DWORD 40[ESI]
	MOV	EAX,DWORD 44[ESI]
	MOV	EBX,DWORD -12[EBP]
	CALL	GR_IMUL64
	POP	EBX
	ADD	EAX,EBX
	POP	EBX
	ADC	EDX,EBX
	POP	EBX
	ADD	EAX,EBX
	POP	EBX
	ADC	EDX,EBX
	MOV	DWORD -20[EBP],EDX

	MOV	ECX,DWORD 48[ESI]
	MOV	EAX,DWORD 52[ESI]
	MOV	EBX,DWORD -4[EBP]
	CALL	GR_IMUL64
	PUSH	EDX
	PUSH	EAX
	MOV	ECX,DWORD 56[ESI]
	MOV	EAX,DWORD 60[ESI]
	MOV	EBX,DWORD -8[EBP]
	CALL	GR_IMUL64
	PUSH	EDX
	PUSH	EAX
	MOV	ECX,DWORD 64[ESI]
	MOV	EAX,DWORD 68[ESI]
	MOV	EBX,DWORD -12[EBP]
	CALL	GR_IMUL64
	POP	EBX
	ADD	EAX,EBX
	POP	EBX
	ADC	EDX,EBX
	POP	EBX
	ADD	EAX,EBX
	POP	EBX
	ADC	EDX,EBX
	MOV	DWORD -24[EBP],EDX

@@100:	MOV	EDI,DWORD SF_PARAM2[EBP]
	MOV	EAX,DWORD -16[EBP]
	MOV	DWORD [EDI],EAX
	MOV	EDI,DWORD SF_PARAM3[EBP]
	MOV	EAX,DWORD -20[EBP]
	MOV	DWORD [EDI],EAX
	MOV	EDI,DWORD SF_PARAM4[EBP]
	MOV	EAX,DWORD -24[EBP]
	MOV	DWORD [EDI],EAX
	POPAD
	ADD	ESP,24
	POP	EBP
	RET

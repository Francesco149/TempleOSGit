	ALIGN	4,0x90
IRQ_VECTORS::
	DD IRQ00,IRQ01,IRQ02,IRQ03;
	DD IRQ04,IRQ05,IRQ06,IRQ07;
	DD IRQ08,IRQ09,IRQ0A,IRQ0B;
	DD IRQ0C,IRQ0D,IRQ0E,IRQ0F;
	DD IRQ10,IRQ11,IRQ12,IRQ13;
	DD IRQ14,IRQ15,IRQ16,IRQ17;
	DD IRQ18,IRQ19,IRQ1A,IRQ1B;
	DD IRQ1C,IRQ1D,IRQ1E,IRQ1F;
	DD IRQ20,IRQ21,IRQ22,IRQ23;
	DD IRQ24,IRQ25,IRQ26,IRQ27;
	DD IRQ28,IRQ29,IRQ2A,IRQ2B;
	DD IRQ2C,IRQ2D,IRQ2E,IRQ2F;
	DD IRQ30,IRQ31,IRQ32,IRQ33;
	DD IRQ34,IRQ35,IRQ36,IRQ37;
	DD IRQ38,IRQ39,IRQ3A,IRQ3B;
	DD IRQ3C,IRQ3D,IRQ3E,IRQ3F;
	DD IRQ40,IRQ41,IRQ42,IRQ43;
	DD IRQ44,IRQ45,IRQ46,IRQ47;
	DD IRQ48,IRQ49,IRQ4A,IRQ4B;
	DD IRQ4C,IRQ4D,IRQ4E,IRQ4F;
	DD IRQ50,IRQ51,IRQ52,IRQ53;
	DD IRQ54,IRQ55,IRQ56,IRQ57;
	DD IRQ58,IRQ59,IRQ5A,IRQ5B;
	DD IRQ5C,IRQ5D,IRQ5E,IRQ5F;

////***************** RESERVED INTERRUPT ROUTINES ***************
	ALIGN	4,0x90
IRQ00:	PUSHAD
	MOV	EDX,0
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ01:	PUSHAD
	MOV	EDX,1
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ02:	PUSHAD
	MOV	EDX,2
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ03:	PUSHAD
	MOV	EDX,3
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ04:	PUSHAD
	MOV	EDX,4
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ05:	PUSHAD
	MOV	EDX,5
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ06:	PUSHAD
	MOV	EDX,6
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ07:	PUSHAD
	MOV	EDX,7
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ08:	PUSHAD
	MOV	EDX,8
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ09:	PUSHAD
	MOV	EDX,9
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ0A:	PUSHAD
	MOV	EDX,0x0A
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ0B:	PUSHAD
	MOV	EDX,0x0B
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ0C:	PUSHAD
	MOV	EDX,0x0C
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ0D:	PUSHAD
	MOV	EDX,0x0D
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ0E:	PUSHAD
	MOV	EDX,0x0E
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ0F:	PUSHAD
	MOV	EDX,0x0F
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ10:	PUSHAD
	MOV	EDX,0x10
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ11:	PUSHAD
	MOV	EDX,0x11
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ12:	PUSHAD
	MOV	EDX,0x12
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ13:	PUSHAD
	MOV	EDX,0x13
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ14:	PUSHAD
	MOV	EDX,0x14
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ15:	PUSHAD
	MOV	EDX,0x15
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ16:	PUSHAD
	MOV	EDX,0x16
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ17:	PUSHAD
	MOV	EDX,0x17
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ18:	PUSHAD
	MOV	EDX,0x18
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ19:	PUSHAD
	MOV	EDX,0x19
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ1A:	PUSHAD
	MOV	EDX,0x1A
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ1B:	PUSHAD
	MOV	EDX,0x1B
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ1C:	PUSHAD
	MOV	EDX,0x1C
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ1D:	PUSHAD
	MOV	EDX,0x1D
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ1E:	PUSHAD
	MOV	EDX,0x1E
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ1F:	PUSHAD
	MOV	EDX,0x1F
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ20:	STI
	CLD
	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ00*4[EAX]
	OR	EAX,EAX
	JZ	@@2
	MOV	EBX,ESP
	PUSH	DWORD 12[EBX]
	CALL	EAX
	ADD	ESP,4
@@2:	POP	EDX
	POP	EBX
	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POP	EAX
	BT	DWORD [SYS_FLAGS],SYSf_PREEMPTIVE
	JC	IRQ_SWAP_IN_NEXT
	IRET

IRQ_SWAP_IN_NEXT:
	CLI
	CALL	SAVE_CONTEXT		//PREEMPTIVE

	MOV	EBP,ESP
	MOV	EAX,[EBP]
	MOV	DWORD FS:[TSS_EIP],EAX
	MOV	EAX,8[EBP]
	MOV	DWORD FS:[TSS_EFLAGS],EAX
	ADD	EBP,12
	MOV	DWORD FS:[TSS_ESP],EBP

	MOV	ESI,DWORD FS:[TSS_NEXT_TSS]
	MOV	AX,WORD TSS_FS[ESI]
	MOV	FS,AX
	JMP	DWORD SWAP_IN_NEXT_PART2

	ALIGN	4,0x90
IRQ21::	CLD
	PUSH	EAX
	PUSH	EBX
	PUSH	EDX
	BTS	DWORD [SYS_IRQ_FLAGS],1
	XOR	EAX,EAX
	IN	AL,0x60
	STI

	MOV	EBX,DWORD [SYS_CUR_SCAN_CODE]
	AND	EBX,0xFFFFFE00

	CMP	AL,0xE0
	JNE	@@20
	BTS	EBX,SCf_PRIOR_E0
	JMP	DWORD @@1

@@20:	BTR	EBX,SCf_PRIOR_E0
	JNC	@@21
	BTS	EAX,SCf_E0_PREFIX

@@21:	CMP	EAX,0x2A
	JE	@@11
	CMP	EAX,0x36
	JNE	@@2
@@11:
	BTS	EBX,SCf_SHIFT
	JMP	DWORD @@10

@@2:	CMP	EAX,0xAA
	JE	@@12
	CMP	EAX,0xB6
	JNE	@@3
@@12:	BTR	EBX,SCf_SHIFT
	JMP	DWORD @@10

@@3:	CMP	AL,0x1D
	JNE	@@4
	BTS	EBX,SCf_CTRL
	JMP	DWORD @@10

@@4:	CMP	AL,0x9D
	JNE	@@5
	BTR	EBX,SCf_CTRL
	JMP	DWORD @@10

@@5:	CMP	AL,0x38
	JNE	@@6
	BTS	EBX,SCf_ALT
	JMP	DWORD @@10

@@6:	CMP	AL,0xB8
	JNE	@@7
	BTR	EBX,SCf_ALT
	JMP	@@10

@@7:	CMP	EAX,0x3A
	JE	@@10
	CMP	EAX,0xBA
	JNE	@@7B
	BTC	EBX,SCf_CAPS
	JMP	@@10

@@7B:	CMP	EAX,0x45
	JE    	@@10
	CMP	EAX,0xC5
	JNE	@@7C
	BTC	EBX,SCf_NUM
	JMP	@@10

@@7C:	BT	EBX,SCf_CTRL
	JNC	@@10
	BT	EBX,SCf_ALT
	JNC	@@10

	CMP	EAX,0x153	  //CTRL ALT DEL?
	JNE	@@8
	BTS	DWORD [SYS_FLAGS],SYSf_CTRL_ALT_DEL
	JMP	@@1

@@8:	CMP	EAX,1	       //CTRL ALT ESC?
	JNE	@@9
	BTS	DWORD [SYS_FLAGS],SYSf_CTRL_ALT_ESC
	JMP	@@1

@@9:	CMP	EAX,15	 	 //CTRL ALT TAB?
	JNE	@@13
	BTS	DWORD [SYS_FLAGS],SYSf_CTRL_ALT_TAB
	JMP	@@1

@@13:	CMP	EAX,0x2D	  //CTRL ALT X
	JNE	@@14
	BTS	DWORD [SYS_FLAGS],SYSf_CTRL_ALT_X
	JMP	@@1

@@14:	CMP	EAX,0x2E	  //CTRL ALT C
	JNE	@@10
	BTS	DWORD [SYS_FLAGS],SYSf_CTRL_ALT_C
	JMP	@@1

@@10:	BTS	EBX,SCf_NEW_KEY
@@1:	OR	EAX,EBX
	MOV	DWORD [SYS_CUR_SCAN_CODE],EAX

	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ01*4[EAX]
	OR	EAX,EAX
	JZ	@@100
	CALL	EAX

@@100:	POP	EDX
	POP	EBX
	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POP	EAX
	BTR	DWORD [SYS_IRQ_FLAGS],1
	IRET

	ALIGN	4,0x90
IRQ22:	PUSHAD
	MOV	EDX,0x22
	JMP	DWORD IRQFAULT


	ALIGN	4,0x90
IRQ23:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ03*4[EAX]
	OR	EAX,EAX
	JZ	@@231
	CALL	EAX
@@231:	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POPAD
	IRET

	ALIGN	4,0x90
IRQ24:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ04*4[EAX]
	OR	EAX,EAX
	JZ	@@241
	CALL	EAX
@@241:	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POPAD
	IRET

	ALIGN	4,0x90
IRQ25:	PUSHAD
	MOV	EDX,0x25
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ26:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ06*4[EAX]
	OR	EAX,EAX
	JZ	@@261
	CALL	EAX
@@261:	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POPAD
	IRET

	ALIGN	4,0x90
IRQ27:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ07*4[EAX]
	OR	EAX,EAX
	JZ	@@271
	CALL	EAX
@@271:	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POPAD
	IRET

	ALIGN	4,0x90
IRQ28:	PUSHAD
	MOV	EDX,0x28
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ29:	PUSHAD
	MOV	EDX,0x29
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ2A:	PUSHAD
	MOV	EDX,0x2A
	JMP	DWORD IRQFAULT


	ALIGN	4,0x90
IRQ2B:	PUSHAD
	MOV	EDX,0x2B
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ2C:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ0C*4[EAX]
	OR	EAX,EAX
	JZ	@@2C1
	CALL	EAX
@@2C1:	MOV	AL,0x20
	OUT	0xA0,AL
	MOV	AL,0x20
	OUT	0x20,AL
	POPAD
	IRET

	ALIGN	4,0x90
IRQ2D:	PUSHAD
	MOV	EDX,0x2D
	JMP	DWORD IRQFAULT


	ALIGN	4,0x90
IRQ2E:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ0E*4[EAX]
	OR	EAX,EAX
	JZ	@@2E1
	CALL	EAX
@@2E1:	MOV	AL,0x20
	OUT	0xA0,AL
	MOV	AL,0x20
	OUT	0x20,AL
	POPAD
	IRET

	ALIGN	4,0x90
IRQ2F:	CLD
	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EAX,DWORD EXT_IRQ0F*4[EAX]
	OR	EAX,EAX
	JZ	@@2F1
	CALL	EAX
@@2F1:	MOV	AL,0x20
	OUT	0xA0,AL
	MOV	AL,0x20
	OUT	0x20,AL
	POPAD
	IRET

//************************************ SOFTWARE INT'S ******************************

	ALIGN	4,0x90
IRQ30:	STI
	PUSHAD
	PUSH	ESI
	CALL	CP_PUT_SYSTEXT+4
	ADD	ESI,4
	POPAD
	IRET

	ALIGN	4,0x90
IRQ31:	STI
	CALL	PUT_CHAR
	IRET

	ALIGN	4,0x90
IRQ32:	STI
	PUSHAD
	MOV	ESI,MSG_GETCHAR
	CALL	FIND_EXTERN
	OR	ESI,ESI
	JNZ	@@3210
	CALL	GET_CHAR
	JMP	@@3220
@@3210:	CALL	ESI
@@3220:	MOV	EBP,ESP
	MOV	DWORD SP_EAX[EBP],EAX
	POPAD
	IRET


COUT_JOIN::
	OR	EBX,EBX
	JZ	@@100
@@20:	MOV	EDX,DWORD [EBP]
	MOV	EAX,DWORD 4[EBP]

	CMP	EDX,IT_NUM_IT+IT_CHAR
	JNE	@@25
	PUSH	ESI
	MOV	ESI,EAX
	CALL	PUT_STRING
	POP	ESI
	JMP	@@29
@@25:	CMP	EDX,IT_DWORD
	JE	@@21
	CMP	EDX,IT_INT
	JNE	@@21A
@@21:	CALL	PUT_HEX
	JMP	@@29
@@21A:	CMP	EDX,IT_WORD
	JE	@@22
	CMP	EDX,IT_SHORT
	JNE	@@22A
@@22:	CALL	PUT_HEX_WORD
	JMP	@@29
@@22A:	CMP	EDX,IT_BYTE
	JNE	@@23
	CALL	PUT_HEX_BYTE
	JMP	@@29
@@23:	CMP	EDX,IT_CHAR
	JNE	@@21
	CALL	PUT_CHAR

@@29:	SUB	EBP,8
	DEC	EBX
	JNZ	@@20
@@100:	RET

	ALIGN	4,0x90
IRQ33::	STI		//COUT
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,EAX 	//GET PARAM CNT
	LEA	EBP,16-8[EBP+EBX*8]
	CALL	COUT_JOIN
	POP	EBP
	IRET

	ALIGN	4,0x90
IRQ34:	STI
	PUSHAD
	SUB	ESP,8	//Space for param1 & param2
	PUSH	EAX	//mask
	MOV	EAX,ESP
	ADD	EAX,8
	PUSH	EAX	//&param2
	SUB	EAX,4
	PUSH	EAX	//&param1
	MOV	ESI,MSG_PEEK_MESSAGE
	CALL	FIND_EXTERN
	CALL	ESI
	ADD	ESP,12
	POP	EBX	//param1
	POP	EDX	//param2
	MOV	EBP,ESP
	MOV	DWORD SP_EAX[EBP],EAX
	MOV	DWORD SP_EBX[EBP],EBX
	MOV	DWORD SP_EDX[EBP],EDX
	POPAD
	IRET

	ALIGN	4,0x90
IRQ35:	STI
	PUSHAD
	SUB	ESP,8	//Space for param1 & param2
	PUSH	EAX	//mask
	MOV	EAX,ESP
	ADD	EAX,8
	PUSH	EAX	//&param2
	SUB	EAX,4
	PUSH	EAX	//&param1
	MOV	ESI,MSG_GET_MESSAGE_NO_WAIT
	CALL	FIND_EXTERN
	CALL	ESI
	ADD	ESP,12
	POP	EBX	//param1
	POP	EDX	//param2
	MOV	EBP,ESP
	MOV	DWORD SP_EAX[EBP],EAX
	MOV	DWORD SP_EBX[EBP],EBX
	MOV	DWORD SP_EDX[EBP],EDX
	POPAD
	IRET

	ALIGN	4,0x90
IRQ36:	STI
	PUSHAD
	SUB	ESP,8	//Space for param1 & param2
	PUSH	EAX	//mask
	MOV	EAX,ESP
	ADD	EAX,8
	PUSH	EAX	//&param2
	SUB	EAX,4
	PUSH	EAX	//&param1
	MOV	ESI,MSG_GET_MESSAGE
	CALL	FIND_EXTERN
	CALL	ESI
	ADD	ESP,12
	POP	EBX	//param1
	POP	EDX	//param2
	MOV	EBP,ESP
	MOV	DWORD SP_EAX[EBP],EAX
	MOV	DWORD SP_EBX[EBP],EBX
	MOV	DWORD SP_EDX[EBP],EDX
	POPAD
	IRET

	ALIGN	4,0x90
IRQ37::	STI
	CALL	PUT_STRING
	IRET

	ALIGN	4,0x90
IRQ38::	STI		//COUTLN
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,EAX 	//GET PARAM CNT
	LEA	EBP,16-8[EBP+EBX*8]
	CALL	COUT_JOIN
	CALL	CRLF
	POP	EBP
	IRET

	ALIGN	4,0x90
IRQ39:	PUSHAD
	MOV	EDX,0x39
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ3A:	PUSHAD
	MOV	EDX,0x3A
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ3B:	PUSHAD
	MOV	EDX,0x3B
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ3C:	PUSHAD
	MOV	EDX,0x3C
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ3D:	PUSHAD
	MOV	EDX,0x3D
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ3E:	PUSHAD
	MOV	EDX,0x3E
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ3F:	PUSHAD
	MOV	EDX,0x3F
	JMP	DWORD IRQFAULT


//******************** SOFTWARE IRQS ****************
	ALIGN	4,0x90
IRQ40:	PUSHAD
	MOV	EDX,0x40
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ41:	PUSHAD
	MOV	EDX,0x41
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ42:	PUSHAD
	MOV	EDX,0x42
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ43:	PUSHAD
	MOV	EDX,0x43
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ44:	PUSHAD
	MOV	EDX,0x44
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ45:	PUSHAD
	MOV	EDX,0x45
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ46:	PUSHAD
	MOV	EDX,0x46
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ47:	PUSHAD
	MOV	EDX,0x47
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ48:	PUSHAD
	MOV	EDX,0x48
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ49:	PUSHAD
	MOV	EDX,0x49
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ4A:	PUSHAD
	MOV	EDX,0x4A
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ4B:	PUSHAD
	MOV	EDX,0x4B
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ4C:	PUSHAD
	MOV	EDX,0x4C
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ4D:	PUSHAD
	MOV	EDX,0x4D
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ4E:	PUSHAD
	MOV	EDX,0x4E
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ4F:	PUSHAD
	MOV	EDX,0x4F
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ50:	PUSHAD
	MOV	EDX,0x50
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ51:	PUSHAD
	MOV	EDX,0x51
	JMP	DWORD IRQFAULT

	ALIGN	4,0x90
IRQ52:	PUSHAD
	MOV	EDX,0x52
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ53:	PUSHAD
	MOV	EDX,0x53
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ54:	PUSHAD
	MOV	EDX,0x54
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ55:	PUSHAD
	MOV	EDX,0x55
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ56:	PUSHAD
	MOV	EDX,0x56
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ57:	PUSHAD
	MOV	EDX,0x57
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ58:	PUSHAD
	MOV	EDX,0x58
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ59:	PUSHAD
	MOV	EDX,0x59
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ5A:	PUSHAD
	MOV	EDX,0x5A
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ5B:	PUSHAD
	MOV	EDX,0x5B
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ5C:	PUSHAD
	MOV	EDX,0x5C
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ5D:	PUSHAD
	MOV	EDX,0x5D
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ5E:	PUSHAD
	MOV	EDX,0x5E
	JMP	IRQFAULT

	ALIGN	4,0x90
IRQ5F:	PUSHAD
	MOV	EDX,0x5F
	JMP	IRQFAULT

FAULT_DESC:	DB "FAULT TASK",0;

CP_FAULT::
	PUSHAD
	MOV	EBP,ESP
	MOV	EDX,DWORD SP_PARAM1[EBP]
IRQFAULT::
	CLD
	PUSH	DS
	PUSH	ES
	MOV	EAX,ZERO_DS_SEL
	MOV	DS,AX
	MOV	ES,AX
	BTS	DWORD FS:[TSS_TASK_FLAGS],TSSf_SUSPENDED
	PUSH	EDX				//Save IRQNUM
	PUSH	DWORD FS:[TSS_ABSOLUTE_ADDRESS]	//Save TSS
	MOV	DWORD [SYS_CUR_FOCUS_TASK],0

	PUSH	DWORD DEFAULT_STACK
	PUSH	DWORD 0		///Use parent account
	PUSH	DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	PUSH	DWORD FAULT_DESC
	PUSH	DWORD CP_FAULT_CMD_LINE+4
	CALL	CP_SPAWN_TASK+4
	ADD	ESP,20

	POP	DWORD TSS_USER_AUX1[EAX]
	POP	DWORD TSS_USER_AUX0[EAX]
	POP	ES
	POP	DS
	POPAD
	JMP	DWORD IRQ_SWAP_IN_NEXT

GET_MACHINE_REGS::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,SF_PARAM1[EBP]

	DB	0x0F,0x20,0xC0;
	MOV	DWORD [EBX],EAX
	DB	0x0F,0x20,0xD0;
	MOV	DWORD 4[EBX],EAX
	DB	0x0F,0x20,0xD8;
	MOV	DWORD 8[EBX],EAX
	DB	0x0F,0x20,0xE0;
	MOV	DWORD 12[EBX],EAX

	DB	0x0F,0x21,0xC0;
	MOV	DWORD 16[EBX],EAX
	DB	0x0F,0x21,0xC8;
	MOV	DWORD 20[EBX],EAX
	DB	0x0F,0x21,0xD0;
	MOV	DWORD 24[EBX],EAX
	DB	0x0F,0x21,0xD8;
	MOV	DWORD 28[EBX],EAX
	DB	0x0F,0x21,0xF0;
	MOV	DWORD 32[EBX],EAX
	DB	0x0F,0x21,0xF8;
	MOV	DWORD 36[EBX],EAX

	POP	EBP
	RET

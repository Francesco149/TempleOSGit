	ALIGN	4,0x90
NORMAL_KEY_SCAN_DECODE_TABLE:
	DB	0,27,"1234567890-=",8,9;
	DB	"qwertyuiop[]",13,0,"as";
	DB	"dfghjkl;'\`",0,"\\zxcv";
	DB	"bnm,./",0,0,0,32;
	ALIGN	4,0x90
SHIFT_KEY_SCAN_DECODE_TABLE:
	DB	0,27,"!@#$%^&*()_+",8,9;
	DB	"QWERTYUIOP{}",13,0,"AS";
	DB	"DFGHJKL:\"~",0,"|ZXCV";
	DB	"BNM<>?",0,0,0,32;
	ALIGN	4,0x90
CTRL_KEY_SCAN_DECODE_TABLE:
	DB	0,27,"1234567890-=",8,9;
	DB	17,23,5,18,20,25,21,9,15,16,"[]",13,0,1,19;
	DB	4,6,7,8,10,11,12,";'\`",0,"\\",26,24,3,22;
	DB	2,14,13,",./",0,0,0,32;
	ALIGN	4,0x90
ALT_KEY_SCAN_DECODE_TABLE:
	DB	0,27,"1234567890-=",8,9;
	DB	"qwertyuiop[]",13,0,"as";
	DB	"dfghjkl;'\`",0,"\\zxcv";
	DB	"bnm,./",0,0,0,32;
////**************************PROCEDURE*************************
	ALIGN	4,0x90
TRANSLATE_SCAN_CODE::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EAX,DWORD SF_PARAM1[EBP]
	BT	EAX,SCf_E0_PREFIX
	JC	@@100
	BT	EAX,SCf_CTRL
	JNC	@@1
	MOV	EBX,CTRL_KEY_SCAN_DECODE_TABLE
	JMP	@@10

@@1:	BT	EAX,SCf_ALT
	JNC	@@2
	MOV	EBX,ALT_KEY_SCAN_DECODE_TABLE
	JMP	@@10

@@2:	MOV	EBX,NORMAL_KEY_SCAN_DECODE_TABLE
	BT	EAX,SCf_SHIFT
	JNC	@@4
	BT	EAX,SCf_CAPS
	JC	@@10
@@3:	MOV	EBX,SHIFT_KEY_SCAN_DECODE_TABLE
	JMP	@@10
@@4:	BT	EAX,SCf_CAPS
	JC	@@3

@@10:	AND	EAX,0x7F
	CMP	EAX,0x3A
	JAE	@@100
	MOVZX	EAX,BYTE [EBX+EAX]
	POP	EBX
	POP	EBP
	RET
@@100:	XOR	EAX,EAX
	POP	EBX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
GET_KEY::
	JMP	@@2
@@1:	CALL	SWAP_IN_NEXT
@@2:	MOV	EAX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	CMP	DWORD [SYS_CUR_FOCUS_TASK],EAX
	JNE	@@1
	BTR	DWORD [SYS_CUR_SCAN_CODE],SCf_NEW_KEY
	JNC	@@1
	BT	DWORD [SYS_CUR_SCAN_CODE],SCf_KEY_UP
	JC	@@1
	PUSH	DWORD [SYS_CUR_SCAN_CODE]
	CALL	TRANSLATE_SCAN_CODE
	ADD	ESP,4
	OR	AL,AL
	JZ	@@1
	RET

CP_GET_KEY::
	PUSHAD
	MOV	ESI,MSG_GET_CHAR_NO_ECHO
	CALL	FIND_EXTERN
	OR	ESI,ESI
	JNZ	@@10
	CALL	GET_KEY
	JMP	@@20
@@10:	CALL	ESI
@@20:	MOV	EBP,ESP
	MOV	DWORD SP_EAX[EBP],EAX
	POPAD
	RET

	ALIGN	4,0x90
GET_CHAR::
	CALL	GET_KEY
	INT	I_PUT_CHAR
	RET
CP_GET_CHAR::
	INT	I_GET_CHAR
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=NUMBER TO PRINT
	ALIGN	4,0x90
PUT_HEX::
	PUSH	ECX
	MOV	ECX,8
	CALL	FIXED_PUT_HEX
	POP	ECX
	RET
PUT_HEX_WORD::
	PUSH	ECX
	MOV	ECX,4
	CALL	FIXED_PUT_HEX
	POP	ECX
	RET
PUT_HEX_BYTE::
	PUSH	ECX
	MOV	ECX,2
	CALL	FIXED_PUT_HEX
	POP	ECX
	RET
FIXED_PUT_HEX::
	PUSH	EAX			//-****
	PUSH	EBX			//-****
	PUSH	EDI			//-****
	PUSH	EBP			//-****
	SUB	ESP,8			//-****

	MOV	EDI,ESP

	PUSH	ECX			//-****
	CALL	BINARY_TO_FIXED_HEX
	POP	ECX			//+****

	MOV	EBP,ESP

@@1:	MOV	AL,BYTE [EBP]
	INC	EBP
	INT	I_PUT_CHAR
	LOOP	@@1

	ADD	ESP,8			//+****
	POP	EBP			//+****
	POP	EDI			//+****
	POP	EBX			//+****
	POP	EAX			//+****
	RET

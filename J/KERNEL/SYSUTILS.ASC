	ALIGN	4,0x90
////**************************PROCEDURE*************************
	ALIGN	4,0x90
DEBUG_SPIN_WAIT::
	PUSH	ECX
	MOV	ECX,0x8FFFFFFF
@@1:	LOOP	@@1
	POP	ECX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
OR_WORD_BIT_FIELD::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EBX,ECX
	SHR	EBX,3
	MOV	EAX,DWORD SF_PARAM3[EBP]
	AND	ECX,7
	SHL	EAX,CL
	MOV	ECX,DWORD SF_PARAM1[EBP]
	OR	DWORD [ECX+EBX],EAX
	POP	ECX
	POP	EBP
	RET
////**************************PROCEDURE*************************
EWBP_MASKTABLE:
	DD	0,1,3,7,15,31,63,127,255;
	DD	0x1FF,0x3FF,0x7FF,0x0FFF;
	DD	0x1FFF,0x3FFF,0x7FFF,0x0FFFF;

EXTRACT_WORD_BIT_FIELD::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	MOV	EBX,DWORD SF_PARAM1[EBP]
	MOV	ECX,DWORD SF_PARAM2[EBP]
	MOV	EAX,ECX
	SHR	EAX,3
	MOV	EAX,DWORD [EBX+EAX]
	AND	ECX,7
	SHR	EAX,CL
	MOV	EBX,DWORD SF_PARAM3[EBP]
	AND	EAX,DWORD EWBP_MASKTABLE[EBX*4]
	POP	ECX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
U64_ADD::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD SF_PARAM3[EBP]
	MOV	EDX,DWORD SF_PARAM4[EBP]
	ADD	EAX,DWORD SF_PARAM5[EBP]
	ADC	EDX,DWORD SF_PARAM6[EBP]
	MOV	EBX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	DWORD [EBX],EDX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
U64_SUB::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD SF_PARAM3[EBP]
	MOV	EDX,DWORD SF_PARAM4[EBP]
	SUB	EAX,DWORD SF_PARAM5[EBP]
	SBB	EDX,DWORD SF_PARAM6[EBP]
	MOV	EBX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	DWORD [EBX],EDX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
U64_MUL::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD SF_PARAM3[EBP]
	MUL	DWORD SF_PARAM6[EBP]
	MOV	EBX,EAX
	MOV	EAX,DWORD SF_PARAM4[EBP]
	MUL	DWORD SF_PARAM5[EBP]
	ADD	EBX,EAX
	MOV	EAX,DWORD SF_PARAM3[EBP]
	MUL	DWORD SF_PARAM5[EBP]
	ADD	EDX,EBX
	MOV	EBX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	DWORD [EBX],EDX
	POP	EBP
	RET

////**************************PROCEDURE*************************
	ALIGN	4,0x90
I64_MUL::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD SF_PARAM4[EBP]
	OR	EAX,EAX
	JS	@@40

	MOV	EAX,DWORD SF_PARAM6[EBP]
	OR	EAX,EAX
	JS	@@20

@@10:	MOV	EAX,DWORD SF_PARAM3[EBP]
	MUL	DWORD SF_PARAM6[EBP]
	MOV	EBX,EAX
	MOV	EAX,DWORD SF_PARAM4[EBP]
	MUL	DWORD SF_PARAM5[EBP]
	ADD	EBX,EAX
	MOV	EAX,DWORD SF_PARAM3[EBP]
	MUL	DWORD SF_PARAM5[EBP]
	ADD	EDX,EBX
	MOV	EBX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	DWORD [EBX],EDX
	POP	EBP
	RET

@@20:	NEG	DWORD SF_PARAM5[EBP]
	JC	@@21
	DEC	DWORD SF_PARAM6[EBP]
@@21:	NOT	DWORD SF_PARAM6[EBP]
@@30:	MOV	EAX,DWORD SF_PARAM3[EBP]
	MUL	DWORD SF_PARAM6[EBP]
	MOV	EBX,EAX
	MOV	EAX,DWORD SF_PARAM4[EBP]
	MUL	DWORD SF_PARAM5[EBP]
	ADD	EBX,EAX
	MOV	EAX,DWORD SF_PARAM3[EBP]
	MUL	DWORD SF_PARAM5[EBP]
	ADD	EDX,EBX
	NEG	EAX
	JC	@@31
	DEC	EDX
@@31:	NOT	EDX
	MOV	EBX,DWORD SF_PARAM1[EBP]
	MOV	DWORD [EBX],EAX
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	DWORD [EBX],EDX
	POP	EBP
	RET

@@40:	NEG	DWORD SF_PARAM3[EBP]
	JC	@@41
	DEC	DWORD SF_PARAM4[EBP]
@@41:	NOT	DWORD SF_PARAM4[EBP]

	MOV	EAX,DWORD SF_PARAM6[EBP]
	OR	EAX,EAX
	JNS	@@30

	NEG	DWORD SF_PARAM5[EBP]
	JC	@@42
	DEC	DWORD SF_PARAM6[EBP]
@@42:	NOT	DWORD SF_PARAM6[EBP]
	JMP	@@10
////**************************PROCEDURE*************************
	ALIGN	4,0x90
U64_DIV::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EDX,DWORD SF_PARAM2[EBP]
	DIV	DWORD SF_PARAM3[EBP]
	POP	EBP
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=STRUCT TO INSERT
//	 EDI=PREDECESSOR
	ALIGN	4,0x90
INSQUE::
	PUSH	EBX
	MOV	EBX,[EDI]
	MOV	[EDI],ESI
	MOV	[ESI],EBX
	MOV	4[ESI],EDI
	MOV	4[EBX],ESI
	POP	EBX
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=STRUCT TO INSERT
//	 EDI=SUCCESSOR
	ALIGN	4,0x90
INSQUE_REV::
	PUSH	EBX
	MOV	EBX,4[EDI]
	MOV	[EBX],ESI
	MOV	[ESI],EDI
	MOV	4[ESI],EBX
	MOV	4[EDI],ESI
	POP	EBX
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=STRUCT TO REMOVE
	ALIGN	4,0x90
REMQUE::
	PUSH	EBX
	PUSH	EDI
	MOV	EBX,[ESI]
	MOV	EDI,4[ESI]
	MOV	[EDI],EBX
	MOV	4[EBX],EDI
	POP	EDI
	POP	EBX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PUT_CHAR::
	PUSHAD
	PUSH	EAX
	CALL	CP_PUT_CHAR+4
	ADD	ESP,4
	POPAD
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PUT_STRING::
	PUSHAD
	PUSH	ESI
	CALL	CP_PUT_STRING+4
	ADD	ESP,4
	POPAD
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=BINARY
//	 ES:[EDI]=@FIELD
//	 ECX=LENGTH (IF THE HEX_FIELD ENTRY IS USED)
//
// OUT:  EAX PRESERVED
//	 ECX=0
//	 [EDI] POINTS PAST DESTINATION

	ALIGN	4,0x90
BINARY_TO_HEX::
	MOV	ECX,8
BINARY_TO_FIXED_HEX:
	PUSHFD				//-****
	CLI				//because of STD
	PUSH	EAX			//-****
	PUSH	EDX			//-****
	ADD	EDI,ECX
	PUSH	EDI			//-**** EDI WE WANT TO RETURN
	DEC	EDI
	MOV	EDX,EAX
	STD

@@1:	MOV	AL,DL
	AND	AL,0xF
	ADD	AL,0x90
	DAA
	ADC	AL,0x40
	DAA
	STOSB
	SHR	EDX,4
	LOOP	@@1

	POP	EDI			//+****
	POP	EDX			//+****
	POP	EAX			//+****
	POPFD				//+****
	RET
////**************************PROCEDURE*************************
//IN:	 [ESI] = @FIELD
//	 ECX = LENGTH
//OUT:	 EAX = VALUE
//	 ECX = 0
	ALIGN	4,0x90
HEX_TO_BINARY::
	PUSH	EDX
	XOR	EDX,EDX
	OR	ECX,ECX
	JZ	@@9
@@1:	SHL	EDX,4
	LODSB
	SUB	AL,0x30
	CMP	AL,9
	JA	@@2
	SUB	AL,7
@@2:	MOVZX	EAX,AL
	ADD	EDX,EAX
	LOOP	@@1

@@9:	MOV	EAX,EDX
	POP	EDX
	RET
////**************************PROCEDURE*************************
CP_TEST_TRAP::
	MOV	EAX,DWORD FS:[TSS_LAST_TRAP]
	MOV	EBP,DWORD TRP_EBP[EAX]
	CALL	DWORD TRP_HANDLER_START[EAX]
	RET
////**************************PROCEDURE*************************
CP_TAKE_TRAP::
	MOV	EAX,DWORD FS:[TSS_LAST_TRAP]
	MOV	EDX,DWORD TRP_HANDLER_SKIP[EAX]
	MOV	ESP,DWORD TRP_ESP[EAX]
	JMP	EDX
////**************************PROCEDURE*************************
	ALIGN	4,0x90
YEAR_START_DATES::
	DW	0,366,731,1096,1461,1827,2192,2557,2922,3288,
		3653,4018,4383,4749,5114,5479,5844,6210,6575,
		6940,7305,7671,8036,8401,8766,9132,9497,9862,
		10227,10593,10958,11323,11688,12054,12419,12784,13149;
MONTH_START_DAYS1::
	DW	0,31,59,90,120,151,181,212,243,273,304,334;
MONTH_START_DAYS2::
	DW	0,31,60,91,121,152,182,213,244,274,305,335;

DWORD ToJDate(JDateStruct *d)
{
  JDate jd;
  DWORD i,minutes=d->minutes,hours=d->hours;
  i=year_start_dates[d->year-76];
  if (year_start_dates[d->year-75]-i==365)
     i+=month_start_days1[d->month-1];
   else
     i+=month_start_days2[d->month-1];
  jd.dt.date=i+d->day_of_month-1;
  i=d->seconds+60*(minutes+60*hours);
  jd.dt.time=512*i/(15*15*3);
  return jd.d;
}

void ToJDateStruct(JDateStruct *d,JDate jd)
{
  DWORD j,date=jd.dt.date,time=jd.dt.time;

  d->day_of_week=(date+4)%7;
  j=0;
  while (date>=year_start_dates[j+1] && j<36)
    j++;
  d->year=76+j;

  date=date-year_start_dates[j];
  if (year_start_dates[j+1]-year_start_dates[j]==365) {
    j=0;
    while (date>=month_start_days1[j+1] && j<11)
      j++;
    date=date-month_start_days1[j];
  } else {
    j=0;
    while (date>=month_start_days2[j+1] && j<11)
      j++;
    date=date-month_start_days2[j];
  }
  d->month=j+1;
  d->day_of_month=date+1;
  j=(15*15*3)*time/512;
  d->seconds=j % 60;  j/=60;
  d->minutes=j % 60;
  d->hours  =j/60;
}

WORD FirstDayOfMonth(WORD i)
{
  JDateStruct d;
  U4 jd;
  ToJDateStruct(&d,i<<16);
  d.day_of_month=1;
  jd.d=ToJDate(&d);
  return jd.w.w1;
}

WORD LastDayOfMonth(WORD i)
{
  JDateStruct d;
  U4 jd;
  ToJDateStruct(&d,i<<16);
  d.month++;
  if (d.month==13) {
    d.month=0;
    d.year++;
  }
  d.day_of_month=1;
  jd.d=ToJDate(&d);
  return jd.w.w1-1;
}

WORD FirstDayOfYear(WORD i)
{
  JDateStruct d;
  U4 jd;
  ToJDateStruct(&d,i<<16);
  d.day_of_month=1;
  d.month=1;
  jd.d=ToJDate(&d);
  return jd.w.w1;
}

WORD LastDayOfYear(WORD i)
{
  JDateStruct d;
  U4 jd;
  ToJDateStruct(&d,i<<16);
  d.day_of_month=1;
  d.month=1;
  d.year++;
  jd.d=ToJDate(&d);
  return jd.w.w1-1;
}

BYTE DayOfWeek(WORD i)
{
  return (i+4) % 7;
}



int Bcd2Bin(DWORD b)
{
  int i,result=0;
  for (i=0;i<8;i++) {
    result=result*10+b/0x10000000;
    b<<=4;
  }
  return result;
}


void GetCurTimeJDateStruct(JDateStruct *r)
{
  int i,old_flags=GetFlags;
  BYTE *p=r;

  Cli;
  do OutP(0x70,0x0A);
  while (InP(0x71) & 0x80);

  OutP(0x70,0);
  p[0]=InP(0x71);
  OutP(0x70,2);
  p[1]=InP(0x71);
  OutP(0x70,4);
  p[2]=InP(0x71);

  OutP(0x70,6);
  p[3]=InP(0x71);
  OutP(0x70,7);
  p[4]=InP(0x71);
  OutP(0x70,8);
  p[5]=InP(0x71);
  OutP(0x70,9);
  p[6]=InP(0x71);

  SetFlags(old_flags);

  OutP(0x70,0x0B);
  if (!(InP(0x71) & 4)) {
    for (i=0;i<7;i++)
      p[i]=Bcd2Bin(p[i]);
  }
  r->year=r->year+100;
}

DWORD GetCurTimeJDate()
{
  JDateStruct r;
  GetCurTimeJDateStruct(&r);
  return ToJDate(&r);
}

DWORD DosToJDate(WORD tt,WORD dd)
{
  DWORD t=tt,d=dd;
  JDateStruct jd;
  jd.day_of_month=d&0x1F; d>>=5;
  jd.month=d&0xF;
  jd.year=(d>>4)+80;
  jd.seconds=(t&0x1F)*2; t>>=5;
  jd.minutes=t&0x3F;
  jd.hours=t>>6;
  return ToJDate(&jd);
}

void JDateToDos(WORD *t,WORD *d,DWORD jdate)
{
  JDateStruct jd;
  ToJDateStruct(&jd,jdate);
  *d=jd.day_of_month+((jd.month+((jd.year-80)<<4))<<5);
  *t=(jd.seconds>>1)+((jd.minutes+(jd.hours<<6))<<5);
}

void JDateToISO(ISODate *dst,DWORD jdate)
{
  JDateStruct d;
  ToJDateStruct(&d,jdate);
  dst->year=d.year;
  dst->mon=d.month;
  dst->day=d.day_of_month;
  dst->hour=d.hours;
  dst->min=d.minutes;
  dst->sec=d.seconds;
  dst->hund=0;
}

DWORD ISOToJDate(ISODate *dt)
{
  JDateStruct jd;
  jd.day_of_month=dt->day;
  jd.month=dt->mon;
  jd.year=dt->year;
  jd.seconds=dt->sec;
  jd.minutes=dt->min;
  jd.hours=dt->hour;
  return ToJDate(&jd);
}

/**********************************************************
SToDate()
  This routine recognizes the following formats:
  1) "*+nnnn"  "*-nnnnn"
  2) mm/dd
  3) mm/dd/yy

WORD SToDate(char *src)
{
  int result=0;
  struct tm d,*d1;
  char *u,v[84],*p1;
  bool start_month=false,end_month=false;
  bool start_year=false,end_year=false;

  strcpy(u,src);
  edit_string(u,ed_remove_spaces|ed_to_upper);
  u=MStringUtil(src,SU_REMOVE_SPACES+SU_TO_UPPER);
  p1=u;
  if (!strncmp(p1,"SM(",3)) {
    p1+=3;
    start_month=true;
  } else if (!strncmp(p1,"EM(",3)) {
    p1+=3;
    end_month=true;
  } else if (!strncmp(p1,"SY(",3)) {
    p1+=3;
    start_year=true;
  } else if (!strncmp(p1,"EY(",3)) {
    p1+=3;
    end_year=true;
  }
  if (*p1=='*') {
    p1++;
    if (*p1=='+' || *p1=='-')
      result=strtoul(p1,&p1,10);
    result += (int)current_date();
  } else if (*p1=='[') {
    p1++;
    if (*p1=='+' || *p1=='-')
      result=strtoul(p1,&p1,10);
    result += firstd;
  } else if (*p1==']') {
    p1++;
    if (*p1=='+' || *p1=='-')
      result=strtoul(p1,&p1,10);
    result += lastd;
  } else {
    remove_first_segment(p1,'/',v); //Put month into v
    d.tm_mon = atoi(v)-1;
    if (occurrences(p1,'/')) {
      remove_first_segment(p1,'/',v); //Put day into v leaving year in p1
      d.tm_mday = atoi(v);
      d.tm_year=strtoul(p1,&p1,10);
      if (d.tm_year<100) { //if not 4 digit year
	if (d.tm_year<76)
	    d.tm_year+=100;
      }
    } else {
      d.tm_mday=strtoul(p1,&p1,10);
      time( &aclock );
      d1 = localtime( &aclock );
      d.tm_year=d1->tm_year;
    }
    result=to_WORD_date(d);
  }
  if (*p1==')') p1++;

  if (start_month) result=first_day_of_month(result);
  else if (end_month) result=last_day_of_month(result);
  else if (start_year) result=first_day_of_year(result);
  else if (end_year) result=last_day_of_year(result);

  if (*p1=='+' || *p1=='-')
    result+=strtoul(p1,&p1,10);
  return result;
}
**********************************************************/

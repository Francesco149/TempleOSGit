void Exit()
{
  Bts(&Fs->task_flags,TSSf_KILL_TASK);
  while (TRUE)
    SwapInNext;
}

void Kill(TssStruct *tss)
{
  Bts(&tss->task_flags,TSSf_KILL_TASK);
}

void SimpleTimerIrq()
{
  DWORD old_flags=GetFlags;
  Cli;
  jiffies=jiffies+1;
  Add64(&sys_timer_lo,&sys_timer_hi,sys_timer_lo,sys_timer_hi,SYS_TIMER0_PERIOD+1,0);
  SetFlags(old_flags);
}

void ReadSysTimer(DWORD *lo,DWORD *hi)
{
  DWORD i,old_flags=GetFlags;
  Cli;
  OutP(0x43,0); //Latch Timer0
  i=InP(0x40);
  i+=(InP(0x40)<<8);
  Add64(lo,hi,sys_timer_lo,sys_timer_hi,SYS_TIMER0_PERIOD-i,0);
  SetFlags(old_flags);
}

WORD RandWORD() //TODO: fix this
{
  DWORD lo,hi;
  ReadSysTimer(&lo,&hi);
  rnd_SEED.d=lo^hi^jiffies;
  return rnd_SEED.w.w0;
}

DWORD RandDWORD()
{
  U4 result;
  result.w.w0=RandWORD;
  result.w.w1=RandWORD;
  return result.d;
}


void PortNop()
{
  InP(0x379);  //This is an innoculous ISA (parallel port)
	       //access which should take
	       //fixed time on all machines.
	       //It takes 1.66uS
}

void BusyWait(DWORD uS) //Loosely timed
{
  DWORD i;
  for (i=0;i<uS;i++)
    PortNop;
}

void Sleep(DWORD mS)
{
  DWORD old_flags=GetFlags;
  DWORD target_jiffies=jiffies+(mS*SYS_TIMER_FREQ/1000);
  Sti;
  do SwapInNext;
  while (jiffies<target_jiffies);
  SetFlags(old_flags);
}

void Sound(WORD freq)
{
  DWORD p,old_flags=GetFlags;
  if (Bt(&sys_flags,SYSf_NO_SOUND))
    return;
  if (freq) {
    p=65536*182/10/freq;
    Cli;
    OutP(0x43,0xB6);
    OutP(0x42,p);
    OutP(0x42,p/256);
    OutP(0x61,3);
    SetFlags(old_flags);
  } else
    OutP(0x61,0);
}

BOOL AssignBit(DWORD *field,DWORD bit,BOOL val)
{
  BOOL result;
  if (val)
    result=Bts(field,bit);
  else
    result=Btr(field,bit);
  return result;
}

BOOL Externs2Imports(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_EXTERNS_TO_IMPORTS,val);
}

BOOL KeepPrivate(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_KEEP_PRIVATE,val);
}

BOOL PTrace(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_PARSE_TRACE,val);
}

BOOL OTrace(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_OPT_TRACE,val);
}

BOOL CTrace(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_COMPILE_TRACE,val);
}

BOOL LTrace(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_LEX_TRACE,val);
}

BOOL Echo(BOOL val) {
  return AssignBit(&Fs->last_lex->flags,LFf_ECHO,val);
}

BOOL Silent(BOOL val) {
  return AssignBit(&Fs->crt_flags,CRTf_SILENT,val);
}

BOOL Preempt(BOOL val) {
  return AssignBit(&sys_flags,SYSf_PREEMPTIVE,val);
}

SysHashEntry *FindSysHash(char *st,DWORD mask)
{
  return FindHashEntry(st,sys_hash_table,mask);
}

SysHashEntry *FindLocalHash(char *st,DWORD mask)
{
  return FindHashEntry(st,Fs->hash_table,mask);
}

void Beeps(DWORD j,BOOL busy)
{
  DWORD i,f;
  for (i=0;i<8;i++) {
    if (Bt(&j,i+24)) {
      f=200;
      if (Bt(&j,i+8))
	f+=400;
      if (Bt(&j,i+16))
	f+=800;
      Sound(f);
      if (busy) {
	if (Bt(&j,i))
	  BusyWait(300000);
	else
	  BusyWait(100000);
      } else {
	if (Bt(&j,i))
	  Sleep(400);
	else
	  Sleep(150);
      }
      Sound(0);
    }
    if (busy)
      BusyWait(150000);
    else
      Sleep(300);
  }
}

void UnrecoverableSysError(DWORD j)
{
  Cli;
  while (TRUE) {
    Beeps(j,TRUE);
    BusyWait(500000);
  }
}


int Abs(int i)
{
  if (i<0)
    return -i;
  else
    return i;
}

int Sign(int i)
{
  if (i<0)
    return -1;
  else if (!i)
    return 0;
  else
    return 1;
}

void SysTry(DWORD *start_label,DWORD *skip_label,DWORD my_ebp,DWORD my_esp)
{
  TrapStruct *tempt=MAlloc(sizeof(TrapStruct));
  tempt->handler_start=start_label;
  tempt->handler_skip=skip_label;
  tempt->esp=my_esp+4;
  tempt->ebp=my_ebp;
  InsQue(tempt,Fs->last_trap);
}

void SysCatch()
{
  TrapStruct *tempt=Fs->last_trap;
  RemQue(tempt);
  Free(tempt);
}

void throw(...)
{
  TrapStruct *tempt=Fs->last_trap;

  Fs->trap_argc=argc;
  Fs->trap_argv=argv;
  Fs->trap_ebp=GetBasePtr;
  Fs->take_trap=FALSE;
  while (tempt!=&Fs->next_trap) {
    TestTrap;
    if (Fs->take_trap)
      TakeTrap;
    SetBasePtr(Fs->trap_ebp);
    RemQue(tempt);
    Free(tempt);
    tempt=Fs->last_trap;
  }
  PutSysText("ST_UNHANDLED_EXCEPTION");
  while (TRUE)
    SwapInNext;
}

asm {CP_BREAK::}
void Break()
{
  ReleaseTaskPartitions;
  throw(TRP_BREAK);
}

SysHashEntry *FindPSect(DWORD add,int *offset)
{
  SysHashEntry *result=NULL,*temph;
  SysHashTable *h=Fs->hash_table;
  ClassStruct *tempc;
  DWORD i,best=0x8000,j;

  while (h) {
    for (i=0;i<=h->mask;i++) {
      temph=h->body[i];
      while (temph) {
	if (temph->type&HTT_FUNCTION) {
	  tempc=temph;
	  j=tempc->executable_address;
	} else
	  j=temph->user0;
	j=add-j;
	if (temph->type&(HTT_SYS_SYMBOL|HTT_FUNCTION)) {
	  if (j<best) {
	    best=j;
	    result=temph;
	  }
	}
	temph=temph->next;
      }
    }
    h=h->next;
  }
  *offset=best;
  return result;
}


DWORD GetS(char *buf,DWORD size)
{
  char ch;
  DWORD i=0;
  while (TRUE) {
    ch=GetKey;
    if (ch==CH_CR) {
      PutChar(ch);
      break;
    } if (ch==CH_BACKSPACE) {
      if (i>0) {
	i--;
	PutChar(ch);
      }
    } else {
      if (i<size-1) {
	buf[i++]=ch;
	PutChar(ch);
      }
    }
  }
  buf[i]=0;
  return i;
}



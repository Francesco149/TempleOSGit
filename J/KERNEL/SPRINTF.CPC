void OutChar(char **addr_dst,char ch,char **addr_buf)
{
  int i;
  char *dst=*addr_dst,*buf;
  if (addr_buf) {
    buf=*addr_buf;
    i=dst-buf;
    if (i>=MSize(buf)) {
      buf=MAlloc(i*2+1);
      MemCpy(buf,*addr_buf,i);
      dst=buf+i;
      *addr_buf=buf;
    }
  }
  *dst++=ch;
  *addr_dst=dst;
}

void OutString(char *ptr,char **addr_buf,char *addr_dst,
     int len,BOOL left_justify,BOOL truncate)
{
  int i,j;
  i=StrLen(ptr);
  if (truncate && i>len)
    i=len;
  if (left_justify) {
    for (j=0;j<i;j++)
      OutChar(addr_dst,*(ptr++),addr_buf);
    for (j=0;j<len-i;j++)
      OutChar(addr_dst,32,addr_buf);
  } else {
    for (j=0;j<len-i;j++)
      OutChar(addr_dst,32,addr_buf);
    for (j=len-i;j<len;j++)
      OutChar(addr_dst,*(ptr++),addr_buf);
  }
}

char *MSPrintFPSect(DWORD add,DWORD field_length)
{
  DWORD offset;
  SysHashEntry *temph;
  if (temph=FindPSect(add,&offset)) {
    if (offset<=0xFFFF) {
      if (field_length>5)
	return MSPrintF("%*ts,%04X",field_length-5,temph->string,offset);
      else
	return MSPrintF("%s,%04X",temph->string,offset);
    }
  }
  if (field_length)
    return MSPrintF("%*tX",field_length,add);
  else
    return MSPrintF("%X",add);
}

char *MSPrintFTime(DWORD jd,DWORD sub_format)
{
  JDateStruct d;
  ToJDateStruct(&d,jd);
  if (sub_format==1)
    return MSPrintF("%02d:%02d",d.hours,d.minutes);
  else if (sub_format==2)
    return MSPrintF("%02d:%02d",d.hours+24*(jd>>16),d.minutes);
  else
    return MSPrintF("%02d:%02d:%02d",d.hours,d.minutes,d.seconds);
}

char *MSPrintFDate(WORD jd,DWORD sub_format)
{
  JDateStruct d;
  ToJDateStruct(&d,jd<<16);
  if (sub_format==1)
    return MSPrintF("%02d/%02d",d.month,d.day_of_month);
  else if (sub_format==2)
    return MSPrintF("%3tZ %02d/%02d",d.day_of_week,"ST_DAYS_OF_WEEK",
      d.month,d.day_of_month);
  else
    return MSPrintF("%02d/%02d/%02d",d.month,d.day_of_month,d.year%100);
}

char *SPrintFJoin(char *dst,char *src,int argc,int *argv)
{
  char temp_buf[36],*ptr,**addr_buf,*buf=NULL,*addr_dst,
       *temp1;
  BOOL pad_zero,left_justify,truncate,neg;
  int  cur_param=0,i,k,len,sub_format;
  DWORD D,ch;
  argc; //ref so no warning
  if (dst) {
    addr_buf=NULL;
  } else {
    buf=MAlloc(256);
    addr_buf=&buf;
    dst=buf;
  }
  addr_dst=&dst;

  while (ch = *(src++)) {
    if (ch=='%') {
      if (*src=='-') {
	left_justify=TRUE;
	src++;
      } else
	left_justify=FALSE;
      if (*src=='0') {
	pad_zero=TRUE;
	src++;
      } else
	pad_zero=FALSE;
      len=0;
      while (*src>='0' && *src<='9')
	len=len*10+ *(src++)-'0';
      if (*src=='*') {
	src++;
	len=argv[cur_param++];
      }
      if (*src=='t') {
	src++;
	truncate=TRUE;
      } else
	truncate=FALSE;

      sub_format=0;
      if (*src=='h') {
	src++;
	while (*src>='0' && *src<='9')
	  sub_format=sub_format*10+ *(src++)-'0';
	if (*src=='*') {
	  src++;
	  sub_format=argv[cur_param++];
	}
      }
      if (*src=='s') {
	src++;
	ptr=argv[cur_param++];
	OutString(ptr,addr_buf,addr_dst,len,left_justify,truncate);
      } else if (*src=='S') {
	src++;
	ptr=SysText(argv[cur_param++]);
	OutString(ptr,addr_buf,addr_dst,len,left_justify,truncate);
      } else if (*src=='Q') {
	src++;
	ptr=argv[cur_param++];
	while (ch=*ptr++) {
	  if (ch=='$') {
	    OutChar(addr_dst,ch,addr_buf);
	    OutChar(addr_dst,ch,addr_buf);
	  } else if (ch==CH_LINE_FEED){
	    OutChar(addr_dst,'\\',addr_buf);
	    OutChar(addr_dst,'n',addr_buf);
	  } else if (ch==CH_CR){
	    OutChar(addr_dst,'\\',addr_buf);
	    OutChar(addr_dst,'r',addr_buf);
	  } else if (ch==CH_TAB){
	    OutChar(addr_dst,'\\',addr_buf);
	    OutChar(addr_dst,'t',addr_buf);
	  } else {
	    if (ch=='"' || ch=='\\')
	      OutChar(addr_dst,'\\',addr_buf);
	    OutChar(addr_dst,ch,addr_buf);
	  }
	}
      } else if (*src=='z') {
	src++;
	ptr=PointAtListEntry(argv[cur_param],argv[cur_param+1]);
	cur_param=cur_param+2;
	OutString(ptr,addr_buf,addr_dst,len,left_justify,truncate);
      } else if (*src=='Z') {
	src++;
	ptr=SysTextSub(argv[cur_param],argv[cur_param+1]);
	cur_param=cur_param+2;
	OutString(ptr,addr_buf,addr_dst,len,left_justify,truncate);
      } else if (*src=='c') {
	src++;
	OutChar(addr_dst,argv[cur_param++],addr_buf);
      } else if (*src=='D') {
	src++;
	temp1=MSPrintFDate(argv[cur_param++],sub_format);
	OutString(temp1,addr_buf,addr_dst,len,left_justify,truncate);
	Free(temp1);
      } else if (*src=='T') {
	src++;
	temp1=MSPrintFTime(argv[cur_param++],sub_format);
	OutString(temp1,addr_buf,addr_dst,len,left_justify,truncate);
	Free(temp1);
      } else if (*src=='P') {
	src++;
	if (truncate)
	  temp1=MSPrintFPSect(argv[cur_param++],len);
	else
	  temp1=MSPrintFPSect(argv[cur_param++],0);
	OutString(temp1,addr_buf,addr_dst,len,left_justify,truncate);
	Free(temp1);
      } else {
	neg=FALSE;
	D=argv[cur_param++];
	i=D;
	k=0;
	if (*src=='d') {
	  src++;
	  if (i<0) {
	    neg=TRUE;
	    i=-i;
	  }
	  while (k==0|| i) {
	    temp_buf[k++]=(i % 10)+'0';
	    i=i/10;
	  }
	} else if (*src=='u') {
	  src++;
	  while (k==0|| D) {
	    temp_buf[k++]=(D % 10)+'0';
	    D=D/10;
	  }
	} else if (*src=='X') {
	  src++;
	  while (k==0 || D) {
	    temp_buf[k]=(D & 15)+'0';
	    if (temp_buf[k]>'9') temp_buf[k]=temp_buf[k]+'A'-0x3A;
	    k++;
	    D>>=4;
	  }
	} else if (*src=='x') {
	  src++;
	  while (k==0 || D) {
	    temp_buf[k]=(D & 15)+'0';
	    if (temp_buf[k]>'9') temp_buf[k]=temp_buf[k]+'a'-0x3A;
	    k++;
	    D>>=4;
	  }
	} else if (*src=='b') {
	  src++;
	  while (k==0 || D) {
	    temp_buf[k++]=(D&1)+'0';
	    D>>=1;
	  }
	} else if (*(src++)=='%') {
	  temp_buf[k++]='%';
	  len=1;
	  cur_param--;
	}
	i=(neg)? 1:0;
	if (truncate && k+i>len)
	  k=len-i;
	if (pad_zero)
	  for (;i<len-k;i++)
	    OutChar(addr_dst,'0',addr_buf);
	else
	  for (;i<len-k;i++)
	    OutChar(addr_dst,32,addr_buf);
	if (neg)
	  OutChar(addr_dst,'-',addr_buf);
	for (i=k-1;i>=0;i--)
	  OutChar(addr_dst,temp_buf[i],addr_buf);
      }
    } else
      OutChar(addr_dst,ch,addr_buf);
  }
  OutChar(addr_dst,0,addr_buf);
  return buf;
}



void SPrintF(char *dst,char *src,...)
{
  SPrintFJoin(dst,src,argc,argv);
}

void PrintF(char *src,...)
{
  char *buf=SPrintFJoin(NULL,src,argc,argv);
  PutS(buf);
  Free(buf);
}

char *MSPrintF(char *src,...)
{
  char *result,*buf=SPrintFJoin(NULL,src,argc,argv);
  result=NewString(buf);
  Free(buf);
  return result;
}

void AutoPrintF(char *src,...)
{
  char *buf=SPrintFJoin(NULL,src,argc,argv);
  Auto(buf);
  Free(buf);
}

void RootPrintF(char *src,...)
{
  char *buf=SPrintFJoin(NULL,src,argc,argv);
  Root(buf);
  Free(buf);
}

void GetF(char *src,char *fmt,...)
//Pass pointer to data,
//For %s pass pointer to pointer (be careful because address
//  of array is the same as array--create ptr to array and take address
{
  char ch,*buf,*ptr,**pptr;
  BOOL left_justify=FALSE;
  int  cur_param=0,i,j,k,len,*i_ptr,sub_format=0;
  argc; //ref so no warning
  while (ch = *(fmt++)) {
    if (ch=='%') {
      if (*fmt=='%') {
	src++;
	fmt++;
      } else {
	if (*fmt=='-') {
	  left_justify=TRUE;
	  fmt++;
	} else
	  left_justify=FALSE;
	len=0;
	while (*fmt>='0' && *fmt<='9')
	  len=len*10+ (*(fmt++)-'0');
	if (*fmt=='*') {
	  fmt++;
	  len=argv[cur_param++];
	}
	ch=*(fmt++);
	if (ch && !len) {
	  ptr=src;
	  while (*ptr && *ptr!=*fmt)
	    ptr++;
	  len=ptr-src;
	}
	buf=MAlloc(len+1);
	for (i=0;i<len;i++)
	  buf[i]=*(src++);
	buf[i]=0;
	if (ch=='s') {
	  pptr=argv[cur_param++];
	  StrCpy(*pptr,buf);
	} else if (ch=='c') {
	  ptr=argv[cur_param++];
	  *ptr=*buf;
	} else if (ch=='z') {
	  i_ptr=argv[cur_param++];
	  *i_ptr=MatchListEntry(buf,argv[cur_param++]);
	} else if (ch=='Z') {
	  i_ptr=argv[cur_param++];
	  *i_ptr=MatchSysTextEntry(buf,argv[cur_param++]);
	} else {
	  i_ptr=argv[cur_param++];
	  *i_ptr=0;
	  if (ch=='d') {
	    for (k=0;k<len;k++)
	      if (buf[k]!=32)
		*i_ptr=*i_ptr*10+(buf[k]-'0');
	  } else if (ToUpper(ch)=='X') {
	    for (k=0;k<len;k++)
	      if (buf[k]!=32) {
		j=ToUpper(buf[k])-'0';
		if (j>9)  j=j-'A'+('9'+1);
		*i_ptr=*i_ptr*16+j;
	      }
	  } else if (ToUpper(ch)=='B') {
	    for (k=0;k<len;k++)
	      if (buf[k]!=32)
		*i_ptr=*i_ptr*2+(buf[k]-'0');
	  }
	}
	Free(buf);
      }
    } else
      src++;
  }
}


void GetFFlags(FlagsStruct *f,char *systext_list,char *st)
{
  char *st2=MAlloc(StrLen(st)+1),*ptr,*list;
  int i;
  f->on0=0;
  f->on1=0;
  f->off0=0xFFFFFFFF;
  f->off1=0xFFFFFFFF;
  list=SysText(systext_list);
  while (*st) {
    while (*st && *st!='+' && *st!='-')
      st++;
    if (*st=='+') {
      st++;
      if (*st) {
	ptr=st2;
	while (*st && *st!='+' && *st!='-' && *st!=32)
	  *ptr++=*st++;
	*ptr=0;
	i=MatchListEntry(st2,list);
	if (i>=0)
	  Bts(&f->on0,i);
      }
    } else if (*st=='-') {
      st++;
      if (*st) {
	ptr=st2;
	while (*st && *st!='+' && *st!='-' && *st!=32)
	  *ptr++=*st++;
	*ptr=0;
	i=MatchListEntry(st2,list);
	if (i>=0)
	  Btr(&f->off0,i);
      }
    }
  }
}

char *SPrintFFlags(char *dst,char *systext_list,DWORD flags0,DWORD flags1=0)
{
  int i;
  char *list;
  *dst=0;
  list=SysText(systext_list);
  for (i=0;i<=31;i++)
    if (Bt(&flags0,i)) {
      StrCat(dst,"+");
      StrCat(dst,PointAtListEntry(i,list));
    }
  for (i=0;i<=31;i++)
    if (Bt(&flags1,i)) {
      StrCat(dst,"+");
      StrCat(dst,PointAtListEntry(i+32,list));
    }
  return dst;
}

void D(BYTE *buf,DWORD cnt=0x80,BOOL show_offset=TRUE)
{  //default is show offset not memory address
  DWORD i,j,ch;
  BYTE	*b=buf;
  while (cnt) {
    if (show_offset)
      cout b-buf," ";
    else
      cout b," ";
    j=(cnt>16) ? 16:cnt;
    for (i=0;i<j;i++)
      PrintF("%02X ",b[i]);
    for (;i<16;i++)
      PrintF("	 ");
    for (i=0;i<j;i++) {
      ch=b[i];
      if (ch<32 || ch>0x7E) ch='.';
      PutChar(ch);
      if (ch=='$')
	PutChar(ch);
    }
    CrLf;
    cnt-=j;
    b+=j;
  }
}

void Dm(BYTE *buf,DWORD cnt=0x80)
{  //Show memory address, not offset
  D(buf,cnt,FALSE);
}

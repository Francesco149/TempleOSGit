MSG_GETCHAR:		DB "GetChar",0;
MSG_WINDOW_TO_TOP:	DB "WindowToTop",0;
MSG_PEEK_MESSAGE:	DB "PeekMessage",0;
MSG_GET_MESSAGE:	DB "GetMessage",0;
MSG_GET_MESSAGE_NO_WAIT: DB "GetMessageNoWait",0;
MSG_GET_CHAR_NO_ECHO:	DB "GetCharNoEcho",0;

////**************************PROCEDURE*************************
// IN:	 [ESI]
// OUT:  EAX=CNT
	ALIGN	4,0x90
STRLEN::
	PUSH	ESI	//-****
@@1:	LODSB
	OR	AL,AL
	JNZ	@@1
	MOV	EAX,ESI
	POP	ESI	//+****
	SUB	EAX,ESI
	DEC	EAX
	RET

////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_STRCAT::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM1[EBP]
@@2:	LODSB
	OR	AL,AL
	JNZ	@@2
	MOV	EDI,ESI
	DEC	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
@@1:	LODSB
	STOSB
	OR	AL,AL
	JNZ	@@1
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_STRCPY::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
	MOV	EDI,DWORD SF_PARAM1[EBP]
@@1:	LODSB
	STOSB
	OR	AL,AL
	JNZ	@@1
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_STRCMP::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
	MOV	EDI,DWORD SF_PARAM1[EBP]
@@1:	LODSB
	OR	AL,AL
	JZ	@@100
	SCASB
	JE	@@1
	JA	@@90
@@80:	MOV	EAX,1
	JMP	@@101
@@90:	MOV	EAX,-1
	JMP	@@101
@@100:	SCASB
	JNE	@@80
	XOR	EAX,EAX
@@101:	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_STRSTR::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	PUSH	ECX
	MOV	ESI,DWORD SF_PARAM1[EBP]
	MOV	EDI,DWORD SF_PARAM2[EBP]
	MOV	AH,BYTE [EDI]
	OR	AH,AH
	JZ	@@90
	JMP	@@5
@@1:	INC	ESI
@@5:	LODSB
	OR	AL,AL
	JZ	@@100
	CMP	AL,AH
	JNE	@@5
	DEC	ESI
	MOV	ECX,1
@@10:	MOV	AL,BYTE [EDI+ECX]
	OR	AL,AL
	JZ	@@90
	CMP	AL,BYTE [ESI+ECX]
	JNE	@@1
	INC	ECX
	JMP	@@10

@@80:	DEC	ESI
@@90:	MOV	EAX,ESI
	JMP	@@101
@@100:	XOR	EAX,EAX
@@101:	POP	ECX
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
TO_UPPER::
	CMP	AL,'a'
	JB	@@100
	CMP	AL,'z'
	JA	@@100
	ADD	AL,'A'-'a'
@@100:	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_STRISTR::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	PUSH	EBX
	PUSH	ECX
	MOV	ESI,DWORD SF_PARAM1[EBP]
	MOV	EDI,DWORD SF_PARAM2[EBP]
	MOV	AL,BYTE [EDI]
	CALL	TO_UPPER
	MOV	AH,AL
	OR	AH,AH
	JZ	@@90
	JMP	@@5
@@1:	INC	ESI
@@5:	LODSB
	CALL	TO_UPPER
	OR	AL,AL
	JZ	@@100
	CMP	AL,AH
	JNE	@@5
	DEC	ESI
	MOV	ECX,1
@@10:	MOV	AL,BYTE [EDI+ECX]
	CALL	TO_UPPER
	OR	AL,AL
	JZ	@@90
	MOV	BL,BYTE [ESI+ECX]
	XCHG	AL,BL
	CALL	TO_UPPER
	CMP	AL,BL
	JNE	@@1
	INC	ECX
	JMP	@@10

@@80:	DEC	ESI
@@90:	MOV	EAX,ESI
	JMP	@@101
@@100:	XOR	EAX,EAX
@@101:	POP	ECX
	POP	EBX
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CP_ATOI::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	MOV	ESI,DWORD SF_PARAM1[EBP]
	XOR	EBX,EBX
	XOR	EAX,EAX
@@1:	LODSB
	SUB	AL,'0'
	CMP	AL,9
	JA	@@100
	IMUL2	EBX,10
	ADD	EBX,EAX
	JMP	@@1
@@100:	MOV	EAX,EBX
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
// IN:	 [ESI]
// OUT:  EAX
	ALIGN	4,0x90
HASH_STRING::
	PUSH	ESI	//-****
	PUSH	EBX	//-****
	PUSH	ECX	//-****
	XOR	EAX,EAX
	XOR	EBX,EBX
@@1:	LODSB
	OR	AL,AL
	JZ	@@100
	SHL	EBX,1
	ADC	EBX,EAX
	JMP	@@1

@@100:	MOV	CL,16
	MOV	EAX,EBX
	SHR	EBX,CL
	ADC	EAX,EBX
	POP	ECX	//+****
	POP	EBX	//+****
	POP	ESI	//+****
	RET
////**************************PROCEDURE*************************
// IN:	 [ESI]=STRING
//	 EBX=TYPE MASK
//	 [EDI]=TABLE
// OUT:  [ESI]=ENTRY OR ZERO NOT FOUND
//	 ZERO FLAG SET NOT FOUND
//	 EAX=INDEX
	ALIGN	4,0x90
FIND_HASH_ENTRY::
	PUSH	EDX	//-****
	PUSH	EDI	//-****
	MOV	EDX,ESI
	CALL	HASH_STRING
@@4:	PUSH	EAX	//-****
	AND	EAX,DWORD HT_MASK[EDI]
	LEA	ESI,DWORD HT_BODY[EDI]
	MOV	ESI,DWORD[ESI+EAX*4]
@@1:	OR	ESI,ESI
	JNZ	@@3
	MOV	EDI,DWORD HT_NEXT[EDI]
	OR	EDI,EDI
	JZ	@@100
	POP	EAX
	JMP	@@4

@@3:	MOV	EAX,DWORD HTE_TYPE[ESI]
	AND	EAX,EBX
	JE	@@90
	PUSH	ESI	//-****
	PUSH	EDI	//-****
	MOV	EDI,DWORD HTE_STRING[ESI]
	MOV	ESI,EDX
@@2:	LODSB
	MOV	AH,BYTE [EDI]
	INC	EDI
	CMP	AL,AH
	JNE	@@80
	OR	AL,AL
	JNZ	@@2
	POP	EDI	//+****
	POP	ESI	//+****
	INC	DWORD HTE_USE_CNT[ESI]
	JMP	@@100

@@80:	POP	EDI	//+****
	POP	ESI	//+****

@@90:	MOV	ESI,DWORD HTE_NEXT[ESI]
	JMP	@@1

@@100:	POP	EAX	//+****
	AND	EAX,DWORD HT_MASK[EDI]
	POP	EDI	//+****
	POP	EDX	//+****
	OR	ESI,ESI
	RET
////**************************PROCEDURE*************************
// IN:	 ES:[ESI]=STRING
//	 [EDI]=TABLE
// OUT:  [ESI]=BUCKET
	ALIGN	4,0x90
FIND_HASH_BUCKET::
	PUSH	EAX
	CALL	HASH_STRING
	AND	EAX,DWORD HT_MASK[EDI]
	LEA	ESI,DWORD HT_BODY[EDI+EAX*4]
	POP	EAX
	RET
////**************************PROCEDURE*************************
FIND_EXTERN::
//IN:	ESI
//OUT:	ESI
	PUSH	EAX
	PUSH	EDI
	PUSH	EBX
	MOV	EDI,DWORD FS:[TSS_HASH_TABLE]
	MOV	EBX,HTT_ALL
	CALL	FIND_HASH_ENTRY
	JNZ	@@1
	XOR	ESI,ESI
	JMP	@@3
@@1:	MOV	EAX,DWORD HTE_USER0[ESI]
	TEST	DWORD HTE_TYPE[ESI],HTT_FUNCTION
	JZ	@@2
	MOV	EAX,DWORD C_STATEMENTS[ESI]
@@2:	MOV	ESI,EAX
@@3:	POP	EBX
	POP	EDI
	POP	EAX
	OR	ESI,ESI
	RET
CP_FIND_EXTERN::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	EDI,DWORD FS:[TSS_HASH_TABLE]
	MOV	ESI,DWORD SF_PARAM1[EBP]
	MOV	EBX,HTT_ALL
	CALL	FIND_HASH_ENTRY
	JZ	@@1
	MOV	EAX,DWORD HTE_USER0[ESI]
	TEST	DWORD HTE_TYPE[ESI],HTT_FUNCTION
	JZ	@@2
	MOV	EAX,DWORD C_STATEMENTS[ESI]
	JMP	@@2
@@1:	XOR	EAX,EAX
@@2:	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CRLF::
	PUSH	EAX
	MOV	EAX,13
	INT	I_PUT_CHAR
	MOV	EAX,10
	INT	I_PUT_CHAR
	POP	EAX
	RET

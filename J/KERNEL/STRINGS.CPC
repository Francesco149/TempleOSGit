char ToUpper(char ch)
{
  if (ch>='a' && ch<='z')
    return ch+'A'-'a';
  else
    return ch;
}

BOOL YorN()
{
  char ch;
  cout "(y or n)? ";
  while (TRUE) {
    ch=ToUpper(GetKey);
    if (ch=='Y') {
      coutln "YES";
      return TRUE;
    } else if (ch=='N') {
      coutln "NO";
      return FALSE;
    }
  }
}

char *PointAtListEntry(int entry_number, char *lst)
{
  while (*lst && entry_number) {
    while (*lst)  /* Advance to end of cur entry. */
      lst++;
    lst++;    /* Skip trailing zero */
    entry_number--;
    if (*lst=='@') { /* Check for '@' alias list entry*/
      entry_number++;
      lst++;
    }
  }
  return lst;
}

int MatchListEntry(char *src, char *lst,int flags=0,int *ambiguity_overkill_ptr=NULL)
/* RETURNS: -2 if Ambiguous, -1 if not found, else entry_number */
{
  int l,entry_num=0,result=-1,unutilized_src;
  char *s;
  BOOL exact_match=FALSE;

  l=StrLen(src);
  if (ambiguity_overkill_ptr)
    *ambiguity_overkill_ptr=l;
  while (*lst) {
    if (*lst=='@') { /* Check for '@' alias list entry*/
      entry_num--;
      lst++;
    }

    s=src;
    if (flags & MLE_IGNORE_CASE)
      while (*s && (ToUpper(*s) == ToUpper(*lst))) {
	s++;
	lst++;
      }
    else
      while (*s && (*s == *lst)) {
	s++;
	lst++;
      }
    unutilized_src=l-(s-src);
    if (!(*s)) {    /* Did we reach end of sourcecout */
      if (!(*lst)) {  /* Did we reach end of list entrycout */
	if (!ambiguity_overkill_ptr)
	  return entry_num;  /* Found Exact match */
	result=entry_num;
	exact_match=TRUE;
      } else {
	if (result!=-1) {
	  if (ambiguity_overkill_ptr)
	    *ambiguity_overkill_ptr=0;
	  if (!exact_match)
	    result=-2; /* AMBIGUOUS RESPONSE unless later exact match*/
	} else {
	  if (!(flags & MLE_EXACT))
	    result=entry_num;
	}
      }
    } else {
      if (ambiguity_overkill_ptr && *ambiguity_overkill_ptr>(unutilized_src-1))
	*ambiguity_overkill_ptr=unutilized_src-1;
    }

    while (*lst)  /* Advance to end of cur entry. */
      lst++;
    lst++;    /* Skip trailing zero */
    entry_num++;
  }
  if (ambiguity_overkill_ptr && result==-1)
    *ambiguity_overkill_ptr=0;
  return result;
}

void UndefinedSysText(char *name)
{
  PutSysText("ST_UNDEFINED_SYSTEXT");
  PutS(name);
  throw(TRP_UNDEF_SYSTEXT,name);
}


char *SysText(char *name)
{
  SysHashEntry *temph=FindLocalHash(name,HTT_SYSTEXT);
  if (temph)
    return temph->user0;
  else
    UndefinedSysText(name);
}

char *SysTextSub(DWORD sub,char *name)
{
  SysHashEntry *temph=FindLocalHash(name,HTT_SYSTEXT);
  if (temph)
    return PointAtListEntry(sub,temph->user0);
  else
    UndefinedSysText(name);
}

int SysTextSubCount(char *name)
{
  SysHashEntry *temph=FindLocalHash(name,HTT_SYSTEXT);
  if (temph)
    return temph->user1;
  else
    UndefinedSysText(name);
}

int MatchSysTextEntry(char *src, char *lst_name,
  int flags=0,int *ambiguity_overkill_ptr=NULL)
{
  return MatchListEntry(src,SysText(lst_name),
    flags,ambiguity_overkill_ptr);
}

asm {CP_PUT_SYSTEXT:}
void PutSysText(char *name)
{
  PutS(SysText(name));
}


SysHashEntry *LoadStr(char *name, char *st)
{
  SysHashEntry *temph,
    *temph1=FindHashBucket(name,Fs->hash_table);
  temph=MAllocZ(sizeof(SysHashEntry));
  temph->next=*temph1;
  *temph1=temph;
  temph->type=HTT_SYSTEXT;
  temph->string=NewString(name);
  temph->user0=NewString(st);
  temph->user1=0xFFFFFFFF;
  return temph;
}

SysHashEntry *LoadList(char *name, char *st)
{
  DWORD cnt=0;
  char *ptr;
  SysHashEntry *temph,
    *temph1=FindHashBucket(name,Fs->hash_table);
  temph=MAllocZ(sizeof(SysHashEntry));
  temph->next=*temph1;
  *temph1=temph;
  temph->type=HTT_SYSTEXT;
  temph->string=NewString(name);
  ptr=st;
  while (*ptr) {
    while (*ptr++);
    cnt++;
  }
  temph->user0=MAlloc(ptr+1-st);
  MemCpy(temph->user0,st,ptr+1-st);
  temph->user1=cnt;
  return temph;
}

int Occurrences(char *src, char ch)
{
  int i=0;
  while (*src)
    if (*src++ == ch) i++;
  return i;
}

int SpacesToTabs(char *dst2,char *src)
{
  char *src2,*dst=dst2;
  int i,changed=0,space_cnt,space_cnt2,col=0;
  while (*src) {
    src2=src;
    space_cnt=0;
    while (*src2==0x20) {
      space_cnt++;
      src2++;
    }
    if (space_cnt<2) {
      if (*src==CH_TAB)
	col=0;
      else {
	col++;
	if (col==8)
	  col=0;
      }
      *(dst++)=*(src++);
    } else {
      while (col+space_cnt>=8) {
	space_cnt2=8-col;
	if (space_cnt2==1)
	  *(dst++)=0x20;
	else {
	  *(dst++)=CH_TAB;
	  changed=changed+(space_cnt2-1);
	}
	space_cnt=space_cnt-space_cnt2;
	col=0;
      }
      for (i=0;i<space_cnt;i++) {
	*(dst++)=0x20;
	col++;
      }
      src=src2;
    }
  }
  *(dst--)=0;
  return changed;
}

char *TabsToSpaces(char *src)
{
  int i,j,l=StrLen(src)*2+2,col=0;
  char ch,*dst=MAlloc(l),*temp;
  while (ch=*src++) {
    if (ch==CH_TAB) {
      j=(col+8) & 0xFFFFFFF8;
      for (i=col;i<j;i++) {
	dst[i]=0x20;
	if (i>=l-2) {
	  temp=MAlloc(l*2);
	  MemCpy(temp,dst,i+1);
	  Free(dst);
	  l=l*2;
	  dst=temp;
	}
      }
      col=j;
    } else {
      dst[col]=ch;
      if (col>=l-2) {
	temp=MAlloc(l*2);
	MemCpy(temp,dst,col+1);
	Free(dst);
	l*=2;
	dst=temp;
      }
      col++;
    }
  }
  dst[col]=0;
  return dst;
}

char *StringUtil(char *u, int mask)
{
  char *src,*dst;
  char ch;

  src=u;
  if (mask & SU_REMOVE_LEADING)
    while ((*src==32) || (*src==CH_TAB))
      src++;

  dst=u;
  while (ch=*src++) {
    if ((ch==32) || (ch==CH_TAB)) {
      if (!(mask & SU_REMOVE_SPACES)) {
	if (mask & SU_SINGLE_SPACE) {
	  (*dst++) = 32;
	  while ((ch= *src++) && ((ch==32) || (ch==CH_TAB)) );
	    src--;
	} else
	  (*dst++) = ch;
      }
    } else {
      if ((!(mask & SU_REMOVE_CTRL_CHARS)) || (ch>=32))
	(*dst++)=ch;
    }
  }
  *dst=0;

  if (mask & SU_CAP_UNDERSCORES) {
    src=u;
    dst=u;
    while (*src) {
      *dst++=ToUpper(*src++);
      while (*src && *src!='_')
	*dst++=*src++;
      if (*src=='_')
	src++;
    }
    *dst=0;
  }

  if (mask & SU_REMOVE_TRAILING)
    while ( (dst != u) && (!(*dst) || (*dst==32) || (*dst==CH_TAB)))
      (*dst--)=0;
  if (mask & SU_DISCARD_PARITY)
    for (dst=u;*dst;dst++) {
      ch=*dst;
      *dst=ch & 127;
    }
  if (mask & SU_TO_UPPER)
    for (dst=u;*dst;dst++) {
      ch=*dst;
      if ((ch>=0x61) && (ch<=0x7A))
	*dst = ch-0x20;
    }
  if (mask & SU_TO_LOWER)
    for (dst=u;*dst;dst++) {
      ch=*dst;
      if ((ch>=0x41) && (ch<=0x5A))
	*dst = ch+0x20;
    }
  if (mask & SU_S2T)
    SpacesToTabs(u,u);
  return u;
}

char *MStringUtil(char *src,DWORD flags)
{
  char *dst=NewString(src),*dst2,*temp;
  StringUtil(dst,flags);
  if (flags & SU_T2S) {
    temp=TabsToSpaces(dst);
    Free(dst);
    dst=temp;
  }
  dst2=NewString(dst); //Shorten
  Free(dst);
  return dst2;
}

char *RemoveFirstSeg(char *src, char *marker, char *dst)
{
  char *temp,*temp1,ch;

  temp = src;
  temp1= dst;
  while ( (ch= *src++) && !Occurrences(marker,ch) )
    *dst++=ch;

  *dst = 0;
  if (ch)
    StrCpy(temp,src);
  else
    *temp=0;
  return temp1;
}


char *RemoveLastSeg(char *src, char *marker, char *dst)
{
  char *temp;

  temp=src+StrLen(src);
  while (temp>src && !Occurrences(marker,*temp))
    temp--;
  if (Occurrences(marker,*temp)) {
    StrCpy(dst,temp+1);
    *temp=0;
  } else {
    StrCpy(dst,src);
    *src=0;
  }
  return dst;
}

char *SearchString(char *src,char *pattern,DWORD flags=0)
{
  BOOL cont;
  BYTE *src2;
  char *saved_src=src;
  int plen=StrLen(pattern);
  do {
    cont=FALSE;
    if (flags & SS_IGNORE_CASE)
      src=StrIStr(src,pattern);
    else
      src=StrStr(src,pattern);
    if (src && (flags & SS_WHOLE_LABELS)) {
      src2=src+plen;
      if (Bt(alpha_numeric_bitmap,*src2)) {
	src++;	//TODO: Numbers could be false negative
	if (*src)
	  cont=TRUE;
	else
	  src=NULL;
      } else {
	if (src!=saved_src) {
	  src2=src-1;
	  if (Bt(alpha_numeric_bitmap,*src2)) {
	    src++;
	    if (*src)
	      cont=TRUE;
	    else
	      src=NULL;
	  }
	}
      }
    }
  } while (cont);
  return src;
}

BOOL WildCardMatch(char *wild_st,char *src_st)
{
  BYTE ch1,ch2;
  while (TRUE) {
    if ( !(ch1 = *src_st++)) {
      if (*wild_st)
	return FALSE;
      else
	return TRUE;
    } else {
      if ( !(ch2 = *wild_st++))
	return FALSE;
      else {
	if (ch2 == '*') {
	  if (!(ch2 = *wild_st++))
	    return TRUE;
	  while (ch2 != ch1)
	    if (!(ch1 = *src_st++))
	      return FALSE;
	} else
	  if (ch2!='?')
	    if (ch1!=ch2)
	      return FALSE;
      }
    }
  }
}

BOOL WildFileNameList(char *wild_st,char *src_st)
{
  BOOL result=FALSE;
  char *buf1=NewString(wild_st),
       *buf2=MAlloc(StrLen(wild_st)+1);
  while (TRUE) {
    RemoveFirstSeg(buf1,";",buf2);
    if (*buf2) {
      if (*buf2=='~') {
	if (WildCardMatch(buf2+1,src_st)) {
	  result=FALSE;
	  break;
	}
      } else {
	if (WildCardMatch(buf2,src_st))
	  result=TRUE;
      }
    } else
      break;
  }
  Free(buf1);
  Free(buf2);
  return result;
}

char *Add2String(char *base,char *addition)
{  //doubles length
  char *result;
  int blen=StrLen(base),alen=StrLen(addition);
  int bmem=MSize(base);
  if (blen+alen+1>bmem) {
    result=MAlloc(bmem*2+alen+1);
    MemCpy(result,base,blen);
    StrCpy(result+blen,addition);
    Free(base);
  } else {
    result=base;
    StrCpy(result+blen,addition);
  }
  return result;
}

void CheckJPartition(JPartition *p)
{
  if (!p || p->ch_J!='J' || p->ch_P!='P' || p->ch_E!='E')
    throw(TRP_PARTITION,9);
}

char PartitionToDrive(JPartition *p=NULL)
{
  if (!p)
    p=Fs->cur_partition;
  CheckJPartition(p);
  return p->drive;
}

JPartition *DriveToPartition(char drive=0)
{
  JPartition *p;
  if (!drive)
    p=Fs->cur_partition;
  else if (drive==':')
    p=default_partition;
  else
    p=drive_to_partition[ToUpper(drive)-'A'];
  CheckJPartition(p);
  return p;
}

void CheckJBlkDev(JBlkDev *bdev)
{
  if (!bdev || bdev->ch_J!='J' ||
       bdev->ch_B!='B' || bdev->ch_D!='D')
    throw(TRP_BLKDEV,1);
  if (!bdev->type || bdev->type>JBDT_FILE)
    throw(TRP_BLKDEV,2);
}

JBlkDev *DriveToBlkDev(char drive=0)
{
  JPartition *p=DriveToPartition(drive);
  JBlkDev *bdev=p->bdev;
  CheckJBlkDev(bdev);
  return bdev;
}

BOOL DriveIsWritable(char drive=0)
{
  JBlkDev *bdev=DriveToBlkDev(drive);
  if (bdev->flags & JBDF_READ_ONLY)
    return FALSE;
  else
    return TRUE;
}

char *AbsoluteDirName(char *name)
{
  int maxlen;
  char drive[3],*hdir,*cur_dir,*buf2,*buf3,*buf,*my_name,*temp_name;
  if (!Fs->cur_dir)
    return NewString(name);
  if (!*Fs->cur_dir)
    return NewString(name);
  my_name=MStringUtil(name,
    SU_TO_UPPER|SU_REMOVE_LEADING|SU_REMOVE_TRAILING|
    SU_DISCARD_PARITY|SU_REMOVE_CTRL_CHARS);
  temp_name=my_name;
  drive[0]=PartitionToDrive;
  drive[1]=':';
  drive[2]=0;
  if (*my_name && my_name[1]==':') {
    if (*my_name==':')
      drive[0]=default_drive;
    else
      drive[0]=*my_name;
    my_name=my_name+2;
    cur_dir=NewString("/");
  } else
    cur_dir=NewString(Fs->cur_dir);

  if (*my_name=='/') {
    Free(cur_dir);
    cur_dir=NewString("/");
    my_name++;
  }

  buf2=NewString(my_name);
  maxlen=StrLen(cur_dir)+1+StrLen(buf2)+1;
  buf3=MAlloc(maxlen);
  buf =MAlloc(maxlen);
  StrCpy(buf3,cur_dir);
  while (*buf2) {
    RemoveFirstSeg(buf2,"/",buf);
    if (!*buf)
      StrCpy(buf3,"/");
    else if (!StrCmp(buf,"..")) {
      RemoveLastSeg(buf3,"/",buf);
      if (!*buf3)
	StrCpy(buf3,"/");
    } else if (!StrCmp(buf,".")) {
      ;
    } else if (*buf) {
      if (!StrCmp(buf,"HOME")) {
	Free(buf3);
	hdir=HomeDirString;
	buf3=MAlloc(maxlen+StrLen(hdir));
	StrCpy(buf3,hdir+2);
	Free(hdir);
	drive[0]=default_drive;
      } else {
	if (StrCmp(buf3,"/"))
	  StrCat(buf3,"/");
	StrCat(buf3,buf);
      }
    }
  }
  Free(cur_dir);
  cur_dir=MAlloc(StrLen(buf3)+3);
  StrCpy(cur_dir,drive);
  StrCpy(cur_dir+2,buf3);
  Free(buf);
  Free(buf2);
  Free(buf3);
  Free(temp_name);
  return cur_dir;
}

char *AbsoluteFileName(char *name)
{
  char *buf,*buf2,*buf3,*my_name,*temp_name,*temp_buf;
  my_name=MStringUtil(name,
    SU_TO_UPPER|SU_REMOVE_LEADING|SU_REMOVE_TRAILING|
    SU_DISCARD_PARITY|SU_REMOVE_CTRL_CHARS);
  temp_name=my_name;
  buf=NewString(my_name);
  temp_buf=buf;
  if (*buf && buf[1]==':') {
    buf+=2;
    my_name+=2;
  }
  buf2=MAlloc(StrLen(temp_name)+1);
  RemoveLastSeg(buf,"/",buf2);
  if (*my_name=='/' && !*buf)
    StrCpy(buf,"/");
  buf3=AbsoluteDirName(temp_buf);
  Free(temp_buf);
  buf=MAlloc(StrLen(buf3)+1+StrLen(buf2)+1);
  StrCpy(buf,buf3);
  if (buf[StrLen(buf)-1]!='/')
    StrCat(buf,"/");
  StrCat(buf,buf2);
  Free(buf2);
  Free(buf3);
  Free(temp_name);
  return buf;
}

char *ChangeExtension(char *name,char *extension)
{
  char *buf=MAlloc(StrLen(name)+1),
       *result=MAlloc(StrLen(name)+1+StrLen(extension)+1);
  StrCpy(result,name);
  if (Occurrences(name,'.'))
    RemoveLastSeg(result,".",buf);
  StrCat(result,".");
  StrCat(result,extension);
  Free(buf);
  return result;
}

char *DefaultExtension(char *name,char *extension)
{
  char *result=MAlloc(StrLen(name)+1+StrLen(extension)+1);
  StrCpy(result,name);
  if (!Occurrences(name,'.')) {
    StrCat(result,".");
    StrCat(result,extension);
  }
  return result;
}

DWORD FileAttr(char *name,DWORD attr=0)
{
  char *ptr=name,ch=0;
  while (*ptr && *ptr!='.')
    ptr++;
  if (*ptr=='.')
    ch=ToUpper(ptr[StrLen(ptr)-1]);
  if (ch=='Z')
    attr=attr | J_ATTR_COMPRESSED;
  else
    attr=attr & ~J_ATTR_COMPRESSED;
  if (ch=='Y')
    attr=attr | J_ATTR_ENCRYPTED |J_ATTR_COMPRESSED;
  else
    attr=attr & ~J_ATTR_ENCRYPTED;
  if (ch=='C')
    attr=attr | J_ATTR_CONTIGUOUS;
  else
    attr=attr & ~J_ATTR_CONTIGUOUS;
  return attr;
}

BOOL CheckFileName(char *name)
{
  char *ptr=name,ch;
  int i=-1,j;
  if (!*ptr) return FALSE;
  if (*ptr=='.') {
    if (!ptr[1]) return TRUE;
    if (ptr[1]=='.' && !ptr[2]) return TRUE;
  }
  if (Occurrences(name,'.')>1) return FALSE;
  while (ch=*ptr++) {
    if (ch=='.')
      i=ptr-1-name;
    else if (!Bt(filename_chars_bitmap,ch))
      return FALSE;
  }
  j=StrLen(name);
  if (i<0) {
    if (j>8) return FALSE;
  } else {
    if (i>8 || j-i>4)
      return FALSE;
  }
  return TRUE;
}


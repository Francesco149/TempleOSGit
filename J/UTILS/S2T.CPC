//[::/J/KERNEL/STRINGS.CPZ,268] StringUtil() operations on files

public void SUFile(char *name,DWORD su_flags)
{
  char *dst;
  BOOL changed=FALSE;
  int reduced=0;
  Ltf *l=LtfRead(name,LTFF_PLAIN_TEXT_WITH_TABS | LTFF_NO_CURSOR);
  LtfEntry *cl;
  cl=l->dummy.next;
  while (cl!=l) {
    if (cl->btype==LTFT_TEXT) {
      dst=MStringUtil(cl->display,su_flags);
      if (StrCmp(dst,cl->display)) {
	reduced=reduced+StrLen(cl->display)-StrLen(dst);
	changed=TRUE;
	Free(cl->display);
	cl->display=dst;
      } else
	Free(dst);
    }
    cl=cl->next;
  }
  if (changed) {
    PrintF("Reduced %s by %d chars\r\n",name,reduced);
    StrCpy(l->filename.name,name);
    LtfWrite(l);
  }
  LtfDel(l);
}

void SUList(JDirEntry *tempm1,DWORD su_flags)
{
  JDirEntry *tempm2;
  while (tempm1) {
    tempm2=tempm1->next;
    if (tempm1->attr & J_ATTR_DIR) {
      if (tempm1->sub) {
	coutln SysText("ST_SCANNING_DIRECTORY"),tempm1->full_name;
	SUList(tempm1->sub,su_flags);
      }
    } else
      SUFile(tempm1->full_name,su_flags);
    DelJDirEntry(tempm1);
    tempm1=tempm2;
  }
}

//flags +r=recurse
public void SU(char *wild,DWORD su_flags,char *flags)
{
  JDirEntry *tempm1=NULL;
  FlagsStruct f;
  GetFFlags(&f,"ST_FILE_UTIL_FLAGS",flags);
  JFileAccess *fa=NewJFileAccess(wild);
  if (fa) {
    tempm1=FindFiles(fa->mask,&f.on0);
    SUList(tempm1,su_flags);
    DelJFileAccess(fa);
  }
}

//flags +r=recurse
public void S2T(char *wild,char *flags)
{
  SU(wild,SU_S2T|SU_REMOVE_TRAILING,flags);
}


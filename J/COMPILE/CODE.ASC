	ALIGN	4,0x90
FAR_AWAY:	//(FOR DUMMY DWORD JMPS)
CODE_TABLE::
	DD	ECT_NULL;
	DD	ECT_XOR;
	DD	ECT_OR_OR;
	DD	ECT_AND_AND;
	DD	ECT_LESS;
	DD	ECT_GREATER;
	DD	ECT_EQUAL_EQUAL;
	DD	ECT_NOT_EQUAL_TO;
	DD	ECT_GREATER_OR_EQUAL;
	DD	ECT_LESS_OR_EQUAL;
	DD	ECT_ADD;
	DD	ECT_SUB;
	DD	ECT_MUL;
	DD	ECT_DIV;
	DD	ECT_MOD;
	DD	ECT_UNARY_MINUS;
	DD	ECT_NOT;
	DD	ECT_INT;
	DD	ECT_DOUBLE;
	DD	ECT_LOCAL_FRAME_PTR;
	DD	ECT_DEREFERRENCE;
	DD	ECT_CALL;
	DD	ECT_RET;
	DD	ECT_INC;
	DD	ECT_DEC;
	DD	ECT_INT8;
	DD	ECT_ADD32;
	DD	ECT_SUB32;
	DD	ECT_ADD8;
	DD	ECT_SUB8;
	DD	ECT_MUL32;
	DD	ECT_DIV32;
	DD	ECT_MUL8;
	DD	ECT_DIV8;
	DD	ECT_ASSIGN32;
	DD	ECT_ASSIGN16;
	DD	ECT_ASSIGN8;
	DD	ECT_ADD_ESP;
	DD	ECT_NOP;
	DD	ECT_OR;
	DD	ECT_AND;
	DD	ECT_SHL;
	DD	ECT_SHR;
	DD	ECT_COM;
	DD	ECT_IRQ;
	DD	ECT_LABEL;
	DD	ECT_SKIPZ;
	DD	ECT_UNUSED2;
	DD	ECT_DEREFERRENCE64;
	DD	ECT_DEREFERRENCE32;
	DD	ECT_DEREFERRENCE16;
	DD	ECT_DEREFERRENCE8;
	DD	ECT_DWORD_PP;
	DD	ECT_WORD_PP;
	DD	ECT_BYTE_PP;
	DD	ECT_short_PP;
	DD	ECT_char_PP;
	DD	ECT_DWORD_MM;
	DD	ECT_WORD_MM;
	DD	ECT_BYTE_MM;
	DD	ECT_short_MM;
	DD	ECT_char_MM;
	DD	ECT_ADDRESS;
	DD	ECT_FS;
	DD	ECT_CLI;
	DD	ECT_STI;
	DD	ECT_GET_FLAGS;
	DD	ECT_SET_FLAGS;
	DD	ECT_BT;
	DD	ECT_BTS;
	DD	ECT_BTR;
	DD	ECT_INSQUE;
	DD	ECT_INSQUE_REV;
	DD	ECT_REMQUE;
	DD	ECT_INP;
	DD	ECT_OUTP;
	DD	ECT_REP_INSB;
	DD	ECT_REP_INSW;
	DD	ECT_REP_OUTSB;
	DD	ECT_REP_OUTSW;
	DD	ECT_MEMCPY;
	DD	ECT_MEMSET;
	DD	ECT_INPW;
	DD	ECT_OUTPW;
	DD	ECT_PP_DWORD;
	DD	ECT_PP_WORD;
	DD	ECT_PP_BYTE;
	DD	ECT_PP_short;
	DD	ECT_PP_char;
	DD	ECT_MM_DWORD;
	DD	ECT_MM_WORD;
	DD	ECT_MM_BYTE;
	DD	ECT_MM_short;
	DD	ECT_MM_char;
	DD	ECT_INPD;
	DD	ECT_OUTPD;
	DD	ECT_ENTER;
	DD	ECT_LEAVE;
	DD	ECT_TYPE;
	DD	ECT_DS;
	DD	ECT_ADD_ESP8;
	DD	ECT_int_DISP32;
	DD	ECT_short_DISP32;
	DD	ECT_char_DISP32;
	DD	ECT_int_DISP8;
	DD	ECT_short_DISP8;
	DD	ECT_char_DISP8;
	DD	ECT_CALL_INDIRECT;
	DD	ECT_BTC;
	DD	ECT_QUESTION;
	DD	ECT_COLON;
	DD	ECT_SKIPNZ;
	DD	ECT_STRING_CONSTANT;
	DD	ECT_CALL_INDIRECT2;
	DD	ECT_GET_STACK_PTR;
	DD	ECT_SET_STACK_PTR;
	DD	ECT_GET_LABEL;
	DD	ECT_GET_BASE_PTR;
	DD	ECT_SET_BASE_PTR;
	DD	ECT_ABSOLUTE_ADDRESS;
	DD	ECT_SWITCH;
	DD	ECT_OR_OR_SKIPZ;
	DD	ECT_OR_OR_SKIPZ2;
	DD	ECT_OR_OR_SKIPNZ;
	DD	ECT_OR_OR_SKIPNZ2;
	DD	ECT_AND_AND_SKIPZ;
	DD	ECT_AND_AND_SKIPZ2;
	DD	ECT_AND_AND_SKIPNZ;
	DD	ECT_AND_AND_SKIPNZ2;
	DD	ECT_LESS_THAN_SKIPZ;
	DD	ECT_LESS_THAN_SKIPZ2;
	DD	ECT_LESS_THAN_SKIPNZ;
	DD	ECT_LESS_THAN_SKIPNZ2;
	DD	ECT_GREATER_THAN_SKIPZ;
	DD	ECT_GREATER_THAN_SKIPZ2;
	DD	ECT_GREATER_THAN_SKIPNZ;
	DD	ECT_GREATER_THAN_SKIPNZ2;
	DD	ECT_EQUAL_EQUAL_SKIPZ;
	DD	ECT_EQUAL_EQUAL_SKIPZ2;
	DD	ECT_EQUAL_EQUAL_SKIPNZ;
	DD	ECT_EQUAL_EQUAL_SKIPNZ2;
	DD	ECT_NOT_EQUAL_TO_SKIPZ;
	DD	ECT_NOT_EQUAL_TO_SKIPZ2;
	DD	ECT_NOT_EQUAL_TO_SKIPNZ;
	DD	ECT_NOT_EQUAL_TO_SKIPNZ2;
	DD	ECT_GREATER_OR_EQUAL_SKIPZ;
	DD	ECT_GREATER_OR_EQUAL_SKIPZ2;
	DD	ECT_GREATER_OR_EQUAL_SKIPNZ;
	DD	ECT_GREATER_OR_EQUAL_SKIPNZ2;
	DD	ECT_LESS_OR_EQUAL_SKIPZ;
	DD	ECT_LESS_OR_EQUAL_SKIPZ2;
	DD	ECT_LESS_OR_EQUAL_SKIPNZ;
	DD	ECT_LESS_OR_EQUAL_SKIPNZ2;
	DD	ECT_SHORT_JMP;
	DD	ECT_JMP;
	DD	ECT_BSF;
	DD	ECT_BSR;
	DD	ECT_FILD;
	DD	ECT_FISTP;
	DD	ECT_FLD;
	DD	ECT_FSTP;
	DD	ECT_FYL2X;
	DD	ECT_FABS;
	DD	ECT_FCHS;
	DD	ECT_FSIN;
	DD	ECT_FCOS;
	DD	ECT_FPTAN;
	DD	ECT_FPATAN;
	DD	ECT_FSQRT;
	DD	ECT_FMULP;
	DD	ECT_FDIVP;
	DD	ECT_FDIVRP;
	DD	ECT_FADDP;
	DD	ECT_FSUBP;
	DD	ECT_FSUBRP;
	DD	ECT_AND_EQUAL_DWORD;
	DD	ECT_AND_EQUAL_WORD;
	DD	ECT_AND_EQUAL_BYTE;
	DD	ECT_AND_EQUAL_short;
	DD	ECT_AND_EQUAL_char;
	DD	ECT_OR_EQUAL_DWORD;
	DD	ECT_OR_EQUAL_WORD;
	DD	ECT_OR_EQUAL_BYTE;
	DD	ECT_OR_EQUAL_short;
	DD	ECT_OR_EQUAL_char;
	DD	ECT_XOR_EQUAL_DWORD;
	DD	ECT_XOR_EQUAL_WORD;
	DD	ECT_XOR_EQUAL_BYTE;
	DD	ECT_XOR_EQUAL_short;
	DD	ECT_XOR_EQUAL_char;
	DD	ECT_ADD_EQUAL_DWORD;
	DD	ECT_ADD_EQUAL_WORD;
	DD	ECT_ADD_EQUAL_BYTE;
	DD	ECT_ADD_EQUAL_short;
	DD	ECT_ADD_EQUAL_char;
	DD	ECT_SUB_EQUAL_DWORD;
	DD	ECT_SUB_EQUAL_WORD;
	DD	ECT_SUB_EQUAL_BYTE;
	DD	ECT_SUB_EQUAL_short;
	DD	ECT_SUB_EQUAL_char;
	DD	ECT_MUL_EQUAL_DWORD;
	DD	ECT_MUL_EQUAL_WORD;
	DD	ECT_MUL_EQUAL_BYTE;
	DD	ECT_MUL_EQUAL_short;
	DD	ECT_MUL_EQUAL_char;
	DD	ECT_DIV_EQUAL_DWORD;
	DD	ECT_DIV_EQUAL_WORD;
	DD	ECT_DIV_EQUAL_BYTE;
	DD	ECT_DIV_EQUAL_short;
	DD	ECT_DIV_EQUAL_char;
	DD	ECT_SHL_EQUAL_DWORD;
	DD	ECT_SHL_EQUAL_WORD;
	DD	ECT_SHL_EQUAL_BYTE;
	DD	ECT_SHL_EQUAL_short;
	DD	ECT_SHL_EQUAL_char;
	DD	ECT_SHR_EQUAL_DWORD;
	DD	ECT_SHR_EQUAL_WORD;
	DD	ECT_SHR_EQUAL_BYTE;
	DD	ECT_SHR_EQUAL_short;
	DD	ECT_SHR_EQUAL_char;
	DD	ECT_TABLE_END;
UNSIGNED_CODE_TABLE::
	DD	UECT_NULL;
	DD	UECT_XOR;
	DD	UECT_OR_OR;
	DD	UECT_AND_AND;
	DD	UECT_LESS;
	DD	UECT_GREATER;
	DD	UECT_EQUAL_EQUAL;
	DD	UECT_NOT_EQUAL_TO;
	DD	UECT_GREATER_OR_EQUAL;
	DD	UECT_LESS_OR_EQUAL;
	DD	UECT_ADD;
	DD	UECT_SUB;
	DD	UECT_MUL;
	DD	UECT_DIV;
	DD	UECT_MOD;
	DD	UECT_UNARY_MINUS;
	DD	UECT_NOT;
	DD	UECT_INT;
	DD	UECT_DOUBLE;
	DD	UECT_LOCAL_FRAME_PTR;
	DD	UECT_DEREFERRENCE;
	DD	UECT_CALL;
	DD	UECT_RET;
	DD	UECT_INC;
	DD	UECT_DEC;
	DD	UECT_INT8;
	DD	UECT_ADD32;
	DD	UECT_SUB32;
	DD	UECT_ADD8;
	DD	UECT_SUB8;
	DD	UECT_MUL32;
	DD	UECT_DIV32;
	DD	UECT_MUL8;
	DD	UECT_DIV8;
	DD	UECT_ASSIGN32;
	DD	UECT_ASSIGN16;
	DD	UECT_ASSIGN8;
	DD	UECT_ADD_ESP;
	DD	UECT_NOP;
	DD	UECT_OR;
	DD	UECT_AND;
	DD	UECT_SHL;
	DD	UECT_SHR;
	DD	UECT_COM;
	DD	UECT_IRQ;
	DD	UECT_LABEL;
	DD	UECT_SKIPZ;
	DD	UECT_UNUSED2;
	DD	UECT_DEREFERRENCE64;
	DD	UECT_DEREFERRENCE32;
	DD	UECT_DEREFERRENCE16;
	DD	UECT_DEREFERRENCE8;
	DD	UECT_DWORD_PP;
	DD	UECT_WORD_PP;
	DD	UECT_BYTE_PP;
	DD	UECT_short_PP;
	DD	UECT_char_PP;
	DD	UECT_DWORD_MM;
	DD	UECT_WORD_MM;
	DD	UECT_BYTE_MM;
	DD	UECT_short_MM;
	DD	UECT_char_MM;
	DD	UECT_ADDRESS;
	DD	UECT_FS;
	DD	UECT_CLI;
	DD	UECT_STI;
	DD	UECT_GET_FLAGS;
	DD	UECT_SET_FLAGS;
	DD	UECT_BT;
	DD	UECT_BTS;
	DD	UECT_BTR;
	DD	UECT_INSQUE;
	DD	UECT_INSQUE_REV;
	DD	UECT_REMQUE;
	DD	UECT_INP;
	DD	UECT_OUTP;
	DD	UECT_REP_INSB;
	DD	UECT_REP_INSW;
	DD	UECT_REP_OUTSB;
	DD	UECT_REP_OUTSW;
	DD	UECT_MEMCPY;
	DD	UECT_MEMSET;
	DD	UECT_INPW;
	DD	UECT_OUTPW;
	DD	UECT_PP_DWORD;
	DD	UECT_PP_WORD;
	DD	UECT_PP_BYTE;
	DD	UECT_PP_short;
	DD	UECT_PP_char;
	DD	UECT_MM_DWORD;
	DD	UECT_MM_WORD;
	DD	UECT_MM_BYTE;
	DD	UECT_MM_short;
	DD	UECT_MM_char;
	DD	UECT_INPD;
	DD	UECT_OUTPD;
	DD	UECT_ENTER;
	DD	UECT_LEAVE;
	DD	UECT_TYPE;
	DD	UECT_DS;
	DD	UECT_ADD_ESP8;
	DD	UECT_DWORD_DISP32;
	DD	UECT_WORD_DISP32;
	DD	UECT_BYTE_DISP32;
	DD	UECT_DWORD_DISP8;
	DD	UECT_WORD_DISP8;
	DD	UECT_BYTE_DISP8;
	DD	UECT_CALL_INDIRECT;
	DD	UECT_BTC;
	DD	UECT_QUESTION;
	DD	UECT_COLON;
	DD	UECT_SKIPNZ;
	DD	UECT_STRING_CONSTANT;
	DD	UECT_CALL_INDIRECT2;
	DD	UECT_GET_STACK_PTR;
	DD	UECT_SET_STACK_PTR;
	DD	UECT_GET_LABEL;
	DD	UECT_GET_BASE_PTR;
	DD	UECT_SET_BASE_PTR;
	DD	UECT_ABSOLUTE_ADDRESS;
	DD	UECT_SWITCH;
	DD	UECT_OR_OR_SKIPZ;
	DD	UECT_OR_OR_SKIPZ2;
	DD	UECT_OR_OR_SKIPNZ;
	DD	UECT_OR_OR_SKIPNZ2;
	DD	UECT_AND_AND_SKIPZ;
	DD	UECT_AND_AND_SKIPZ2;
	DD	UECT_AND_AND_SKIPNZ;
	DD	UECT_AND_AND_SKIPNZ2;
	DD	UECT_LESS_THAN_SKIPZ;
	DD	UECT_LESS_THAN_SKIPZ2;
	DD	UECT_LESS_THAN_SKIPNZ;
	DD	UECT_LESS_THAN_SKIPNZ2;
	DD	UECT_GREATER_THAN_SKIPZ;
	DD	UECT_GREATER_THAN_SKIPZ2;
	DD	UECT_GREATER_THAN_SKIPNZ;
	DD	UECT_GREATER_THAN_SKIPNZ2;
	DD	UECT_EQUAL_EQUAL_SKIPZ;
	DD	UECT_EQUAL_EQUAL_SKIPZ2;
	DD	UECT_EQUAL_EQUAL_SKIPNZ;
	DD	UECT_EQUAL_EQUAL_SKIPNZ2;
	DD	UECT_NOT_EQUAL_TO_SKIPZ;
	DD	UECT_NOT_EQUAL_TO_SKIPZ2;
	DD	UECT_NOT_EQUAL_TO_SKIPNZ;
	DD	UECT_NOT_EQUAL_TO_SKIPNZ2;
	DD	UECT_GREATER_OR_EQUAL_SKIPZ;
	DD	UECT_GREATER_OR_EQUAL_SKIPZ2;
	DD	UECT_GREATER_OR_EQUAL_SKIPNZ;
	DD	UECT_GREATER_OR_EQUAL_SKIPNZ2;
	DD	UECT_LESS_OR_EQUAL_SKIPZ;
	DD	UECT_LESS_OR_EQUAL_SKIPZ2;
	DD	UECT_LESS_OR_EQUAL_SKIPNZ;
	DD	UECT_LESS_OR_EQUAL_SKIPNZ2;
	DD	UECT_SHORT_JMP;
	DD	UECT_JMP;
	DD	UECT_BSF;
	DD	UECT_BSR;
	DD	UECT_FILD;
	DD	UECT_FISTP;
	DD	UECT_FLD;
	DD	UECT_FSTP;
	DD	UECT_FYL2X;
	DD	UECT_FABS;
	DD	UECT_FCHS;
	DD	UECT_FSIN;
	DD	UECT_FCOS;
	DD	UECT_FPTAN;
	DD	UECT_FPATAN;
	DD	UECT_FSQRT;
	DD	UECT_FMULP;
	DD	UECT_FDIVP;
	DD	UECT_FDIVRP;
	DD	UECT_FADDP;
	DD	UECT_FSUBP;
	DD	UECT_FSUBRP;
	DD	UECT_AND_EQUAL_DWORD;
	DD	UECT_AND_EQUAL_WORD;
	DD	UECT_AND_EQUAL_BYTE;
	DD	UECT_AND_EQUAL_short;
	DD	UECT_AND_EQUAL_char;
	DD	UECT_OR_EQUAL_DWORD;
	DD	UECT_OR_EQUAL_WORD;
	DD	UECT_OR_EQUAL_BYTE;
	DD	UECT_OR_EQUAL_short;
	DD	UECT_OR_EQUAL_char;
	DD	UECT_XOR_EQUAL_DWORD;
	DD	UECT_XOR_EQUAL_WORD;
	DD	UECT_XOR_EQUAL_BYTE;
	DD	UECT_XOR_EQUAL_short;
	DD	UECT_XOR_EQUAL_char;
	DD	UECT_ADD_EQUAL_DWORD;
	DD	UECT_ADD_EQUAL_WORD;
	DD	UECT_ADD_EQUAL_BYTE;
	DD	UECT_ADD_EQUAL_short;
	DD	UECT_ADD_EQUAL_char;
	DD	UECT_SUB_EQUAL_DWORD;
	DD	UECT_SUB_EQUAL_WORD;
	DD	UECT_SUB_EQUAL_BYTE;
	DD	UECT_SUB_EQUAL_short;
	DD	UECT_SUB_EQUAL_char;
	DD	UECT_MUL_EQUAL_DWORD;
	DD	UECT_MUL_EQUAL_WORD;
	DD	UECT_MUL_EQUAL_BYTE;
	DD	UECT_MUL_EQUAL_short;
	DD	UECT_MUL_EQUAL_char;
	DD	UECT_DIV_EQUAL_DWORD;
	DD	UECT_DIV_EQUAL_WORD;
	DD	UECT_DIV_EQUAL_BYTE;
	DD	UECT_DIV_EQUAL_short;
	DD	UECT_DIV_EQUAL_char;
	DD	UECT_SHL_EQUAL_DWORD;
	DD	UECT_SHL_EQUAL_WORD;
	DD	UECT_SHL_EQUAL_BYTE;
	DD	UECT_SHL_EQUAL_short;
	DD	UECT_SHL_EQUAL_char;
	DD	UECT_SHR_EQUAL_DWORD;
	DD	UECT_SHR_EQUAL_WORD;
	DD	UECT_SHR_EQUAL_BYTE;
	DD	UECT_SHR_EQUAL_short;
	DD	UECT_SHR_EQUAL_char;
	DD	UECT_TABLE_END;

CODE_TEXT_TABLE::
	DB	"NULL___",0;
	DB	"^32____",0;
	DB	"||32___",0;
	DB	"&&32___",0;
	DB	"<______",0;
	DB	">______",0;
	DB	"==_____",0;
	DB	"!=_____",0;
	DB	">=_____",0;
	DB	"<=_____",0;
	DB	"+32____",0;
	DB	"-32____",0;
	DB	"*32____",0;
	DB	"/32____",0;
	DB	"%32____",0;
	DB	"-_UNARY",0;
	DB	"!_UNARY",0;
	DB	"DWORD__",0;
	DB	"DOUBLE_",0;
	DB	"BP_____",0;
	DB	"*DWORD_",0;
	DB	"CALL___",0;
	DB	"RET____",0;
	DB	"INC____",0;
	DB	"DEC____",0;
	DB	"BYTE___",0;
	DB	"+32CON_",0;
	DB	"-32CON_",0;
	DB	"+7CONST",0;
	DB	"-7CONST",0;
	DB	"*32CON_",0;
	DB	"/32CON_",0;
	DB	"*7CONST",0;
	DB	"/7CONST",0;
	DB	":=32___",0;
	DB	":=16___",0;
	DB	":=8____",0;
	DB	"ESP+=__",0;
	DB	"NOP____",0;
	DB	"|______",0;
	DB	"&______",0;
	DB	"<<_____",0;
	DB	">>_____",0;
	DB	"~______",0;
	DB	"IRQ____",0;
	DB	"LABEL__",0;
	DB	"SKIPZ__",0;
	DB	"UNUSED2",0;
	DB	"*BYTE__",0;
	DB	"*char__",0;
	DB	"*WORD__",0;
	DB	"*short_",0;
	DB	"DWORD++",0;
	DB	"WORD_++",0;
	DB	"BYTE_++",0;
	DB	"short++",0;
	DB	"char_++",0;
	DB	"DWORD--",0;
	DB	"WORD_--",0;
	DB	"BYTE_--",0;
	DB	"short--",0;
	DB	"char_--",0;
	DB	"&______",0;
	DB	"FS_____",0;
	DB	"CLI____",0;
	DB	"STI____",0;
	DB	"GTFLAGS",0;
	DB	"STFLAGS",0;
	DB	"BT_____",0;
	DB	"BTS____",0;
	DB	"BTR____",0;
	DB	"INSQUE_",0;
	DB	"INSQUER",0;
	DB	"REMQUE_",0;
	DB	"INP____",0;
	DB	"OUTP___",0;
	DB	"REPINSB",0;
	DB	"REPINSW",0;
	DB	"RPOUTSB",0;
	DB	"RPOUTSW",0;
	DB	"MEMCPY_",0;
	DB	"MEMSET_",0;
	DB	"INPW___",0;
	DB	"OUTPW__",0;
	DB	"++DWORD",0;
	DB	"++WORD_",0;
	DB	"++BYTE_",0;
	DB	"++short",0;
	DB	"++char_",0;
	DB	"--DWORD",0;
	DB	"--WORD_",0;
	DB	"--BYTE_",0;
	DB	"--short",0;
	DB	"--char_",0;
	DB	"INPD___",0;
	DB	"OUTPD__",0;
	DB	"ENTER__",0;
	DB	"LEAVE__",0;
	DB	"TYPE___",0;
	DB	"DS_____",0;
	DB	"ESP8+=_",0;
	DB	"[DW+32]",0;
	DB	"[WO+32]",0;
	DB	"[BY+32]",0;
	DB	"[DW+8]_",0;
	DB	"[WO+8]_",0;
	DB	"[BY+8]_",0;
	DB	"*CALL__",0;
	DB	"BTC____",0;
	DB	"?______",0;
	DB	":______",0;
	DB	"SKIPNZ_",0;
	DB	"STRCNST",0;
	DB	"CALIND2",0;
	DB	"GET_ESP",0;
	DB	"SET_ESP",0;
	DB	"GETLABL",0;
	DB	"GET_EBP",0;
	DB	"SET_EBP",0;
	DB	"ABSADDR",0;
	DB	"JMP[]__",0;
	DB	"||_Z___",0;
	DB	"||_Z2__",0;
	DB	"||_NZ__",0;
	DB	"||_NZ2_",0;
	DB	"&&_Z___",0;
	DB	"&&_Z2__",0;
	DB	"&&_NZ__",0;
	DB	"&&_NZ2_",0;
	DB	"<__Z___",0;
	DB	"<__Z2__",0;
	DB	"<__NZ__",0;
	DB	"<__NZ2_",0;
	DB	">__Z___",0;
	DB	">__Z2__",0;
	DB	">__NZ__",0;
	DB	">__NZ2_",0;
	DB	"==_Z___",0;
	DB	"==_Z2__",0;
	DB	"==_NZ__",0;
	DB	"==_NZ2_",0;
	DB	"!=_Z___",0;
	DB	"!=_Z2__",0;
	DB	"!=_NZ__",0;
	DB	"!=_NZ2_",0;
	DB	">=_Z___",0;
	DB	">=_Z2__",0;
	DB	">=_NZ__",0;
	DB	">=_NZ2_",0;
	DB	"<=_Z___",0;
	DB	"<=_Z2__",0;
	DB	"<=_NZ__",0;
	DB	"<=_NZ2_",0;
	DB	"JMP_BYT",0;
	DB	"JMP_DWD",0;
	DB	"BSF____",0;
	DB	"BSR____",0;
	DB	"FILD___",0;
	DB	"FISTP__",0;
	DB	"FLD____",0;
	DB	"FSTP___",0;
	DB	"FYL2X__",0;
	DB	"FABS___",0;
	DB	"FCHS___",0;
	DB	"FSIN___",0;
	DB	"FCOS___",0;
	DB	"FPTAN__",0;
	DB	"FPATAN_",0;
	DB	"FSQRT__",0;
	DB	"FMULP__",0;
	DB	"FDIVP__",0;
	DB	"FDIVRP_",0;
	DB	"FADDP__",0;
	DB	"FSUBP__",0;
	DB	"FSUBRP_",0;
	DB	"DW_&=__",0;
	DB	"WO_&=__",0;
	DB	"BY_&=__",0;
	DB	"sh_&=__",0;
	DB	"ch_&=__",0;
	DB	"DW_|=__",0;
	DB	"WO_|=__",0;
	DB	"BY_|=__",0;
	DB	"sh_|=__",0;
	DB	"ch_|=__",0;
	DB	"DW_^=__",0;
	DB	"WO_^=__",0;
	DB	"BY_^=__",0;
	DB	"sh_^=__",0;
	DB	"ch_^=__",0;
	DB	"DW_&=__",0;
	DB	"WO_&=__",0;
	DB	"BY_&=__",0;
	DB	"sh_&=__",0;
	DB	"ch_&=__",0;
	DB	"DW_+=__",0;
	DB	"WO_+=__",0;
	DB	"BY_+=__",0;
	DB	"sh_+=__",0;
	DB	"ch_+=__",0;
	DB	"DW_-=__",0;
	DB	"WO_-=__",0;
	DB	"BY_-=__",0;
	DB	"sh_-=__",0;
	DB	"ch_-=__",0;
	DB	"DW_*=__",0;
	DB	"WO_*=__",0;
	DB	"BY_*=__",0;
	DB	"sh_*=__",0;
	DB	"ch_*=__",0;
	DB	"DW_/=__",0;
	DB	"WO_/=__",0;
	DB	"BY_/=__",0;
	DB	"sh_/=__",0;
	DB	"ch_/=__",0;
	DB	"DW_<<=_",0;
	DB	"WO_<<=_",0;
	DB	"BY_<<=_",0;
	DB	"sh_<<=_",0;
	DB	"ch_<<=_",0;
	DB	"DW_>>=_",0;
	DB	"WO_>>=_",0;
	DB	"BY_>>=_",0;
	DB	"sh_>>=_",0;
	DB	"ch_>>=_",0;

FIX_UP_8_TABLE::
	DW	0,0,0,0,0,0,0,0;	//00
	DW	0,0,0,0,0,0,0,0;	//08
	DW	0,0,0,0,0,0,0,0;	//10
	DW	0,-1,0,0,-1,-1,0,0;	//18
	DW	0,0,0,0,0,0,0,0;	//20
	DW	0,0,0,0,-1,0,0,0;	//28
	DW	0,0,0,0,0,0,0,0;	//30
	DW	0,0,0,0,0,0,0,0;	//38
	DW	0,0,0,0,0,0,0,0;	//40
	DW	0,0,0,0,0,0,0,0;	//48
	DW	0,0,0,0,0,0,0,0;	//50
	DW	0,0,0,0,0,0,0,0;	//58
	DW	0,0,0,0,-1,0,0,0;	//60
	DW	-1,-1,-1,0,0,0,0,0;	//68
	DW	0,0,0,0,0,0,0,0;	//70
	DW	0,0,0,0,0,0,0,0;	//78
	DW	0,0,0,0,0,0,0,0;	//80
	DW	0,0,0,0,0,0,0,0;	//88
	DW	0,0,0,0,0,0,0,0;	//90
	DW	0,0,0,0,0,0,0,0;	//98
	DW	0,0,0,0,0,0,0,0;	//A0
	DW	0,0,0,0,0,0,0,0;	//A8
	DW	0,0,0,0,0,0,0,0;	//B0
	DW	0,0,0,0,0,0,0,0;	//B8
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
FIX_UP_32_TABLE::
	DW	0,0,0,0,0,0,0,0;	//00
	DW	0,0,0,0,0,0,0,0;	//08
	DW	0,-4,0,0,0,-4,0,0;	//10
	DW	0,0,-4,-4,0,0,0,0;	//18
	DW	0,0,0,0,0,-4,0,0;	//20
	DW	0,0,0,0,0,0,0,0;	//28
	DW	0,0,0,0,0,0,0,0;	//30
	DW	0,0,0,0,0,0,0,0;	//38
	DW	0,0,0,0,0,0,0,0;	//40
	DW	0,0,0,0,0,0,0,0;	//48
	DW	0,0,0,0,0,0,0,0;	//50
	DW	0,0,0,0,0,0,0,0;	//58
	DW	-4,-6,-4,0,0,-4,-4,-4;	//60
	DW	0,0,0,-4,0,0,0,0;	//68
	DW	-4,-4,0,0,-4,0,0,-4;	//70
	DW	-4,0,0,0,0,0,0,0;	//78
	DW	0,0,0,0,0,0,0,0;	//80
	DW	0,0,0,0,0,0,0,0;	//88
	DW	0,0,0,0,0,0,0,0;	//90
	DW	0,0,0,0,0,0,0,0;	//98
	DW	0,0,0,0,0,0,0,0;	//A0
	DW	0,0,0,0,0,0,0,0;	//A8
	DW	0,0,0,0,0,0,0,0;	//B0
	DW	0,0,0,0,0,0,0,0;	//B8
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
FIX_UP_32_JMP_TABLE::
	DW	0,0,0,0,0,0,0,0;	//00
	DW	0,0,0,0,0,0,0,0;	//08
	DW	0,0,0,0,0,0,0,0;	//10
	DW	0,0,0,0,0,0,0,0;	//18
	DW	0,0,0,0,0,0,0,0;	//20
	DW	0,0,0,0,0,0,-4,-4;	//28
	DW	0,0,0,0,0,0,0,0;	//30
	DW	0,0,0,0,0,0,0,0;	//38
	DW	0,0,0,0,0,0,0,0;	//40
	DW	0,0,0,0,0,0,0,0;	//48
	DW	0,0,0,0,0,0,0,0;	//50
	DW	0,0,0,0,0,0,0,0;	//58
	DW	0,0,0,0,0,0,0,0;	//60
	DW	0,0,0,0,0,0,0,-4;	//68
	DW	0,0,0,0,0,0,0,0;	//70
	DW	0,0,-4,0,-4,0,-4,0;	//78
	DW	-4,0,-4,0,-4,0,-4,0;	//80
	DW	-4,0,-4,0,-4,0,-4,0;	//88
	DW	-4,0,-4,0,-4,0,-4,0;	//90
	DW	-4,0,-4,0,0,0,0,0;	//98
	DW	0,0,0,0,0,0,0,0;	//A0
	DW	0,0,0,0,0,0,0,0;	//A8
	DW	0,0,0,0,0,0,0,0;	//B0
	DW	0,0,0,0,0,0,0,0;	//B8
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
FIX_UP_8_JMP_TABLE::
	DW	0,0,0,0,0,0,0,0;	//00
	DW	0,0,0,0,0,0,0,0;	//08
	DW	0,0,0,0,0,0,0,0;	//10
	DW	0,0,0,0,0,0,0,0;	//18
	DW	0,0,0,0,0,0,0,0;	//20
	DW	0,0,0,0,0,0,0,0;	//28
	DW	0,0,0,0,0,0,0,0;	//30
	DW	0,0,0,0,0,0,0,0;	//38
	DW	0,0,0,0,0,0,0,0;	//40
	DW	0,0,0,0,0,0,0,0;	//48
	DW	0,0,0,0,0,0,0,0;	//50
	DW	0,0,0,0,0,0,0,0;	//58
	DW	0,0,0,0,0,0,0,0;	//60
	DW	0,0,0,0,0,0,0,0;	//68
	DW	0,0,0,0,0,0,0,0;	//70
	DW	0,-1,0,-1,0,-1,0,-1;	//78
	DW	0,-1,0,-1,0,-1,0,-1;	//80
	DW	0,-1,0,-1,0,-1,0,-1;	//88
	DW	0,-1,0,-1,0,-1,0,-1;	//90
	DW	0,-1,0,0,0,0,0,0;	//98
	DW	0,0,0,0,0,0,0,0;	//A0
	DW	0,0,0,0,0,0,0,0;	//A8
	DW	0,0,0,0,0,0,0,0;	//B0
	DW	0,0,0,0,0,0,0,0;	//B8
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
	DW	0,0,0,0,0,0,0,0;
ECT_NULL:
ECT_XOR:
	POP	EDX
	XOR	EAX,EDX
ECT_OR_OR:
	POP	EDX
	OR	EAX,EDX
	JZ	ECT_AND_AND
	MOV	EAX,1
ECT_AND_AND:
	POP	EDX
	AND	EAX,EAX
	JZ	ECT_LESS
	XOR	EAX,EAX
	AND	EDX,EDX
	JZ	ECT_LESS
	INC	EAX
ECT_LESS:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JLE	ECT_GREATER
	INC	EAX
ECT_GREATER:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JGE	ECT_EQUAL_EQUAL
	INC	EAX
ECT_EQUAL_EQUAL:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JNE	ECT_NOT_EQUAL_TO
	INC	EAX
ECT_NOT_EQUAL_TO:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JE	ECT_GREATER_OR_EQUAL
	INC	EAX
ECT_GREATER_OR_EQUAL:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JG	ECT_LESS_OR_EQUAL
	INC	EAX
ECT_LESS_OR_EQUAL:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JL	ECT_ADD
	INC	EAX
ECT_ADD:
	POP	EDX
	ADD	EAX,EDX
ECT_SUB:
	POP	EDX
	SUB	EAX,EDX
	NEG	EAX
ECT_MUL:
	POP	EBX
	MUL	EBX
ECT_DIV:
	MOV	EBX,EAX
	POP	EAX
	XOR	EDX,EDX
	OR	EAX,EAX
	JNS	@@3
	NOT	EDX
@@3:	IDIV	EBX
ECT_MOD:
	MOV	EBX,EAX
	POP	EAX
	XOR	EDX,EDX
	OR	EAX,EAX
	JNS	@@4
	NOT	EDX
@@4:	IDIV	EBX
	MOV	EAX,EDX
ECT_UNARY_MINUS:
	NEG	EAX
ECT_NOT:
	OR	EAX,EAX
	MOV	EAX,1
	JZ	ECT_INT
	XOR	EAX,EAX
ECT_INT:
	PUSH	EAX
	MOV	EAX,0x12345678
ECT_DOUBLE:
ECT_LOCAL_FRAME_PTR:
	PUSH	EAX
	MOV	EAX,EBP
ECT_DEREFERRENCE:
	MOV	EAX,DWORD [EAX]
ECT_CALL:
	PUSH	EAX
	CALL	ECT_CALL
ECT_RET:
	RET
ECT_INC:
	INC	EAX
ECT_DEC:
	DEC	EAX
ECT_INT8:
	MOV	EAX,0x12
ECT_ADD32:
	ADD	EAX,0x12345678
ECT_SUB32:
	SUB	EAX,0x12345678
ECT_ADD8:
	ADD	EAX,0x12
ECT_SUB8:
	SUB	EAX,0x12
ECT_MUL32:
	MOV	EBX,0x12345678
	IMUL	EBX
ECT_DIV32:
	MOV	EBX,0x12345678
	XOR	EDX,EDX
	IDIV	EBX
ECT_MUL8:
	MOV	EBX,0x12
	IMUL	EBX
ECT_DIV8:
	MOV	EBX,0x12
	XOR	EDX,EDX
	IDIV	EBX
ECT_ASSIGN32:
	POP	EBX
	MOV	DWORD [EBX],EAX
ECT_ASSIGN16:
	POP	EBX
	MOV	WORD [EBX],AX
ECT_ASSIGN8:
	POP	EBX
	MOV	BYTE [EBX],AL
ECT_ADD_ESP:
	ADD	ESP,0x12345678
ECT_NOP:
ECT_OR:
	POP	EDX
	OR	EAX,EDX
ECT_AND:
	POP	EDX
	AND	EAX,EDX
ECT_SHL:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOV	EAX,EBX
	SHL	EAX,CL
	POP	ECX
ECT_SHR:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOV	EAX,EBX
	SAR	EAX,CL
	POP	ECX
ECT_COM:
	NOT	EAX
ECT_IRQ:
	INT	I_COUT	//Gets patched
ECT_LABEL:
ECT_SKIPZ:
	OR	EAX,EAX
	JNZ	ECT_UNUSED2
	DB	0xE9,01,02,03,04;
ECT_UNUSED2:
	DB	0xE9,01,02,03,04;
ECT_DEREFERRENCE64:
	MOV	EAX,DWORD [EAX]
ECT_DEREFERRENCE32:
	MOV	EAX,DWORD [EAX]
ECT_DEREFERRENCE16:
	MOVSX	EAX,WORD [EAX]
ECT_DEREFERRENCE8:
	MOVSX	EAX,BYTE [EAX]
ECT_DWORD_PP:
	MOV	EBX,DWORD [EAX]
	INC	DWORD [EAX]
	MOV	EAX,EBX
ECT_WORD_PP:
	MOVSX	EBX,WORD [EAX]
	INC	WORD [EAX]
	MOV	EAX,EBX
ECT_BYTE_PP:
	MOVSX	EBX,BYTE [EAX]
	INC	BYTE [EAX]
	MOV	EAX,EBX
ECT_short_PP:
ECT_char_PP:
ECT_DWORD_MM:
	MOV	EBX,DWORD [EAX]
	DEC	DWORD [EAX]
	MOV	EAX,EBX
ECT_WORD_MM:
	MOVSX	EBX,WORD [EAX]
	DEC	WORD [EAX]
	MOV	EAX,EBX
ECT_BYTE_MM:
	MOVSX	EBX,BYTE [EAX]
	DEC	BYTE [EAX]
	MOV	EAX,EBX
ECT_short_MM:
ECT_char_MM:
ECT_ADDRESS:
ECT_FS:
	PUSH	EAX
	MOV	EAX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
ECT_CLI:
	PUSH	EAX
	CLI
ECT_STI:
	PUSH	EAX
	STI
ECT_GET_FLAGS:
	PUSH	EAX
	PUSHFD
	POP	EAX
ECT_SET_FLAGS:
	PUSH	EAX
	POPFD
ECT_BT:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BT	DWORD [EBX],EDX
	ADC	EAX,0
ECT_BTS:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BTS	DWORD [EBX],EDX
	ADC	EAX,0
ECT_BTR:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BTR	DWORD [EBX],EDX
	ADC	EAX,0
ECT_INSQUE:
	POP	EDX
	MOV	EBX,[EDX]
	MOV	[EDX],EAX
	MOV	[EAX],EBX
	MOV	4[EAX],EDX
	MOV	4[EBX],EAX
ECT_INSQUE_REV:
	POP	EDX
	MOV	EBX,4[EDX]
	MOV	[EBX],EAX
	MOV	[EAX],EDX
	MOV	4[EAX],EBX
	MOV	4[EDX],EAX
ECT_REMQUE:
	MOV	EBX,[EAX]
	MOV	EDX,4[EAX]
	MOV	[EDX],EBX
	MOV	4[EBX],EDX
ECT_INP:
	MOV	EDX,EAX
	XOR	EAX,EAX
	IN	AL,DX
ECT_OUTP:
	MOV	EDX,EAX
	POP	EAX
	OUT	DX,AL
ECT_REP_INSB:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_INSB
	POP	EDI
	POP	ECX
	POP	EBP
	ADD	ESP,8
ECT_REP_INSW:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_INSW
	POP	EDI
	POP	ECX
	POP	EBP
	ADD	ESP,8
ECT_REP_OUTSB:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	ESI
	MOV	ESI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_OUTSB
	POP	ESI
	POP	ECX
	POP	EBP
	ADD	ESP,8
ECT_REP_OUTSW:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	ESI
	MOV	ESI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_OUTSW
	POP	ESI
	POP	ECX
	POP	EBP
	ADD	ESP,8
ECT_MEMCPY:
	PUSH	EAX
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	ESI
	PUSH	EDI
	MOV	EDI,4[EBP]
	MOV	ESI,8[EBP]
	MOV	ECX,12[EBP]
	OR	ECX,ECX
	JZ	@@1
	REP_MOVSB
@@1:	POP	EDI
	POP	ESI
	POP	ECX
	POP	EBP
	ADD	ESP,12
ECT_MEMSET:
	PUSH	EAX
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,4[EBP]
	MOV	ECX,12[EBP]
	MOV	EAX,8[EBP]
	OR	ECX,ECX
	JZ	@@2
	REP_STOSB
@@2:	POP	EDI
	POP	ECX
	POP	EBP
	ADD	ESP,12
ECT_INPW:
	MOV	EDX,EAX
	XOR	EAX,EAX
	IN	AX,DX
ECT_OUTPW:
	MOV	EDX,EAX
	POP	EAX
	OUT	DX,AX
ECT_PP_DWORD:
	INC	DWORD [EAX]
	MOV	EAX,DWORD [EAX]
ECT_PP_WORD:
	INC	WORD [EAX]
	MOVSX	EAX,WORD [EAX]
ECT_PP_BYTE:
	INC	BYTE [EAX]
	MOVSX	EAX,BYTE [EAX]
ECT_PP_short:
ECT_PP_char:
ECT_MM_DWORD:
	DEC	DWORD [EAX]
	MOV	EAX,DWORD [EAX]
ECT_MM_WORD:
	DEC	WORD [EAX]
	MOVSX	EAX,WORD [EAX]
ECT_MM_BYTE:
	DEC	BYTE [EAX]
	MOVSX	EAX,BYTE [EAX]
ECT_MM_short:
ECT_MM_char:
ECT_INPD:
	MOV	EDX,EAX
	IN	EAX,DX
ECT_OUTPD:
	MOV	EAX,EDX
	POP	EAX
	OUT	DX,EAX
ECT_ENTER:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,0x012345678
ECT_LEAVE:
	ADD	ESP,0x012345678
	POP	EBP
	RET

ECT_TYPE:
	PUSH	EAX
	MOV	EAX,0x12345678
ECT_DS:
	PUSH	EAX
	XOR	EAX,EAX
ECT_ADD_ESP8:
	ADD	ESP,0x12
ECT_int_DISP32:
	PUSH	EAX
	MOV	EAX,DWORD 0x12345678[EBP]
ECT_short_DISP32:
	PUSH	EAX
	MOVSX	EAX,WORD 0x12345678[EBP]
ECT_char_DISP32:
	PUSH	EAX
	MOVSX	EAX,BYTE 0x12345678[EBP]
ECT_int_DISP8:
	PUSH	EAX
	MOV	EAX,DWORD 0x12[EBP]
ECT_short_DISP8:
	PUSH	EAX
	MOVSX	EAX,WORD 0x12[EBP]
ECT_char_DISP8:
	PUSH	EAX
	MOVSX	EAX,BYTE 0x12[EBP]
ECT_CALL_INDIRECT:
	PUSH	EAX
	MOV	EAX,ESP
	CALL	DWORD 0x12345678[EAX]
ECT_BTC:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BTC	DWORD [EBX],EDX
	ADC	EAX,0
ECT_QUESTION:
ECT_COLON:
	POP	EDX
	POP	EBX
	OR	EBX,EBX
	JZ	ECT_SKIPNZ
	MOV	EAX,EDX
ECT_SKIPNZ:
	OR	EAX,EAX
	JZ	ECT_STRING_CONSTANT
	DB	0xE9,01,02,03,04;
ECT_STRING_CONSTANT:
	PUSH	EAX
	MOV	EAX,0x12345678
ECT_CALL_INDIRECT2:
	PUSH	EAX
	CALL	DWORD [0x12345678]
ECT_GET_STACK_PTR:
	PUSH	EAX
	MOV	EAX,ESP
ECT_SET_STACK_PTR:
	MOV	ESP,EAX
ECT_GET_LABEL:
	PUSH	EAX
	MOV	EAX,0x12345678
ECT_GET_BASE_PTR:
	PUSH	EAX
	MOV	EAX,EBP
ECT_SET_BASE_PTR:
	MOV	EBP,EAX
ECT_ABSOLUTE_ADDRESS:
	PUSH	EAX
	MOV	EAX,0x12345678
ECT_SWITCH:
	POP	EBX
	ADD	ESP,4
	CMP	EBX,EAX
	JAE	ECT_OR_OR_SKIPZ
	JMP	DWORD 0x12345678[EBX*4]
ECT_OR_OR_SKIPZ:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JZ	ECT_OR_OR_SKIPZ
ECT_OR_OR_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JZ	DWORD FAR_AWAY
ECT_OR_OR_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JNZ	ECT_OR_OR_SKIPNZ
ECT_OR_OR_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JNZ	DWORD FAR_AWAY
ECT_AND_AND_SKIPZ:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	@@AAZ1
	AND	EDX,EDX
@@AAZ1:	JZ	ECT_AND_AND_SKIPZ
ECT_AND_AND_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	@@AAZ2
	AND	EDX,EDX
@@AAZ2:	JZ	DWORD FAR_AWAY
ECT_AND_AND_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	ECT_AND_AND_SKIPNZ2
	AND	EDX,EDX
	JNZ	ECT_AND_AND_SKIPNZ
ECT_AND_AND_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	ECT_LESS_THAN_SKIPZ
	AND	EDX,EDX
	JNZ	DWORD FAR_AWAY
ECT_LESS_THAN_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JGE	ECT_LESS_THAN_SKIPZ
ECT_LESS_THAN_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JGE	DWORD FAR_AWAY
ECT_LESS_THAN_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JL	ECT_LESS_THAN_SKIPNZ
ECT_LESS_THAN_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JL	DWORD FAR_AWAY
ECT_GREATER_THAN_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JLE	ECT_GREATER_THAN_SKIPZ
ECT_GREATER_THAN_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JLE	DWORD FAR_AWAY
ECT_GREATER_THAN_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JG	ECT_GREATER_THAN_SKIPNZ
ECT_GREATER_THAN_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JG	DWORD FAR_AWAY
ECT_EQUAL_EQUAL_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	ECT_EQUAL_EQUAL_SKIPZ
ECT_EQUAL_EQUAL_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	DWORD FAR_AWAY
ECT_EQUAL_EQUAL_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	ECT_EQUAL_EQUAL_SKIPNZ
ECT_EQUAL_EQUAL_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	DWORD FAR_AWAY
ECT_NOT_EQUAL_TO_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	ECT_NOT_EQUAL_TO_SKIPZ
ECT_NOT_EQUAL_TO_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	DWORD FAR_AWAY
ECT_NOT_EQUAL_TO_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	ECT_NOT_EQUAL_TO_SKIPNZ
ECT_NOT_EQUAL_TO_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	DWORD FAR_AWAY
ECT_GREATER_OR_EQUAL_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JL	ECT_GREATER_OR_EQUAL_SKIPZ
ECT_GREATER_OR_EQUAL_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JL	DWORD FAR_AWAY
ECT_GREATER_OR_EQUAL_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JGE	ECT_GREATER_OR_EQUAL_SKIPNZ
ECT_GREATER_OR_EQUAL_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JGE	DWORD FAR_AWAY
ECT_LESS_OR_EQUAL_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JG	ECT_LESS_OR_EQUAL_SKIPZ
ECT_LESS_OR_EQUAL_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JG	DWORD FAR_AWAY
ECT_LESS_OR_EQUAL_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JLE	ECT_LESS_OR_EQUAL_SKIPNZ
ECT_LESS_OR_EQUAL_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JLE	DWORD FAR_AWAY
ECT_SHORT_JMP:
	JMP	ECT_SHORT_JMP
ECT_JMP:
	JMP	DWORD FAR_AWAY
ECT_BSF:
	BSF	EAX,EAX
	JNZ	ECT_BSR
	NOT	EAX
ECT_BSR:
	BSR	EAX,EAX
	JNZ	ECT_FILD
	NOT	EAX
ECT_FILD:
	FILD	DWORD [EAX]
ECT_FISTP:
	FISTP	DWORD [EAX]
ECT_FLD:
	FLD	DWORD [EAX]
ECT_FSTP:
	FSTP	DWORD [EAX]
ECT_FYL2X:
	PUSH	EAX
	FYL2X
ECT_FABS:
	PUSH	EAX
	FABS
ECT_FCHS:
	PUSH	EAX
	FCHS
ECT_FSIN:
	PUSH	EAX
	FSIN
ECT_FCOS:
	PUSH	EAX
	FCOS
ECT_FPTAN:
	PUSH	EAX
	FPTAN
ECT_FPATAN:
	PUSH	EAX
	FPATAN
ECT_FSQRT:
	PUSH	EAX
	FSQRT
ECT_FMULP:
	PUSH	EAX
	FMULP
ECT_FDIVP:
	PUSH	EAX
	FDIVP
ECT_FDIVRP:
	PUSH	EAX
	FDIVRP
ECT_FADDP:
	PUSH	EAX
	FADDP
ECT_FSUBP:
	PUSH	EAX
	FSUBP
ECT_FSUBRP:
	PUSH	EAX
	FSUBRP
ECT_AND_EQUAL_DWORD:
	POP	EBX
	AND	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
ECT_AND_EQUAL_WORD:
	POP	EBX
	AND	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
ECT_AND_EQUAL_BYTE:
	POP	EBX
	AND	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
ECT_AND_EQUAL_short:
ECT_AND_EQUAL_char:
ECT_OR_EQUAL_DWORD:
	POP	EBX
	OR	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
ECT_OR_EQUAL_WORD:
	POP	EBX
	OR	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
ECT_OR_EQUAL_BYTE:
	POP	EBX
	OR	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
ECT_OR_EQUAL_short:
ECT_OR_EQUAL_char:
ECT_XOR_EQUAL_DWORD:
	POP	EBX
	XOR	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
ECT_XOR_EQUAL_WORD:
	POP	EBX
	XOR	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
ECT_XOR_EQUAL_BYTE:
	POP	EBX
	XOR	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
ECT_XOR_EQUAL_short:
ECT_XOR_EQUAL_char:
ECT_ADD_EQUAL_DWORD:
	POP	EBX
	ADD	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
ECT_ADD_EQUAL_WORD:
	POP	EBX
	ADD	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
ECT_ADD_EQUAL_BYTE:
	POP	EBX
	ADD	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
ECT_ADD_EQUAL_short:
ECT_ADD_EQUAL_char:
ECT_SUB_EQUAL_DWORD:
	POP	EBX
	SUB	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
ECT_SUB_EQUAL_WORD:
	POP	EBX
	SUB	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
ECT_SUB_EQUAL_BYTE:
	POP	EBX
	SUB	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
ECT_SUB_EQUAL_short:
ECT_SUB_EQUAL_char:
ECT_MUL_EQUAL_DWORD:
	POP	EBX
	MOV	EDX,DWORD [EBX]
	MUL	EDX
	MOV	DWORD [EBX],EAX
ECT_MUL_EQUAL_WORD:
	POP	EBX
	MOVSX	EDX,WORD [EBX]
	IMUL	EDX
	MOV	WORD [EBX],AX
ECT_MUL_EQUAL_BYTE:
	POP	EBX
	MOVSX	EDX,BYTE [EBX]
	IMUL	EDX
	MOV	BYTE [EBX],AL
ECT_MUL_EQUAL_short:
ECT_MUL_EQUAL_char:
ECT_DIV_EQUAL_DWORD:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOV	EAX,DWORD [EBX]
	XOR	EDX,EDX
	OR	EAX,EAX
	JNS	@@IDV1
	NOT	EDX
@@IDV1:	IDIV	ECX
	MOV	DWORD [EBX],EAX
	POP	ECX
ECT_DIV_EQUAL_WORD:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOVSX	EAX,WORD [EBX]
	XOR	EDX,EDX
	OR	EAX,EAX
	JNS	@@IDV4
	NOT	EDX
@@IDV4:	IDIV	ECX
	MOV	WORD [EBX],AX
	POP	ECX
ECT_DIV_EQUAL_BYTE:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOVSX	EAX,BYTE [EBX]
	XOR	EDX,EDX
	OR	EAX,EAX
	JNS	@@IDV5
	NOT	EDX
@@IDV5:	IDIV	ECX
	MOV	BYTE [EBX],AL
	POP	ECX
ECT_DIV_EQUAL_short:
ECT_DIV_EQUAL_char:
ECT_SHL_EQUAL_DWORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SAL	DWORD [EBX],CL
	POP	ECX
	MOV	EAX,DWORD [EBX]
ECT_SHL_EQUAL_WORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SAL	WORD [EBX],CL
	POP	ECX
	MOVSX	EAX,WORD [EBX]
ECT_SHL_EQUAL_BYTE:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SAL	BYTE [EBX],CL
	POP	ECX
	MOVSX	EAX,BYTE [EBX]
ECT_SHL_EQUAL_short:
ECT_SHL_EQUAL_char:
ECT_SHR_EQUAL_DWORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SAR	DWORD [EBX],CL
	POP	ECX
	MOV	EAX,DWORD [EBX]
ECT_SHR_EQUAL_WORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SAR	WORD [EBX],CL
	POP	ECX
	MOVSX	EAX,WORD [EBX]
ECT_SHR_EQUAL_BYTE:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SAR	BYTE [EBX],CL
	POP	ECX
	MOVSX	EAX,BYTE [EBX]
ECT_SHR_EQUAL_short:
ECT_SHR_EQUAL_char:
ECT_TABLE_END:

UECT_NULL:
UECT_XOR:
	POP	EDX
	XOR	EAX,EDX
UECT_OR_OR:
	POP	EDX
	OR	EAX,EDX
	JZ	UECT_AND_AND
	MOV	EAX,1
UECT_AND_AND:
	POP	EDX
	AND	EAX,EAX
	JZ	UECT_LESS
	XOR	EAX,EAX
	AND	EDX,EDX
	JZ	UECT_LESS
	INC	EAX
UECT_LESS:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JBE	UECT_GREATER
	INC	EAX
UECT_GREATER:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JAE	UECT_EQUAL_EQUAL
	INC	EAX
UECT_EQUAL_EQUAL:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JNE	UECT_NOT_EQUAL_TO
	INC	EAX
UECT_NOT_EQUAL_TO:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JE	UECT_GREATER_OR_EQUAL
	INC	EAX
UECT_GREATER_OR_EQUAL:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JA	UECT_LESS_OR_EQUAL
	INC	EAX
UECT_LESS_OR_EQUAL:
	POP	EDX
	CMP	EAX,EDX
	MOV	EAX,0
	JB	UECT_ADD
	INC	EAX
UECT_ADD:
	POP	EDX
	ADD	EAX,EDX
UECT_SUB:
	POP	EDX
	SUB	EAX,EDX
	NEG	EAX
UECT_MUL:
	POP	EBX
	MUL	EBX
UECT_DIV:
	MOV	EBX,EAX
	POP	EAX
	XOR	EDX,EDX
	DIV	EBX
UECT_MOD:
	MOV	EBX,EAX
	POP	EAX
	XOR	EDX,EDX
	DIV	EBX
	MOV	EAX,EDX
UECT_UNARY_MINUS:
	NEG	EAX
UECT_NOT:
	OR	EAX,EAX
	MOV	EAX,1
	JZ	UECT_INT
	XOR	EAX,EAX
UECT_INT:
	PUSH	EAX
	MOV	EAX,0x12345678
UECT_DOUBLE:
UECT_LOCAL_FRAME_PTR:
	PUSH	EAX
	MOV	EAX,EBP
UECT_DEREFERRENCE:
	MOV	EAX,DWORD [EAX]
UECT_CALL:
	PUSH	EAX
	CALL	UECT_CALL
UECT_RET:
	RET
UECT_INC:
	INC	EAX
UECT_DEC:
	DEC	EAX
UECT_INT8:
	MOV	EAX,0x12
UECT_ADD32:
	ADD	EAX,0x12345678
UECT_SUB32:
	SUB	EAX,0x12345678
UECT_ADD8:
	ADD	EAX,0x12
UECT_SUB8:
	SUB	EAX,0x12
UECT_MUL32:
	MOV	EBX,0x12345678
	MUL	EBX
UECT_DIV32:
	MOV	EBX,0x12345678
	XOR	EDX,EDX
	DIV	EBX
UECT_MUL8:
	MOV	EBX,0x12
	MUL	EBX
UECT_DIV8:
	MOV	EBX,0x12
	XOR	EDX,EDX
	DIV	EBX
UECT_ASSIGN32:
	POP	EBX
	MOV	DWORD [EBX],EAX
UECT_ASSIGN16:
	POP	EBX
	MOV	WORD [EBX],AX
UECT_ASSIGN8:
	POP	EBX
	MOV	BYTE [EBX],AL
UECT_ADD_ESP:
	ADD	ESP,0x12345678
UECT_NOP:
UECT_OR:
	POP	EDX
	OR	EAX,EDX
UECT_AND:
	POP	EDX
	AND	EAX,EDX
UECT_SHL:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOV	EAX,EBX
	SHL	EAX,CL
	POP	ECX
UECT_SHR:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOV	EAX,EBX
	SHR	EAX,CL
	POP	ECX
UECT_COM:
	NOT	EAX
UECT_IRQ:
	INT	I_COUT	//Gets patched
UECT_LABEL:
UECT_SKIPZ:
	OR	EAX,EAX
	JNZ	UECT_UNUSED2
	DB	0xE9,01,02,03,04;
UECT_UNUSED2:
	DB	0xE9,01,02,03,04;
UECT_DEREFERRENCE64:
	MOV	EAX,DWORD [EAX]
UECT_DEREFERRENCE32:
	MOV	EAX,DWORD [EAX]
UECT_DEREFERRENCE16:
	MOVZX	EAX,WORD [EAX]
UECT_DEREFERRENCE8:
	MOVZX	EAX,BYTE [EAX]
UECT_DWORD_PP:
	MOV	EBX,DWORD [EAX]
	INC	DWORD [EAX]
	MOV	EAX,EBX
UECT_WORD_PP:
	MOVZX	EBX,WORD [EAX]
	INC	WORD [EAX]
	MOV	EAX,EBX
UECT_BYTE_PP:
	MOVZX	EBX,BYTE [EAX]
	INC	BYTE [EAX]
	MOV	EAX,EBX
UECT_short_PP:
	MOVSX	EBX,WORD [EAX]
	INC	WORD [EAX]
	MOV	EAX,EBX
UECT_char_PP:
	MOVSX	EBX,BYTE [EAX]
	INC	BYTE [EAX]
	MOV	EAX,EBX
UECT_DWORD_MM:
	MOV	EBX,DWORD [EAX]
	DEC	DWORD [EAX]
	MOV	EAX,EBX
UECT_WORD_MM:
	MOVZX	EBX,WORD [EAX]
	DEC	WORD [EAX]
	MOV	EAX,EBX
UECT_BYTE_MM:
	MOVZX	EBX,BYTE [EAX]
	DEC	BYTE [EAX]
	MOV	EAX,EBX
UECT_short_MM:
	MOVSX	EBX,WORD [EAX]
	DEC	WORD [EAX]
	MOV	EAX,EBX
UECT_char_MM:
	MOVSX	EBX,BYTE [EAX]
	DEC	BYTE [EAX]
	MOV	EAX,EBX
UECT_ADDRESS:
UECT_FS:
	PUSH	EAX
	MOV	EAX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
UECT_CLI:
	PUSH	EAX
	CLI
UECT_STI:
	PUSH	EAX
	STI
UECT_GET_FLAGS:
	PUSH	EAX
	PUSHFD
	POP	EAX
UECT_SET_FLAGS:
	PUSH	EAX
	POPFD
UECT_BT:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BT	DWORD [EBX],EDX
	ADC	EAX,0
UECT_BTS:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BTS	DWORD [EBX],EDX
	ADC	EAX,0
UECT_BTR:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BTR	DWORD [EBX],EDX
	ADC	EAX,0
UECT_INSQUE:
	POP	EDX
	MOV	EBX,[EDX]
	MOV	[EDX],EAX
	MOV	[EAX],EBX
	MOV	4[EAX],EDX
	MOV	4[EBX],EAX
UECT_INSQUE_REV:
	POP	EDX
	MOV	EBX,4[EDX]
	MOV	[EBX],EAX
	MOV	[EAX],EDX
	MOV	4[EAX],EBX
	MOV	4[EDX],EAX
UECT_REMQUE:
	MOV	EBX,[EAX]
	MOV	EDX,4[EAX]
	MOV	[EDX],EBX
	MOV	4[EBX],EDX
UECT_INP:
	MOV	EDX,EAX
	XOR	EAX,EAX
	IN	AL,DX
UECT_OUTP:
	MOV	EDX,EAX
	POP	EAX
	OUT	DX,AL
UECT_REP_INSB:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_INSB
	POP	EDI
	POP	ECX
	POP	EBP
	ADD	ESP,8
UECT_REP_INSW:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_INSW
	POP	EDI
	POP	ECX
	POP	EBP
	ADD	ESP,8
UECT_REP_OUTSB:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	ESI
	MOV	ESI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_OUTSB
	POP	ESI
	POP	ECX
	POP	EBP
	ADD	ESP,8
UECT_REP_OUTSW:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	ESI
	MOV	ESI,EAX
	MOV	EDX,8[EBP]
	MOV	ECX,4[EBP]
	REP_OUTSW
	POP	ESI
	POP	ECX
	POP	EBP
	ADD	ESP,8
UECT_MEMCPY::
	PUSH	EAX
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	ESI
	PUSH	EDI
	MOV	EDI,4[EBP]
	MOV	ESI,8[EBP]
	MOV	ECX,12[EBP]
	OR	ECX,ECX
	JZ	@@1
	REP_MOVSB
@@1:	POP	EDI
	POP	ESI
	POP	ECX
	POP	EBP
	ADD	ESP,12
UECT_MEMSET::
	PUSH	EAX
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,4[EBP]
	MOV	ECX,12[EBP]
	MOV	EAX,8[EBP]
	OR	ECX,ECX
	JZ	@@2
	REP_STOSB
@@2:	POP	EDI
	POP	ECX
	POP	EBP
	ADD	ESP,12
UECT_INPW:
	MOV	EDX,EAX
	XOR	EAX,EAX
	IN	AX,DX
UECT_OUTPW:
	MOV	EDX,EAX
	POP	EAX
	OUT	DX,AX
UECT_PP_DWORD:
	INC	DWORD [EAX]
	MOV	EAX,DWORD [EAX]
UECT_PP_WORD:
	INC	WORD [EAX]
	MOVZX	EAX,WORD [EAX]
UECT_PP_BYTE:
	INC	BYTE [EAX]
	MOVZX	EAX,BYTE [EAX]
UECT_PP_short:
	INC	WORD [EAX]
	MOVSX	EAX,WORD [EAX]
UECT_PP_char:
	INC	BYTE [EAX]
	MOVSX	EAX,BYTE [EAX]
UECT_MM_DWORD:
	DEC	DWORD [EAX]
	MOV	EAX,DWORD [EAX]
UECT_MM_WORD:
	DEC	WORD [EAX]
	MOVZX	EAX,WORD [EAX]
UECT_MM_BYTE:
	DEC	BYTE [EAX]
	MOVZX	EAX,BYTE [EAX]
UECT_MM_short:
	DEC	WORD [EAX]
	MOVSX	EAX,WORD [EAX]
UECT_MM_char:
	DEC	BYTE [EAX]
	MOVSX	EAX,BYTE [EAX]
UECT_INPD:
	MOV	EDX,EAX
	IN	EAX,DX
UECT_OUTPD:
	MOV	EDX,EAX
	POP	EAX
	OUT	DX,EAX
UECT_ENTER:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,0x012345678
UECT_LEAVE:
	ADD	ESP,0x012345678
	POP	EBP
	RET
UECT_TYPE:
	PUSH	EAX
	MOV	EAX,0x12345678
UECT_DS:
	PUSH	EAX
	XOR	EAX,EAX
UECT_ADD_ESP8:
	ADD	ESP,0x12
UECT_DWORD_DISP32:
	PUSH	EAX
	MOV	EAX,DWORD 0x12345678[EBP]
UECT_WORD_DISP32:
	PUSH	EAX
	MOVZX	EAX,WORD 0x12345678[EBP]
UECT_BYTE_DISP32:
	PUSH	EAX
	MOVZX	EAX,BYTE 0x12345678[EBP]
UECT_DWORD_DISP8:
	PUSH	EAX
	MOV	EAX,DWORD 0x12[EBP]
UECT_WORD_DISP8:
	PUSH	EAX
	MOVZX	EAX,WORD 0x12[EBP]
UECT_BYTE_DISP8:
	PUSH	EAX
	MOVZX	EAX,BYTE 0x12[EBP]
UECT_CALL_INDIRECT:
	PUSH	EAX
	MOV	EAX,ESP
	CALL	DWORD 0x12345678[EAX]
UECT_BTC:
	MOV	EBX,EAX
	POP	EDX
	XOR	EAX,EAX
	BTC	DWORD [EBX],EDX
	ADC	EAX,0
UECT_QUESTION:
UECT_COLON:
	POP	EDX
	POP	EBX
	OR	EBX,EBX
	JZ	UECT_SKIPNZ
	MOV	EAX,EDX
UECT_SKIPNZ:
	OR	EAX,EAX
	JZ	UECT_STRING_CONSTANT
	DB	0xE9,01,02,03,04;
UECT_STRING_CONSTANT:
	PUSH	EAX
	MOV	EAX,0x12345678
UECT_CALL_INDIRECT2:
	PUSH	EAX
	CALL	DWORD [0x12345678]
UECT_GET_STACK_PTR:
	PUSH	EAX
	MOV	EAX,ESP
UECT_SET_STACK_PTR:
	MOV	ESP,EAX
UECT_GET_LABEL:
	PUSH	EAX
	MOV	EAX,0x12345678
UECT_GET_BASE_PTR:
	PUSH	EAX
	MOV	EAX,EBP
UECT_SET_BASE_PTR:
	MOV	EBP,EAX
UECT_ABSOLUTE_ADDRESS:
	PUSH	EAX
	MOV	EAX,0x12345678
UECT_SWITCH:
	POP	EBX
	ADD	ESP,4
	CMP	EBX,EAX
	JAE	UECT_OR_OR_SKIPZ
	JMP	DWORD 0x12345678[EBX*4]
UECT_OR_OR_SKIPZ:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JZ	UECT_OR_OR_SKIPZ
UECT_OR_OR_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JZ	DWORD FAR_AWAY
UECT_OR_OR_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JNZ	UECT_OR_OR_SKIPNZ
UECT_OR_OR_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	OR	EAX,EDX
	JNZ	DWORD FAR_AWAY
UECT_AND_AND_SKIPZ:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	@@AAZ1
	AND	EDX,EDX
@@AAZ1:	JZ	UECT_AND_AND_SKIPZ
UECT_AND_AND_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	@@AAZ2
	AND	EDX,EDX
@@AAZ2:	JZ	DWORD FAR_AWAY
UECT_AND_AND_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	UECT_AND_AND_SKIPNZ2
	AND	EDX,EDX
	JNZ	UECT_AND_AND_SKIPNZ
UECT_AND_AND_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	AND	EAX,EAX
	JZ	UECT_LESS_THAN_SKIPZ
	AND	EDX,EDX
	JNZ	DWORD FAR_AWAY
UECT_LESS_THAN_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JAE	UECT_LESS_THAN_SKIPZ
UECT_LESS_THAN_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JAE	DWORD FAR_AWAY
UECT_LESS_THAN_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JB	UECT_LESS_THAN_SKIPNZ
UECT_LESS_THAN_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JB	DWORD FAR_AWAY
UECT_GREATER_THAN_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JBE	UECT_GREATER_THAN_SKIPZ
UECT_GREATER_THAN_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JBE	DWORD FAR_AWAY
UECT_GREATER_THAN_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JA	UECT_GREATER_THAN_SKIPNZ
UECT_GREATER_THAN_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JA	DWORD FAR_AWAY
UECT_EQUAL_EQUAL_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	UECT_EQUAL_EQUAL_SKIPZ
UECT_EQUAL_EQUAL_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	DWORD FAR_AWAY
UECT_EQUAL_EQUAL_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	UECT_EQUAL_EQUAL_SKIPNZ
UECT_EQUAL_EQUAL_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	DWORD FAR_AWAY
UECT_NOT_EQUAL_TO_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	UECT_NOT_EQUAL_TO_SKIPZ
UECT_NOT_EQUAL_TO_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JE	DWORD FAR_AWAY
UECT_NOT_EQUAL_TO_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	UECT_NOT_EQUAL_TO_SKIPNZ
UECT_NOT_EQUAL_TO_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JNE	DWORD FAR_AWAY
UECT_GREATER_OR_EQUAL_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JB	UECT_GREATER_OR_EQUAL_SKIPZ
UECT_GREATER_OR_EQUAL_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JB	DWORD FAR_AWAY
UECT_GREATER_OR_EQUAL_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JAE	UECT_GREATER_OR_EQUAL_SKIPNZ
UECT_GREATER_OR_EQUAL_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JAE	DWORD FAR_AWAY
UECT_LESS_OR_EQUAL_SKIPZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JA	UECT_LESS_OR_EQUAL_SKIPZ
UECT_LESS_OR_EQUAL_SKIPZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JA	DWORD FAR_AWAY
UECT_LESS_OR_EQUAL_SKIPNZ:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JBE	UECT_LESS_OR_EQUAL_SKIPNZ
UECT_LESS_OR_EQUAL_SKIPNZ2:
	POP	EDX
	ADD	ESP,4
	CMP	EDX,EAX
	JBE	DWORD FAR_AWAY
UECT_SHORT_JMP:
	JMP	UECT_SHORT_JMP
UECT_JMP:
	JMP	DWORD FAR_AWAY
UECT_BSF:
	BSF	EAX,EAX
	JNZ	UECT_BSR
	NOT	EAX
UECT_BSR:
	BSR	EAX,EAX
	JNZ	UECT_FILD
	NOT	EAX
UECT_FILD:
	FILD	DWORD [EAX]
UECT_FISTP:
	FISTP	DWORD [EAX]
UECT_FLD:
	FLD	DWORD [EAX]
UECT_FSTP:
	FSTP	DWORD [EAX]
UECT_FYL2X:
	PUSH	EAX
	FYL2X
UECT_FABS:
	PUSH	EAX
	FABS
UECT_FCHS:
	PUSH	EAX
	FCHS
UECT_FSIN:
	PUSH	EAX
	FSIN
UECT_FCOS:
	PUSH	EAX
	FCOS
UECT_FPTAN:
	PUSH	EAX
	FPTAN
UECT_FPATAN:
	PUSH	EAX
	FPATAN
UECT_FSQRT:
	PUSH	EAX
	FSQRT
UECT_FMULP:
	PUSH	EAX
	FMULP
UECT_FDIVP:
	PUSH	EAX
	FDIVP
UECT_FDIVRP:
	PUSH	EAX
	FDIVRP
UECT_FADDP:
	PUSH	EAX
	FADDP
UECT_FSUBP:
	PUSH	EAX
	FSUBP
UECT_FSUBRP:
	PUSH	EAX
	FSUBRP
UECT_AND_EQUAL_DWORD:
	POP	EBX
	AND	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
UECT_AND_EQUAL_WORD:
	POP	EBX
	AND	WORD [EBX],AX
	MOVZX	EAX,WORD [EBX]
UECT_AND_EQUAL_BYTE:
	POP	EBX
	AND	BYTE [EBX],AL
	MOVZX	EAX,BYTE [EBX]
UECT_AND_EQUAL_short:
	POP	EBX
	AND	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
UECT_AND_EQUAL_char:
	POP	EBX
	AND	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
UECT_OR_EQUAL_DWORD:
	POP	EBX
	OR	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
UECT_OR_EQUAL_WORD:
	POP	EBX
	OR	WORD [EBX],AX
	MOVZX	EAX,WORD [EBX]
UECT_OR_EQUAL_BYTE:
	POP	EBX
	OR	BYTE [EBX],AL
	MOVZX	EAX,BYTE [EBX]
UECT_OR_EQUAL_short:
	POP	EBX
	OR	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
UECT_OR_EQUAL_char:
	POP	EBX
	OR	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
UECT_XOR_EQUAL_DWORD:
	POP	EBX
	XOR	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
UECT_XOR_EQUAL_WORD:
	POP	EBX
	XOR	WORD [EBX],AX
	MOVZX	EAX,WORD [EBX]
UECT_XOR_EQUAL_BYTE:
	POP	EBX
	XOR	BYTE [EBX],AL
	MOVZX	EAX,BYTE [EBX]
UECT_XOR_EQUAL_short:
	POP	EBX
	XOR	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
UECT_XOR_EQUAL_char:
	POP	EBX
	XOR	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
UECT_ADD_EQUAL_DWORD:
	POP	EBX
	ADD	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
UECT_ADD_EQUAL_WORD:
	POP	EBX
	ADD	WORD [EBX],AX
	MOVZX	EAX,WORD [EBX]
UECT_ADD_EQUAL_BYTE:
	POP	EBX
	ADD	BYTE [EBX],AL
	MOVZX	EAX,BYTE [EBX]
UECT_ADD_EQUAL_short:
	POP	EBX
	ADD	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
UECT_ADD_EQUAL_char:
	POP	EBX
	ADD	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
UECT_SUB_EQUAL_DWORD:
	POP	EBX
	SUB	DWORD [EBX],EAX
	MOV	EAX,DWORD [EBX]
UECT_SUB_EQUAL_WORD:
	POP	EBX
	SUB	WORD [EBX],AX
	MOVZX	EAX,WORD [EBX]
UECT_SUB_EQUAL_BYTE:
	POP	EBX
	SUB	BYTE [EBX],AL
	MOVZX	EAX,BYTE [EBX]
UECT_SUB_EQUAL_short:
	POP	EBX
	SUB	WORD [EBX],AX
	MOVSX	EAX,WORD [EBX]
UECT_SUB_EQUAL_char:
	POP	EBX
	SUB	BYTE [EBX],AL
	MOVSX	EAX,BYTE [EBX]
UECT_MUL_EQUAL_DWORD:
	POP	EBX
	MOV	EDX,DWORD [EBX]
	MUL	EDX
	MOV	DWORD [EBX],EAX
UECT_MUL_EQUAL_WORD:
	POP	EBX
	MOVZX	EDX,WORD [EBX]
	MUL	EDX
	MOV	WORD [EBX],AX
UECT_MUL_EQUAL_BYTE:
	POP	EBX
	MOVZX	EDX,BYTE [EBX]
	MUL	EDX
	MOV	BYTE [EBX],AL
UECT_MUL_EQUAL_short:
	POP	EBX
	MOVSX	EDX,WORD [EBX]
	IMUL	EDX
	MOV	WORD [EBX],AX
UECT_MUL_EQUAL_char:
	POP	EBX
	MOVSX	EDX,BYTE [EBX]
	IMUL	EDX
	MOV	BYTE [EBX],AL
UECT_DIV_EQUAL_DWORD:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOV	EAX,DWORD [EBX]
	XOR	EDX,EDX
	DIV	ECX
	MOV	DWORD [EBX],EAX
	POP	ECX
UECT_DIV_EQUAL_WORD:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOVZX	EAX,WORD [EBX]
	XOR	EDX,EDX
	DIV	ECX
	MOV	WORD [EBX],AX
	POP	ECX
UECT_DIV_EQUAL_BYTE:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOVZX	EAX,BYTE [EBX]
	XOR	EDX,EDX
	DIV	ECX
	MOV	BYTE [EBX],AL
	POP	ECX
UECT_DIV_EQUAL_short:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOVSX	EAX,WORD [EBX]
	XOR	EDX,EDX
	DIV	ECX
	MOV	WORD [EBX],AX
	POP	ECX
UECT_DIV_EQUAL_char:
	POP	EBX
	PUSH	ECX
	MOV	ECX,EAX
	MOVSX	EAX,BYTE [EBX]
	XOR	EDX,EDX
	DIV	ECX
	MOV	BYTE [EBX],AL
	POP	ECX
UECT_SHL_EQUAL_DWORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHL	DWORD [EBX],CL
	POP	ECX
	MOV	EAX,DWORD [EBX]
UECT_SHL_EQUAL_WORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHL	WORD [EBX],CL
	POP	ECX
	MOVZX	EAX,WORD [EBX]
UECT_SHL_EQUAL_BYTE:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHL	BYTE [EBX],CL
	POP	ECX
	MOVZX	EAX,BYTE [EBX]
UECT_SHL_EQUAL_short:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHL	WORD [EBX],CL
	POP	ECX
	MOVSX	EAX,WORD [EBX]
UECT_SHL_EQUAL_char:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHL	BYTE [EBX],CL
	POP	ECX
	MOVSX	EAX,BYTE [EBX]
UECT_SHR_EQUAL_DWORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHR	DWORD [EBX],CL
	POP	ECX
	MOV	EAX,DWORD [EBX]
UECT_SHR_EQUAL_WORD:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHR	WORD [EBX],CL
	POP	ECX
	MOVZX	EAX,WORD [EBX]
UECT_SHR_EQUAL_BYTE:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHR	BYTE [EBX],CL
	POP	ECX
	MOVZX	EAX,BYTE [EBX]
UECT_SHR_EQUAL_short:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHR	WORD [EBX],CL
	POP	ECX
	MOVSX	EAX,WORD [EBX]
UECT_SHR_EQUAL_char:
	POP	EBX
	PUSH	ECX
	MOV	CL,AL
	SHR	BYTE [EBX],CL
	POP	ECX
	MOVSX	EAX,BYTE [EBX]
UECT_TABLE_END:

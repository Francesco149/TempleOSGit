ZEROS:: DD	0,0;
ROOT_STARTUP_MSG::
	DB  "HOPPY OS",13,10,0;
////**************************PROCEDURE*************************
// IN:	 ESI=NAME
// OUT:  EDI=NEW_STRING
	ALIGN	4,0x90
LOAD_TEXT_FILE::
	PUSH	EAX
	PUSH	EBX
	PUSH	ECX
	PUSH	ESI
	MOV	EDI,DWORD [SYS_HASH_TABLE]
	MOV	EBX,HTT_FILE
	CALL	FIND_HASH_ENTRY
	JNZ	@@50

	POP	ESI
	PUSH	ESI
	PUSH	0
	PUSH	ESI
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	EXT_READ_FILE*4[EAX]
	ADD	ESP,8
	OR	EAX,EAX
	JZ	@@60
	MOV	EDI,EAX
	JMP	@@80

@@50:	MOV	ESI,DWORD HTE_USER0[ESI]
	CALL	NEW_STRING
	JMP	@@80
@@60:	MOV	EAX,ST_FILE_NOT_FOUND
	INT	I_PUT_SYSTEXT
	LEA	ESI,DWORD [ZEROS]
	CALL	NEW_STRING
@@80:	POP	ESI
	POP	ECX
	POP	EBX
	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 [ESI]
// OUT:  EAX=COUNT
	ALIGN	4,0x90
STRLEN::
	PUSH	ESI	//-****
@@1:	LODSB
	OR	AL,AL
	JNZ	@@1
	MOV	EAX,ESI
	POP	ESI	//+****
	SUB	EAX,ESI
	DEC	EAX
	RET

////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_STRCAT::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM1[EBP]
@@2:	LODSB
	OR	AL,AL
	JNZ	@@2
	MOV	EDI,ESI
	DEC	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
@@1:	LODSB
	STOSB
	OR	AL,AL
	JNZ	@@1
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_STRCPY::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
	MOV	EDI,DWORD SF_PARAM1[EBP]
@@1:	LODSB
	STOSB
	OR	AL,AL
	JNZ	@@1
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_STRCMP::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
	MOV	EDI,DWORD SF_PARAM1[EBP]
@@1:	LODSB
	OR	AL,AL
	JZ	@@100
	SCASB
	JE	@@1
	JA	@@90
@@80:	MOV	EAX,1
	JMP	@@101
@@90:	MOV	EAX,-1
	JMP	@@101
@@100:	SCASB
	JNE	@@80
	XOR	EAX,EAX
@@101:	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_STRSTR::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	PUSH	ECX
	MOV	ESI,DWORD SF_PARAM1[EBP]
	MOV	EDI,DWORD SF_PARAM2[EBP]
	MOV	AH,BYTE [EDI]
	OR	AH,AH
	JZ	@@90
	JMP	@@5
@@1:	INC	ESI
@@5:	LODSB
	OR	AL,AL
	JZ	@@100
	CMP	AL,AH
	JNE	@@5
	DEC	ESI
	MOV	ECX,1
@@10:	MOV	AL,BYTE [EDI+ECX]
	OR	AL,AL
	JZ	@@90
	CMP	AL,BYTE [ESI+ECX]
	JNE	@@1
	INC	ECX
	JMP	@@10

@@80:	DEC	ESI
@@90:	MOV	EAX,ESI
	JMP	@@101
@@100:	XOR	EAX,EAX
@@101:	POP	ECX
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
TO_UPPER::
	CMP	AL,'a'
	JB	@@100
	CMP	AL,'z'
	JA	@@100
	ADD	AL,'A'-'a'
@@100:	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_STRISTR::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	PUSH	EBX
	PUSH	ECX
	MOV	ESI,DWORD SF_PARAM1[EBP]
	MOV	EDI,DWORD SF_PARAM2[EBP]
	MOV	AL,BYTE [EDI]
	CALL	TO_UPPER
	MOV	AH,AL
	OR	AH,AH
	JZ	@@90
	JMP	@@5
@@1:	INC	ESI
@@5:	LODSB
	CALL	TO_UPPER
	OR	AL,AL
	JZ	@@100
	CMP	AL,AH
	JNE	@@5
	DEC	ESI
	MOV	ECX,1
@@10:	MOV	AL,BYTE [EDI+ECX]
	CALL	TO_UPPER
	OR	AL,AL
	JZ	@@90
	MOV	BL,BYTE [ESI+ECX]
	XCHG	AL,BL
	CALL	TO_UPPER
	CMP	AL,BL
	JNE	@@1
	INC	ECX
	JMP	@@10

@@80:	DEC	ESI
@@90:	MOV	EAX,ESI
	JMP	@@101
@@100:	XOR	EAX,EAX
@@101:	POP	ECX
	POP	EBX
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_ATOI::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	MOV	ESI,DWORD SF_PARAM1[EBP]
	XOR	EBX,EBX
	XOR	EAX,EAX
@@1:	LODSB
	SUB	AL,'0'
	CMP	AL,9
	JA	@@100
	IMUL2	EBX,10
	ADD	EBX,EAX
	JMP	@@1
@@100:	MOV	EAX,EBX
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
// IN:	 [ESI]
// OUT:  EDI
	ALIGN	4,0x90
NEW_STRING::
	PUSH	EAX	//-****
	PUSH	ECX	//-****

	CALL	STRLEN
	INC	EAX
	PUSH	EAX	//-****
	PUSH	ESI	//-****
	CALL	MALLOC
	MOV	EDI,ESI
	POP	ESI	//+****
	POP	ECX	//+****

	PUSH	ESI	//-****
	PUSH	EDI	//-****
	REP_MOVSB
	POP	EDI	//+****
	POP	ESI	//+****

	POP	ECX	//+****
	POP	EAX	//+****
	RET
////**************************PROCEDURE*************************
// IN:	 ESI+EDI, FREE's 1st string
// OUT:  ESI
	ALIGN	4,0x90
ADDS::
	PUSH	EAX	//-****
	PUSH	EBX	//-****
	PUSH	ECX	//-****
	PUSH	EDX	//-****
	PUSH	EBP	//-****
	MOV	EBX,ESI //EBX=1st string
	MOV	EDX,EDI //EDX=2nd string

	CALL	STRLEN
	MOV	ECX,EAX //ECX=1st strlen
	MOV	ESI,EDX
	CALL	STRLEN
	INC	EAX
	PUSH	EAX	//-**** STack has 2nd strlen+1

	ADD	EAX,ECX
	CALL	MALLOC
	MOV	EDI,ESI
	MOV	EBP,ESI //EBP=Result

	MOV	ESI,EBX
	REP_MOVSB   //Copy 1st string
	POP	ECX	//+****
	MOV	ESI,EDX
	REP_MOVSB   //Copy 2nd string

	MOV	ESI,EBX
	CALL	FREE	//Free 1st string

	MOV	ESI,EBP
	MOV	EDI,EDX
	POP	EBP	//+****
	POP	EDX	//+****
	POP	ECX	//+****
	POP	EBX	//+****
	POP	EAX	//+****
	RET
////**************************PROCEDURE*************************
// IN:	 [ESI]
// OUT:  EAX
	ALIGN	4,0x90
HASH_STRING::
	PUSH	ESI	//-****
	PUSH	EBX	//-****
	PUSH	ECX	//-****
	XOR	EAX,EAX
	XOR	EBX,EBX
@@1:	LODSB
	OR	AL,AL
	JZ	@@100
	SHL	EBX,1
	ADC	EBX,EAX
	JMP	@@1

@@100:	MOV	CL,16
	MOV	EAX,EBX
	SHR	EBX,CL
	ADC	EAX,EBX
	POP	ECX	//+****
	POP	EBX	//+****
	POP	ESI	//+****
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=SIZE
// OUT:  [EDI]=TABLE
	ALIGN	4,0x90
NEW_HASH_TABLE::
	PUSH	EAX	//-****
	PUSH	ECX	//-****
	PUSH	ESI	//-****
	MOV	ECX,EAX
	LEA	EAX,DWORD HT_BODY[EAX*4]
	CALL	MALLOC
	MOV	DWORD HT_MASK[ESI],ECX
	DEC	DWORD HT_MASK[ESI]
	MOV	EDI,ESI
	MOV	DWORD HT_NEXT[EDI],0

	PUSH	EDI	//+****
	XOR	EAX,EAX
	LEA	EDI,DWORD HT_BODY[EDI]
	REP_STOSD
	POP	EDI	//+****

	POP	ESI	//+****
	POP	ECX	//+****
	POP	EAX	//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_DELETE_HASH_TABLE::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EDI
	PUSH	ECX
	MOV	EDI,DWORD SF_PARAM1[EBP]
	MOV	ECX,DWORD HT_MASK[EDI]
	INC	ECX
	LEA	EDI,DWORD HT_BODY[EDI]
@@1:	MOV	ESI,DWORD [EDI]
	ADD	EDI,4
	OR	ESI,ESI
	JZ	@@10
@@2:	PUSH	DWORD HTE_NEXT[ESI]
	PUSH	ESI
	MOV	ESI,DWORD HTE_STRING[ESI]
	CALL	FREE
	POP	ESI
	CALL	FREE
	POP	ESI
	OR	ESI,ESI
	JNZ	@@2
@@10:	LOOP	@@1
	MOV	ESI,DWORD SF_PARAM1[EBP]
	CALL	FREE
	POP	ECX
	POP	EDI
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
// IN:	 [ESI]=STRING
//	 EBX=TYPE MASK
//	 [EDI]=TABLE
// OUT:  [ESI]=ENTRY OR ZERO NOT FOUND
//	 ZERO FLAG SET NOT FOUND
//	 EAX=INDEX
	ALIGN	4,0x90
FIND_HASH_ENTRY::
	PUSH	EDX	//-****
	PUSH	EDI	//-****
	MOV	EDX,ESI
	CALL	HASH_STRING
@@4:	PUSH	EAX	//-****
	AND	EAX,DWORD HT_MASK[EDI]
	LEA	ESI,DWORD HT_BODY[EDI]
	MOV	ESI,DWORD[ESI+EAX*4]
@@1:	OR	ESI,ESI
	JNZ	@@3
	MOV	EDI,DWORD HT_NEXT[EDI]
	OR	EDI,EDI
	JZ	@@100
	POP	EAX
	JMP	@@4

@@3:	MOV	EAX,DWORD HTE_TYPE[ESI]
	AND	EAX,EBX
	JE	@@90
	PUSH	ESI	//-****
	PUSH	EDI	//-****
	MOV	EDI,DWORD HTE_STRING[ESI]
	MOV	ESI,EDX
@@2:	LODSB
	MOV	AH,BYTE [EDI]
	INC	EDI
	CMP	AL,AH
	JNE	@@80
	OR	AL,AL
	JNZ	@@2
	POP	EDI	//+****
	POP	ESI	//+****
	JMP	@@100

@@80:	POP	EDI	//+****
	POP	ESI	//+****

@@90:	MOV	ESI,DWORD HTE_NEXT[ESI]
	JMP	@@1

@@100:	POP	EAX	//+****
	AND	EAX,DWORD HT_MASK[EDI]
	POP	EDI	//+****
	POP	EDX	//+****
	OR	ESI,ESI
	RET
////**************************PROCEDURE*************************
// IN:	 ES:[ESI]=STRING
//	 [EDI]=TABLE
// OUT:  [ESI]=BUCKET
	ALIGN	4,0x90
FIND_HASH_BUCKET::
	PUSH	EAX
	CALL	HASH_STRING
	AND	EAX,DWORD HT_MASK[EDI]
	LEA	ESI,DWORD HT_BODY[EDI+EAX*4]
	POP	EAX
	RET
////**************************PROCEDURE*************************
// OUT:  ESI=STRING TABLE
	ALIGN	4,0x90
INIT_SYSTEXT_AND_EXTERNS::
	MOV	EAX,EXT_TABLE_SIZE*4
	CALL	RMALLOC
	MOV	DWORD [SYS_EXTERN_TABLE],ESI
	MOV	EDI,ESI
	MOV	ECX,EXT_TABLE_SIZE
	XOR	EAX,EAX
	REP_STOSD
	MOV	EAX,ST_TABLE_SIZE*4
	CALL	RMALLOC
	MOV	DWORD [SYS_STRING_TABLE],ESI
	MOV	EDI,ESI
	MOV	ECX,ST_TABLE_SIZE
	XOR	EAX,EAX
	REP_STOSD
	MOV	EAX,ST_ROOT_STARTUP
	MOV	DWORD [ESI+EAX*4],ROOT_STARTUP_MSG
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PUT_SYSTEXT::
	PUSH	ESI
	MOV	ESI,DWORD FS:[TSS_STRING_TABLE]
	MOV	ESI,DWORD [ESI+EAX*4]
	OR	ESI,ESI
	JZ	@@10
@@1:	LODSB
	OR	AL,AL
	JZ	@@2
	INT	I_PUT_CHAR
	JMP	@@1
@@10:	PUSH	EAX
	MOV	AL,'M'
	INT	I_PUT_CHAR
	POP	EAX
	CALL	PUT_HEX
	CALL	SPACE
@@2:	POP	ESI
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CRLF::
	PUSH	EAX
	MOV	EAX,13
	INT	I_PUT_CHAR
	MOV	EAX,10
	INT	I_PUT_CHAR
	POP	EAX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
SPACE::
	PUSH	EAX
	MOV	EAX,32
	INT	I_PUT_CHAR
	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 ECX=COUNT
	ALIGN	4,0x90
SPACES::
	OR	ECX,ECX
	JZ	@@100
	PUSH	EAX
	PUSH	ECX
	MOV	EAX,32
@@1:	INT	I_PUT_CHAR
	LOOP	@@1
	POP	ECX
	POP	EAX
@@100:	RET
////**************************PROCEDURE*************************
// IN:	 ECX=COUNT
	ALIGN	4,0x90
CMD_SPACES::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ECX
	MOV	ECX,DWORD SF_PARAM1[EBP]
	CALL	SPACES
	POP	ECX
	POP	EBP
@@100:	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LOADSTR::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDX
	PUSH	ESI
	PUSH	EDI
	MOV	EDX,DWORD SF_PARAM1[EBP]
	MOV	ESI,DWORD SF_PARAM2[EBP]
	CALL	NEW_STRING
	MOV	ESI,DWORD FS:[TSS_STRING_TABLE]
	MOV	DWORD [ESI+EDX*4],EDI
	POP	EDI
	POP	ESI
	POP	EDX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LOADLIST::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	ESI
	PUSH	EDI
	MOV	EDX,DWORD SF_PARAM1[EBP]
	MOV	ESI,DWORD SF_PARAM2[EBP]
	XOR	ECX,ECX
@@1:	MOV	AX,WORD [ESI+ECX]
	OR	AX,AX
	JZ	@@50
	INC	ECX
	JMP	@@1
@@50:	ADD	ECX,2
	MOV	EAX,ECX
	CALL	MALLOC
	MOV	EDI,ESI
	PUSH	EDI
	MOV	ESI,DWORD SF_PARAM2[EBP]
	REP_MOVSB
	POP	EDI
	MOV	ESI,DWORD FS:[TSS_STRING_TABLE]
	MOV	DWORD [ESI+EDX*4],EDI
	POP	EDI
	POP	ESI
	POP	EDX
	POP	ECX
	POP	EAX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_DEFINE_EXTERN::
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	MOV	EBX,DWORD SF_PARAM1[EBP]
	OR	EBX,EBX
	JZ	@@5
	CMP	EBX,EXT_TABLE_SIZE
	JB	@@10
@@5:	MOV	EAX,ST_INVALID_EXTERN_NUMBER
	INT	I_PUT_SYSTEXT
	RET

@@10:	LEA	EBX,DWORD [EAX+EBX*4]
	MOV	EAX,DWORD SF_PARAM2[EBP]
	MOV	DWORD [EBX],EAX
	POP	EBP
	RET
	END

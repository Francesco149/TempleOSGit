	ALIGN 4,0x90
ALPHA_BITMAP::		DD	0x0000000,0x00000000,0x87FFFFFF,0x07FFFFFE;
			DD	0,0,0,0;
ALPHA_NUMERIC_BITMAP::	DD	0x0000000,0x03FF0000,0x87FFFFFF,0x07FFFFFE;
			DD	0,0,0,0;
DEC_NUMERIC_BITMAP::	DD	0x0000000,0x03FF0000,0,0;
			DD	0,0,0,0;
HEX_NUMERIC_BITMAP::	DD	0x0000000,0x03FF0000,0x7E,0x7E;
			DD	0,0,0,0;

DUEL_CHAR_TOKENS1::
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0F3D,0x0000,0x0000,0x0000,0x0000,0x0826,0x0000;
	DW	0x0000,0x0000,0x0000,0x102B,0x0000,0x0E3E,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x123A,0x0000,0x053D,0x063D,0x073D,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x097C,0x0000,0x0000,0x0000;
DUEL_CHAR_TOKENS2::
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x112D,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0B3C,0x0000,0x0C3E,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;
	DW	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000;


////**************************PROCEDURE*************************
// IN:	 ESI=BUFFER
//	 EDX=FLAGS
// OUT:  EDI=LEX_NODE
	ALIGN	4,0x90
NEW_LEX::
	PUSH	EAX	//-****
	PUSH	ECX	//-****

	PUSH	ESI	//-****
	MOV	EAX,LEX_STRUCT_SIZE
	CALL	MALLOC
	MOV	EDI,ESI
	MOV	ECX,LEX_STRUCT_SIZE/4
	XOR	EAX,EAX
	REP_STOSD
	MOV	EDI,ESI

	MOV	ESI,DWORD FS:[TSS_HASH_TABLE]
	MOV	DWORD LEX_HASH_TABLE_LIST[EDI],ESI
	MOV	DWORD LEX_DEFINE_HASH_TABLE[EDI],ESI
	LEA	ESI,DWORD LEX_LFNS[EDI]
	MOV	DWORD LEX_CUR_LFN[EDI],ESI
	LEA	ESI,DWORD LEX_STACK[EDI]
	MOV	DWORD LEX_STACK_PTR[EDI],ESI
	POP	ESI	//+****
	MOV	DWORD LEX_FLAGS[EDI],EDX
	TEST	DWORD LEX_FLAGS[EDI],LF_PROMPT
	JZ	@@10
	MOV	EAX,256
	CALL	MALLOC
	MOV	DWORD [ESI],0
@@10:	MOV	DWORD LEX_LFNS+LFN_BUFFER[EDI],ESI
	MOV	DWORD LEX_LFNS+LFN_BUF_PTR[EDI],ESI
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],ESI
	MOV	DWORD LEX_LFNS+LFN_LINE_NUM[EDI],1
	MOV	DWORD [PROGRESS1],0

	POP	ECX	//+****
	POP	EAX	//+****
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
	ALIGN	4,0x90
DELETE_LEX::
	PUSH	EAX	//-****
	PUSH	ECX	//-****
	PUSH	ESI	//-****

	TEST	DWORD LEX_FLAGS[EDI],LF_DONT_FREE_BUFFER
	JZ	@@10
	MOV	DWORD LEX_LFNS+LFN_BUFFER[EDI],0

@@10:	MOV	ECX,LFN_COUNT
	LEA	EAX,DWORD LEX_LFNS[EDI]
@@1:	MOV	ESI,DWORD LFN_BUFFER[EAX]
	CALL	FREE
	MOV	ESI,DWORD LFN_NAME[EAX]
	CALL	FREE
	LOOP	@@1

	MOV	ESI,DWORD LEX_IDENT[EDI]
	CALL	FREE
	MOV	ESI,EDI
	CALL	FREE
	MOV	DWORD [PROGRESS1],0
	POP	ESI	//+****
	POP	ECX	//+****
	POP	EAX	//+****
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
	ALIGN	4,0x90
PUT_TOKEN::
	PUSH	EAX
	PUSH	ESI
	MOV	AL,'"'
	INT	I_PUT_CHAR
	MOV	EAX,DWORD LEX_TOKEN[EDI]
	CMP	EAX,TK_IDENT
	JE	@@10
	CMP	EAX,TK_STRING
	JNE	@@20
@@10:	MOV	ESI,DWORD LEX_IDENT[EDI]
	CALL	PUT_STRING
	JMP	@@100
@@20:	CMP	EAX,TK_INTEGER
	JNE	@@40
	MOV	EAX,DWORD LEX_CUR_I[EDI]
	CALL	PUT_HEX
	JMP	@@100
@@40:	INT	I_PUT_CHAR
@@100:	MOV	AL,'"'
	INT	I_PUT_CHAR
	CALL	SPACE
	POP	ESI
	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
// OUT:  EAX=CHAR
//	 ZERO FLAG SET ON EOF
	ALIGN	4,0x90
LEX_GET_CHAR::
	TEST	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
	JZ	@@1
	MOV	EAX,DWORD LEX_LAST_CHAR[EDI]
	AND	LEX_FLAGS[EDI],-1-LF_USE_LAST_CHAR
	OR	EAX,EAX
	RET

@@1:	PUSH	ESI
	MOV	ESI,DWORD LEX_CUR_BUF_PTR[EDI]
	MOVZX	EAX,BYTE [ESI]
	INC	ESI
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],ESI
	POP	ESI
	MOV	DWORD LEX_LAST_CHAR[EDI],EAX
	BT	DWORD FS:[TSS_TASK_FLAGS],TSSF_ECHO
	JNC	@@2
	INT	I_PUT_CHAR
@@2:	CMP	EAX,10
	JNE	@@2A
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD LEX_CUR_LFN[EDI]
	INC	DWORD LFN_LINE_NUM[ESI]
	INC	DWORD [PROGRESS1]
	MOV	EDI,DWORD LEX_CUR_BUF_PTR[EDI]
	MOV	DWORD LFN_CUR_LINE_START[ESI],EDI
	POP	EDI
	POP	ESI
@@2A:	OR	EAX,EAX
	JZ	@@3
	RET
@@3:	PUSH	ESI
	PUSH	EDI
	LEA	ESI,DWORD LEX_LFNS[EDI]
	MOV	EDI,DWORD LEX_CUR_LFN[EDI]
	CMP	ESI,EDI
	JE	@@10
	MOV	ESI,DWORD LFN_BUFFER[EDI]
	CALL	FREE
	MOV	DWORD LFN_BUFFER[EDI],0
	MOV	ESI,LFN_NAME[EDI]
	CALL	FREE
	MOV	DWORD LFN_NAME[EDI],0
	POP	ESI
	SUB	EDI,LFN_STRUCT_SIZE
	MOV	EAX,DWORD LFN_BUF_PTR[EDI]
	MOV	DWORD LEX_CUR_BUF_PTR[ESI],EAX
	MOV	DWORD LEX_CUR_LFN[ESI],EDI
	MOV	EDI,ESI
	POP	ESI
	JMP	@@1

@@10:	POP	EDI
	POP	ESI
	TEST	DWORD LEX_FLAGS[EDI],LF_PROMPT
	JNZ	@@11
	MOV	DWORD LEX_LAST_CHAR[EDI],EAX
	OR	EAX,EAX
	RET

@@11:	PUSH	EAX
	PUSH	ESI
	MOV	EAX,DWORD FS:[TSS_CURRENT_PARTITION]
	ADD	EAX,'A'
	INT	I_PUT_CHAR
	MOV	EAX,':'
	INT	I_PUT_CHAR
	MOV	ESI,DWORD FS:[TSS_CURRENT_DIRECTORY]
	OR	ESI,ESI
	JZ	@@11A
	CALL	PUT_STRING
@@11A:	MOV	EAX,'>'
	INT	I_PUT_CHAR
	POP	ESI
	POP	EAX

	PUSH	ECX
	MOV	ECX,DWORD LEX_LFNS+LFN_BUFFER[EDI]
	MOV	DWORD LEX_LFNS+LFN_BUF_PTR[EDI],ECX
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],ECX
	PUSH	EDI		//-****
	PUSH	DWORD LEX_FLAGS[EDI]  //-****
	MOV	EDI,ECX

	PUSH	ESI		//-****
	MOV	ESI,DWORD FS:[TSS_CURRENT_LTF]
	OR	ESI,ESI
	JZ	DWORD @@20
	PUSH	EAX			//-****
	PUSH	EBX			//-****
	PUSH	EDX			//-****
@@21:	BT	WORD FS:[TSS_TASK_FLAGS],TSSF_FOCUS
	JNC	@@21Z
	BTR	DWORD [SYS_CURRENT_SCAN_CODE],SCF_NEW_KEY
	JC	@@21G
@@21Z:	CALL	SWAP_IN_NEXT
	JMP	@@21
@@21G:	CALL	TRANSLATE_SCAN_CODE
	PUSH	EAX			//-****

	PUSH	DWORD [SYS_CURRENT_SCAN_CODE]
	PUSH	EAX
	PUSH	DWORD FS:[TSS_CURRENT_LTF]
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_LTF_PUTCHAR*4[EAX]
	ADD	ESP,12

	CMP	EAX,9999   		//COPY "FUNCTION TEXT"
	JNE	@@21A
	PUSH	ECX			//-****
	MOV	ESI,DWORD FS:[TSS_CURRENT_LTF]
	MOV	ESI,DWORD LTF_MENU_LTF[ESI]
	MOV	ESI,DWORD LTF_CUR_LINE[ESI]
	MOV	ESI,DWORD LTFL_LINE_DATA[ESI]
	MOV	ECX,5					//SKIP "9999 "
@@21B:	LODSB
	OR	AL,AL
	JZ	@@21A
	LOOP	@@21B
	POP	ECX			//+****
@@21C:	LODSB
	AND	EAX,0xFF
	JZ	@@21A
	PUSH	0		//SCAN CODE
	PUSH	EAX
	PUSH	DWORD FS:[TSS_CURRENT_LTF]
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_LTF_PUTCHAR*4[EAX]
	ADD	ESP,12
	JMP	@@21C

@@21A:	POP	EAX			//+****
	CMP	AL,13
	JNE	DWORD @@21
	MOV	ESI,DWORD FS:[TSS_CURRENT_LTF]
	MOV	ESI,DWORD LTF_CUR_LINE[ESI]
	MOV	ESI,DWORD LTFL_LAST[ESI]
	MOV	ESI,DWORD LTFL_LINE_DATA[ESI]

	PUSH	ESI
@@24:	LODSB		//Skip to Prompt
	OR	AL,AL
	JZ	@@23
	CMP	AL,'>'
	JNE	@@24
	ADD	ESP,4
	JMP	@@22
	JMP	@@24
@@23:	POP	ESI

@@22:	LODSB
	STOSB
	OR	AL,AL
	JNZ	@@22

	POP	EDX			//+****
	POP	EBX			//+****
	POP	EAX			//+****
	POP	ESI			//+****
	JMP	@@30

@@20:	POP	ESI			//+****
	MOV	ECX,79
	CALL	GET_STRING
@@30:	DEC	EDI	//BACK-UP TO ZERO
	POP	EAX		//+****
	TEST	EAX,LF_DOUBLE_SEMICOLON
	JE	@@15
	DEC	EDI
	MOV	AL,BYTE [EDI]
	CMP	AL,';'
	JNE	@@14
	MOV	AX,0x3B3B     //';;'
	STOSW
	JMP	@@15
@@14:	INC	EDI
@@15:	MOV	EAX,0xA0D
	STOSD
	MOV	EDI,DWORD FS:[TSS_CURRENT_LTF]
	OR	EDI,EDI
	JNZ	@@16
	CALL	CRLF
@@16:	POP	EDI	//+****
	POP	ECX	//+****
	JMP	DWORD @@1
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
//	 ESI=INCLUDE FILENAME
	ALIGN	4,0x90
LEX_INCLUDE::
	PUSH	EAX
	PUSH	EBX
	PUSH	ESI			//-****
	PUSH	EDI			//-****
	CALL	LOAD_TEXT_FILE
	MOV	ESI,EDI
	POP	EDI			//+****
	MOV	EBX,DWORD LEX_CUR_LFN[EDI]
	MOV	EAX,DWORD LEX_CUR_BUF_PTR[EDI]
	TEST	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
	JZ	@@1
	AND	DWORD LEX_FLAGS[EDI],-1-LF_USE_LAST_CHAR
	DEC	EAX
@@1:	MOV	DWORD LFN_BUF_PTR[EBX],EAX
	ADD	EBX,LFN_STRUCT_SIZE		//TODO:CHECK FOR OVERFLOW
	MOV	DWORD LEX_CUR_LFN[EDI],EBX
	MOV	DWORD LFN_BUFFER[EBX],ESI
	MOV	DWORD LFN_BUF_PTR[EBX],ESI
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],ESI
	MOV	DWORD LFN_LINE_NUM[EBX],1
	POP	ESI
	MOV	DWORD LFN_NAME[EBX],ESI
	POP	EBX
	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
	ALIGN	4,0x90
LEX_PUSH::
	PUSH	EAX
	PUSH	ECX
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD LEX_CUR_LFN[EDI]
	MOV	EAX,DWORD LEX_CUR_BUF_PTR[EDI]
	TEST	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
	JZ	@@1
	AND	DWORD LEX_FLAGS[EDI],-1-LF_USE_LAST_CHAR
	DEC	EAX
@@1:	MOV	DWORD LEX_CUR_BUF_PTR[EDI],EAX
	MOV	DWORD LFN_BUF_PTR[ESI],EAX
	MOV	EDI,DWORD LEX_STACK_PTR[EDI]
	MOV	EAX,EDI
	MOV	ECX,LFN_STRUCT_SIZE/4
	REP_MOVSD
	POP	EDI
	MOV	ESI,DWORD LEX_STACK_PTR[EDI]
	ADD	ESI,LFN_STRUCT_SIZE
	MOV	DWORD LEX_STACK_PTR[EDI],ESI
	POP	ESI
	POP	ECX
	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
	ALIGN	4,0x90
LEX_POP::
	PUSH	EAX
	PUSH	ECX
	PUSH	ESI
	PUSH	EDI
	MOV	ESI,DWORD LEX_STACK_PTR[EDI]
	SUB	ESI,LFN_STRUCT_SIZE
	MOV	DWORD LEX_STACK_PTR[EDI],ESI
	MOV	EAX,DWORD LFN_BUF_PTR[ESI]
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],EAX
	AND	DWORD LEX_FLAGS[EDI],-1-LF_USE_LAST_CHAR
	MOV	EDI,DWORD LEX_CUR_LFN[EDI]
	MOV	ECX,LFN_STRUCT_SIZE/4
	REP_MOVSD
	POP	EDI
	POP	ESI
	POP	ECX
	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
	ALIGN	4,0x90
LEX_SUB_STACK_PTR::
	SUB	DWORD LEX_STACK_PTR[EDI],LFN_STRUCT_SIZE
	RET
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
// OUT:  EAX=TOKEN
//	 ZERO SET=EOF
	ALIGN	4,0x90
LEX::
	PUSH	EBX	//-****
	PUSH	EDX	//-****
	PUSH	ESI	//-****
	PUSH	EDI	//-****
	PUSH	EBP
	SUB	ESP,LEX_MAX_IDENT	//-****
@@2B:	MOV	EBP,ESP
	XOR	EBX,EBX //INDEX INTO IDENT
@@2:	CALL	LEX_GET_CHAR
@@2A:	MOV	BYTE [EBP],AL
	JZ	DWORD @@100   //JMP EOF
@@1:	TEST	DWORD LEX_FLAGS[EDI],LF_EXPECTING_HEX
	JNZ	DWORD @@82
@@1A:	BT	DWORD [ALPHA_BITMAP],EAX
	JC	DWORD @@90
	BT	DWORD [DEC_NUMERIC_BITMAP],EAX
	JC	DWORD @@70
	CMP	EAX,'"'
	JE	DWORD @@51
	CMP	EAX,'#'
	JE	DWORD @@200
	CMP	EAX,0x27     //"'"
	JE	DWORD @@300

	CMP	EAX,0x21
	JB	@@2
	CMP	EAX,0x7E
	JA	@@2

	MOV	DX,WORD DUEL_CHAR_TOKENS1[EAX*2]
	OR	DX,DX
	JZ	@@35
	MOV	EBX,EAX
	CALL	LEX_GET_CHAR
	JZ	@@4
	CMP	AL,DL
	JNE	@@3
@@3A:	MOV	AL,DH
	JMP	DWORD @@100
@@3:	MOV	DX,WORD DUEL_CHAR_TOKENS2[EBX*2]
	CMP	AL,DL
	JE	@@3A
	OR	LEX_FLAGS[EDI],LF_USE_LAST_CHAR
@@4:	MOV	EAX,EBX
	JMP	DWORD @@100

@@35:	CMP	EAX,'/'
	JNE	DWORD @@100
	CALL	LEX_GET_CHAR
	JZ	@@39
	CMP	EAX,'/'
	JNE	@@38
//LEX_SKIP_EOL
@@37:	CALL	LEX_GET_CHAR
	JZ	DWORD @@100
	CMP	EAX,13
	JE	DWORD @@2
	CMP	EAX,10
	JNE	@@37
	JMP	DWORD @@2
@@38:	CMP	EAX,'*'
	JNE	@@39A
@@38A:	CALL	LEX_GET_CHAR
	JZ	DWORD @@100
	CMP	EAX,'*'
	JNE	@@38A
@@38B:	CALL	LEX_GET_CHAR
	JZ	DWORD @@100
	CMP	EAX,'*'
	JE	@@38B
	CMP	EAX,'/'
	JNE	@@38A
	JMP	DWORD @@2

@@39A:	OR	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
@@39:	MOV	EAX,'/'
	JMP	DWORD @@100

@@50:	INC	EBX
	CMP	EBX,LEX_MAX_IDENT-1
	JE	@@69
@@51:	CALL	LEX_GET_CHAR
	JZ	@@69
	CMP	AL,'"'
	JE	@@69
	CMP	AL,'\\'
	JE	@@52
	MOV	BYTE [EBX+EBP],AL
	JMP	@@50
@@52:	CALL	LEX_GET_CHAR
	CMP	AL,'n'
	JNE	@@53
	MOV	BYTE [EBX+EBP],10
	JMP	@@50
@@53:	CMP	AL,'r'
	JNE	@@54
	MOV	BYTE [EBX+EBP],13
	JMP	@@50
@@54:	CMP	AL,'"'
	JNE	@@55
	MOV	BYTE [EBX+EBP],'"'
	JMP	@@50
@@55:	CMP	AL,'\\'
	JNE	@@56
	MOV	BYTE [EBX+EBP],'\\'
	JMP	@@50
@@56:	CMP	AL,'t'
	JNE	@@57
	MOV	BYTE [EBX+EBP],9
	JMP	@@50
@@57:	PUSH	EDX
	XOR	EDX,EDX
@@58:	CMP	AL,'0'
	JB	@@59
	CMP	AL,'7'
	JA	@@59
	SHL	EDX,3
	SUB	AL,'0'
	ADD	DL,AL
	CALL	LEX_GET_CHAR
	JMP	@@58
@@59:	OR	LEX_FLAGS[EDI],LF_USE_LAST_CHAR
	MOV	BYTE[EBP+EBX],DL
	POP	EDX
	JMP	DWORD @@50

@@69:	MOV	EAX,TK_STRING
	JMP	DWORD @@98

@@300:	CALL	LEX_GET_CHAR		// Char const
	JZ	@@310
	CMP	AL,'\\'
	JNE	@@305
	CALL	LEX_GET_CHAR
	JZ	@@305
	CMP	AL,'n'
	JNE	@@301
	MOV	EAX,10
	JMP	@@305
@@301:	CMP	AL,'r'
	JNE	@@302
	MOV	EAX,13
	JMP	@@305
@@302:	CMP	AL,'"'
	JNE	@@303
	MOV	EAX,'"'
	JMP	@@305
@@303:	CMP	AL,'\\'
	JNE	@@304
	MOV	EAX,'\\'
	JMP	@@305
@@304:	CMP	AL,'t'
	JNE	@@305
	MOV	EAX,9

@@305:	MOV	EBX,EAX
	CALL	LEX_GET_CHAR
	JZ	@@75
	CMP	AL,0x27
	JE	@@75
	JMP	@@73
@@310:	MOV	AL,0x27
	JMP	DWORD @@100

@@70:	MOV	EBX,EAX        //INT VAL
	SUB	EBX,'0'
@@71:	CALL	LEX_GET_CHAR
	JZ	@@75
	CMP	AL,'X'	       //TODO: NO 0x alone or 1x123
	JE	@@80
	CMP	AL,'x'

	JE	@@80
	BT	DWORD [DEC_NUMERIC_BITMAP],EAX
	JNC	@@73
	SUB	EAX,'0'
	IMUL2	EBX,10
	ADD	EBX,EAX
	JMP	@@71
@@73:	OR	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
@@75:	MOV	DWORD LEX_CUR_I[EDI],EBX
	MOV	EAX,TK_INTEGER
	JMP	DWORD @@100

@@80:	CALL	LEX_GET_CHAR
	JZ	@@75
@@82:	BT	DWORD [HEX_NUMERIC_BITMAP],EAX
	JNC	@@73
	SUB	AL,'0'
	CMP	AL,10
	JB	@@81
	SUB	AL,'A'-'0'-10
	CMP	AL,16
	JB	@@81
	SUB	AL,'a'-'A'
@@81:	IMUL2	EBX,16
	ADD	EBX,EAX
	JMP	@@80

@@90:	INC	EBX
	CMP	EBX,LEX_MAX_IDENT-1
	JE	@@99
	CALL	LEX_GET_CHAR
	JZ	@@99
	MOV	BYTE [EBX+EBP],AL
	BT	DWORD [ALPHA_NUMERIC_BITMAP],EAX
	JC	@@90
	OR	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
@@99:	MOV	BYTE [EBX+EBP],0

	MOV	DWORD LEX_LOCAL_VAR_ENTRY[EDI],0
	PUSH	EBP
	MOV	ESI,EBP
	MOV	EBP,DWORD LEX_LOCAL_VAR_LIST[EDI]
	OR	EBP,EBP
	JZ	@@99A
	CALL	FIND_MEMBER
	OR	EDX,EDX
	JZ	@@99A
	MOV	DWORD LEX_LOCAL_VAR_ENTRY[EDI],EDX
	POP	EBP
	MOV	DWORD LEX_HASH_ENTRY[EDI],0
	JMP	@@97
@@99A:	POP	EBP

	PUSH	EDI	//-****
	MOV	DWORD LEX_HASH_ENTRY[EDI],0
	MOV	EDI,LEX_HASH_TABLE_LIST[EDI]
@@96:	OR	EDI,EDI
	JE	@@93
	MOV	ESI,EBP
	MOV	EBX,HTT_ALL
	CALL	FIND_HASH_ENTRY
	JZ	@@93
	POP	EDI	//+****
	TEST	DWORD LEX_FLAGS[EDI],LF_NO_DEFINES
	JNZ	@@94A
	TEST	DWORD HTE_TYPE[ESI],HTT_STRING_CONSTANT
	JNZ	DWORD @@250
@@94A:	MOV	LEX_HASH_ENTRY[EDI],ESI
	JMP	@@97
@@93:	POP	EDI	//+****

@@97:	MOV	ESI,EBP
	CALL	STRLEN
	MOV	EBX,EAX
	MOV	EAX,TK_IDENT
@@98:	PUSH	EAX	//-****
	PUSH	ECX	//-****
	PUSH	EDI	//-****
	MOV	BYTE [EBX+EBP],0
	MOV	ESI,DWORD LEX_IDENT[EDI]
	CALL	FREE
	INC	EBX
	MOV	EAX,EBX

//NEW_STRING
	CALL	MALLOC
	MOV	DWORD LEX_IDENT_LEN[EDI],EBX
	MOV	EDI,ESI
	MOV	ESI,EBP
	MOV	ECX,EBX
	PUSH	EDI	//-****
	REP_MOVSB
	POP	EAX	//+****
	POP	EDI	//+****
	MOV	DWORD LEX_IDENT[EDI],EAX
	POP	ECX	//+****
	POP	EAX	//+****

@@100:	MOV	DWORD LEX_TOKEN[EDI],EAX
	ADD	ESP,LEX_MAX_IDENT	//-****
	POP	EBP	//+****
	POP	EDI	//+****
	POP	ESI	//+****
	POP	EDX	//+****
	POP	EBX	//+****
	BT	WORD FS:[TSS_TASK_FLAGS],TSSF_LEX_TRACE
	JNC	@@101
	CALL	PUT_TOKEN
@@101:	OR	EAX,EAX
	RET

@@200:	CALL	LEX	//SKIP #
	CMP	EAX,TK_IDENT
	JNE	@@100
	MOV	ESI,DWORD LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JZ	@@100
	TEST	DWORD HTE_TYPE[ESI],HTT_KEYWORD
	JZ	@@100
	MOV	EBX,DWORD HTE_USER0[ESI]
	CMP	EBX,KW_INCLUDE
	JNE	@@210
	CALL	LEX	//SKIP KEYWORD
	CMP	EAX,TK_STRING
	JNE	@@100
	MOV	ESI,DWORD LEX_IDENT[EDI]
	MOV	DWORD LEX_IDENT[EDI],0
	CALL	LEX_INCLUDE
	JMP	DWORD @@2B

@@210:	CMP	EBX,KW_DEFINE
	JNE	DWORD @@220
	PUSH	DWORD LEX_FLAGS[EDI]
	OR	DWORD LEX_FLAGS[EDI],LF_NO_DEFINES
	CALL	LEX	//SKIP KEYWORD
	POP	DWORD LEX_FLAGS[EDI]
	CMP	EAX,TK_IDENT
	JNE	@@100
	MOV	EAX,HTE_STRUCT_SIZE
	CALL	MALLOC
	MOV	EDX,ESI
	MOV	ESI,DWORD LEX_IDENT[EDI]
	MOV	DWORD LEX_IDENT[EDI],0
	MOV	DWORD HTE_STRING[EDX],ESI
	MOV	DWORD HTE_TYPE[EDX],HTT_STRING_CONSTANT
	PUSH	EDI
	MOV	EDI,DWORD LEX_DEFINE_HASH_TABLE[EDI]
	CALL	FIND_HASH_BUCKET
	POP	EDI
	MOV	EAX,DWORD [ESI]
	MOV	DWORD HTE_NEXT[EDX],EAX
	MOV	DWORD [ESI],EDX
	MOV	EBP,ESP
	XOR	EBX,EBX //INDEX INTO IDENT
@@211A: CALL	LEX_GET_CHAR
	JZ	@@212
	CMP	EAX,0x20	 //remove leading white space
	JE	@@211A
	CMP	EAX,9
	JE	@@211A
	JMP	@@211B
@@211:	CMP	EBX,LEX_MAX_IDENT-1
	JE	@@212
	CALL	LEX_GET_CHAR
	JZ	@@212
@@211B: CMP	EAX,13
	JE	@@212
	CMP	EAX,10
	JE	@@212
	MOV	BYTE [EBX+EBP],AL
	INC	EBX
	JMP	@@211
@@212:	XOR	EAX,EAX
	MOV	BYTE [EBX+EBP],AL
	MOV	ESI,EBP
	PUSH	EDI
	CALL	NEW_STRING
	MOV	DWORD HTE_USER0[EDX],EDI
	POP	EDI
	JMP	DWORD @@2B

@@220:	JMP	DWORD @@100

//STRING CONSTANT
@@250:	MOV	ESI,DWORD HTE_USER0[ESI]
	PUSH	EDI
	CALL	NEW_STRING
	MOV	ESI,EDI
	POP	EDI
	MOV	EBX,DWORD LEX_CUR_LFN[EDI]
	MOV	EAX,DWORD LEX_CUR_BUF_PTR[EDI]
	TEST	DWORD LEX_FLAGS[EDI],LF_USE_LAST_CHAR
	JZ	@@251
	AND	DWORD LEX_FLAGS[EDI],-1-LF_USE_LAST_CHAR
	DEC	EAX
@@251:	MOV	DWORD LFN_BUF_PTR[EBX],EAX
	ADD	EBX,LFN_STRUCT_SIZE		//TODO:CHECK FOR OVERFLOW
	MOV	DWORD LEX_CUR_LFN[EDI],EBX
	MOV	DWORD LFN_BUFFER[EBX],ESI
	MOV	DWORD LFN_BUF_PTR[EBX],ESI
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],ESI
	MOV	DWORD LFN_LINE_NUM[EBX],1
	JMP	DWORD @@2B
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LEX::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
	CALL	LEX
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LEX_SKIP_EOL::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
@@1:	CALL	LEX_GET_CHAR
	JZ	@@100
	CMP	EAX,10
	JNE	@@1
@@100:	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LEX_PUSH::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
	CALL	LEX_PUSH
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LEX_POP::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
	CALL	LEX_POP
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LEX_SUB_STACK_PTR::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
	CALL	LEX_SUB_STACK_PTR
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_NEW_LEX::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD SF_PARAM1[EBP]
	MOV	EDX,DWORD SF_PARAM2[EBP]
	CALL	NEW_LEX
	MOV	EAX,EDI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_DELETE_LEX::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
	CALL	DELETE_LEX
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_LEX_PUT_TOKEN::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	MOV	EDI,DWORD SF_PARAM1[EBP]
	CALL	PUT_TOKEN
	POP	EDI
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
LEX_CB_PUSH::
	PUSH	ESI
	PUSH	EAX
	PUSH	ECX

	MOV	EAX,LEX_STRUCT_SIZE
	CALL	MALLOC
	PUSH	EDI
	PUSH	ESI
	LEA	ESI,DWORD LEX_CB_PUSH_START[EDI]
	POP	EDI
	PUSH	EDI
	LEA	EDI,DWORD LEX_CB_PUSH_START[EDI]
	MOV	ECX,(LEX_CB_PUSH_END-LEX_CB_PUSH_START)/4
	MOV	EAX,ECX
	REP_MOVSD
	POP	ESI
	POP	EDI
	MOV	DWORD LEX_CB_STACK[EDI],ESI

	POP	ECX
	POP	EAX
	POP	ESI
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
LEX_CB_POP::
	PUSH	ESI
	PUSH	EAX
	PUSH	ECX

	MOV	ESI,DWORD LEX_CB_STACK[EDI]
	PUSH	ESI
	LEA	ESI,DWORD LEX_CB_PUSH_START[ESI]
	PUSH	EDI
	LEA	EDI,DWORD LEX_CB_PUSH_START[EDI]
	MOV	ECX,(LEX_CB_PUSH_END-LEX_CB_PUSH_START)/4
	MOV	EAX,ECX
	REP_MOVSD
	POP	EDI
	POP	ESI
	CALL	FREE

	POP	ECX
	POP	EAX
	POP	ESI
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
LEX_CB_POP_NO_FREE::
	PUSH	EAX
	PUSH	ECX

	MOV	ESI,DWORD LEX_CB_STACK[EDI]
	PUSH	ESI
	LEA	ESI,DWORD LEX_CB_PUSH_START[ESI]
	PUSH	EDI
	LEA	EDI,DWORD LEX_CB_PUSH_START[EDI]
	MOV	ECX,(LEX_CB_PUSH_END-LEX_CB_PUSH_START)/4
	MOV	EAX,ECX
	REP_MOVSD
	POP	EDI
	POP	ESI

	POP	ECX
	POP	EAX
	RET
////**************************PROCEDURE*************************
//IN:	 EDI: MAIN LEX NODE
//	 ESI: LEX NODE TO APPEND
	ALIGN	4,0x90
LEX_CB_APPEND::
	PUSH	EDI
	MOV	EDI,ESI
	CALL	INIT_CB_IN_PTRS
	POP	EDI
@@1:	PUSH	EDI
	MOV	EDI,ESI
	CALL	GET_INTERMEDIATE_CODE
	POP	EDI
	OR	EAX,EAX
	JZ	@@100
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@1
@@100:	PUSH	ESI
	MOV	ESI,DWORD LEX_CB_OUT_FIRST[ESI]
	CALL	DELETE_LINKED_LIST
	POP	ESI
	LEA	EAX,DWORD LEX_CB_LABEL_LIST[EDI]
	MOV	EBX,DWORD LEX_CB_LABEL_LIST[ESI]
@@105:	MOV	ECX,DWORD LB_NEXT[EAX]
	OR	ECX,ECX
	JZ	@@110
	MOV	EAX,ECX
	JMP	@@105
@@110:	MOV	DWORD LB_NEXT[EAX],EBX
	CALL	FREE
	RET
////**************************PROCEDURE*************************
//IN:	 EDI: MAIN LEX NODE
//OUT:	 EAX: ADDRESS STRING

	       STRUC 0
LES_FIRST:	DD	?;
LES_FIRST_LEN:	DD	?;
LES_SECOND:	DD	?;
LES_SECOND_LEN: DD	?;
LES_RESULT:	DD	?;
LES_RESULT_LEN: DD	?;
LES_STACK_SIZE:

LES_ECX:       DD      ?;
LES_ESI:       DD      ?;
LES_EDI:       DD      ?;
LES_EBP:       DD      ?;
		ENDS

	ALIGN	4,0x90
LEX_EXTEND_STRING::
	PUSH	EBP
	PUSH	EDI
	PUSH	ESI
	PUSH	ECX
	SUB	ESP,LES_STACK_SIZE
	MOV	EBP,ESP

	MOV	EAX,DWORD LEX_IDENT[EDI]
	MOV	DWORD LES_FIRST[EBP],EAX
	MOV	EAX,DWORD LEX_IDENT_LEN[EDI]
	MOV	DWORD LES_FIRST_LEN[EBP],EAX
	MOV	DWORD LEX_IDENT[EDI],0
@@1:	MOV	EAX,DWORD LES_EBP[EBP]
	MOV	EBP,EAX
	CALL	LEX
	MOV	EBP,ESP
	CMP	EAX,TK_STRING
	JNE	@@100

	MOV	EAX,DWORD LEX_IDENT[EDI]
	MOV	DWORD LES_SECOND[EBP],EAX
	MOV	EAX,DWORD LEX_IDENT_LEN[EDI]
	MOV	DWORD LES_SECOND_LEN[EBP],EAX
	MOV	DWORD LEX_IDENT[EDI],0

	MOV	EAX,DWORD LES_FIRST_LEN[EBP]
	ADD	EAX,DWORD LES_SECOND_LEN[EBP]
	DEC	EAX
	MOV	DWORD LES_RESULT_LEN[EBP],EAX
	CALL	MALLOC
	MOV	DWORD LES_RESULT[EBP],ESI

	MOV	EDI,ESI
	MOV	ECX,DWORD LES_FIRST_LEN[EBP]
	DEC	ECX
	JZ	@@10
	MOV	ESI,DWORD LES_FIRST[EBP]
	REP_MOVSB
@@10:	MOV	ECX,DWORD LES_SECOND_LEN[EBP]
	MOV	ESI,DWORD LES_SECOND[EBP]
	REP_MOVSB

	MOV	ESI,DWORD LES_FIRST[EBP]
	CALL	FREE
	MOV	ESI,DWORD LES_SECOND[EBP]
	CALL	FREE

	MOV	EAX,DWORD LES_RESULT_LEN[EBP]
	MOV	DWORD LES_FIRST_LEN[EBP],EAX
	MOV	EAX,DWORD LES_RESULT[EBP]
	MOV	DWORD LES_FIRST[EBP],EAX
	MOV	EDI,DWORD LES_EDI[EBP]
	JMP	@@1

@@100:	MOV	EAX,DWORD LES_FIRST[EBP]
	ADD	ESP,LES_STACK_SIZE
	POP	ECX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	END

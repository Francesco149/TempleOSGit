	ALIGN	4,0x90
TSK_POLL_KEYBOARD::
	CLI
@@1:	MOV	AL,0xA
	OUT	0x20,AL
	OUT	0xEB,AL
	IN	AL,0x20
	TEST	AL,2
	JE	@@10
	INT	0x21
@@10:	IN	AL,0x64
	TEST	AL,1
	JZ	@@20
	INT	0x21
@@20:	CALL	SWAP_IN_NEXT
	JMP	@@1

	ALIGN	4,0x90
IRQ_VECTORS::
	DD IRQ00,IRQ01,IRQ02,IRQ03;
	DD IRQ04,IRQ05,IRQ06,IRQ07;
	DD IRQ08,IRQ09,IRQ0A,IRQ0B;
	DD IRQ0C,IRQ0D,IRQ0E,IRQ0F;
	DD IRQ10,IRQ11,IRQ12,IRQ13;
	DD IRQ14,IRQ15,IRQ16,IRQ17;
	DD IRQ18,IRQ19,IRQ1A,IRQ1B;
	DD IRQ1C,IRQ1D,IRQ1E,IRQ1F;
	DD IRQ20,IRQ21,IRQ22,IRQ23;
	DD IRQ24,IRQ25,IRQ26,IRQ27;
	DD IRQ28,IRQ29,IRQ2A,IRQ2B;
	DD IRQ2C,IRQ2D,IRQ2E,IRQ2F;
	DD IRQ30,IRQ31,IRQ32,IRQ33;
	DD IRQ34,IRQ35,IRQ36,IRQ37;
	DD IRQ38,IRQ39,IRQ3A,IRQ3B;
	DD IRQ3C,IRQ3D,IRQ3E,IRQ3F;
	DD IRQ40,IRQ41,IRQ42,IRQ43;
	DD IRQ44,IRQ45,IRQ46,IRQ47;
	DD IRQ48,IRQ49,IRQ4A,IRQ4B;
	DD IRQ4C,IRQ4D,IRQ4E,IRQ4F;
	DD IRQ50,IRQ51,IRQ52,IRQ53;
	DD IRQ54,IRQ55,IRQ56,IRQ57;
	DD IRQ58,IRQ59,IRQ5A,IRQ5B;
	DD IRQ5C,IRQ5D,IRQ5E,IRQ5F;

////***************** RESERVED INTERRUPT ROUTINES ***************
	ALIGN	4,0x90
IRQ00:	PUSHAD
	MOV	EDX,0
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ01:	PUSHAD
	MOV	EDX,1
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ02:	PUSHAD
	MOV	EDX,2
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ03:	PUSHAD
	MOV	EDX,3
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ04:	PUSHAD
	MOV	EDX,4
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ05:	PUSHAD
	MOV	EDX,5
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ06:	PUSHAD
	MOV	EDX,6
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ07:	PUSHAD
	MOV	EDX,7
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ08:	PUSHAD
	MOV	EDX,8
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ09:	PUSHAD
	MOV	EDX,9
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ0A:	PUSHAD
	MOV	EDX,0x0A
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ0B:	PUSHAD
	MOV	EDX,0x0B
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ0C:	PUSHAD
	MOV	EDX,0x0C
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ0D:	PUSHAD
	MOV	EDX,0x0D
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ0E:	PUSHAD
	MOV	EDX,0x0E
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ0F:	PUSHAD
	MOV	EDX,0x0F
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ10:	PUSHAD
	MOV	EDX,0x10
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ11:	PUSHAD
	MOV	EDX,0x11
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ12:	PUSHAD
	MOV	EDX,0x12
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ13:	PUSHAD
	MOV	EDX,0x13
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ14:	PUSHAD
	MOV	EDX,0x14
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ15:	PUSHAD
	MOV	EDX,0x15
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ16:	PUSHAD
	MOV	EDX,0x16
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ17:	PUSHAD
	MOV	EDX,0x17
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ18:	PUSHAD
	MOV	EDX,0x18
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ19:	PUSHAD
	MOV	EDX,0x19
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ1A:	PUSHAD
	MOV	EDX,0x1A
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ1B:	PUSHAD
	MOV	EDX,0x1B
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ1C:	PUSHAD
	MOV	EDX,0x1C
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ1D:	PUSHAD
	MOV	EDX,0x1D
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ1E:	PUSHAD
	MOV	EDX,0x1E
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ1F:	PUSHAD
	MOV	EDX,0x1F
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ20_COMMON:
	PUSH	EAX			//NONPREEMPTIVE
	PUSH	ECX
	PUSH	ESI
	PUSH	EDI
	PUSH	ES
	PUSH	DS
	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	INC	DWORD [JIFFIES]
	MOV	EAX,CRT_SEL
	MOV	ES,AX
	INC	BYTE ES:[0]

	MOV	AX,SYS_DS_SEL
	MOV	DS,AX
	MOV	ES,AX
	MOV	ECX,TSS_DESC_LENGTH+1
	MOV	EDI,SYS_CUR_TASK_DESC
	MOV	ESI,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	ADD	ESI,TSS_TASK_DESCRIPTOR
	REP_MOVSB

	POP	DS
	POP	ES
	POP	EDI
	POP	ESI
	POP	ECX
	POP	EAX
	RET

	ALIGN	4,0x90
IRQ20:	CALL	IRQ20_COMMON
	BT	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	JC	@@1
	IRET

@@1:	CALL	SAVE_CONTEXT		//PREEMPTIVE

	MOV	EBP,ESP
	MOV	EAX,[EBP]
	MOV	DWORD FS:[TSS_EIP],EAX
	MOV	EAX,8[EBP]
	MOV	DWORD FS:[TSS_EFLAGS],EAX
	ADD	EBP,12
	MOV	DWORD FS:[TSS_ESP],EBP

	MOV	ESI,DWORD FS:[TSS_NEXT_TSS]
	MOV	AX,WORD TSS_FS[ESI]
	MOV	FS,AX
	JMP	DWORD SWAP_IN_NEXT_PART2

	ALIGN	4,0x90
IRQ21:: STI
	PUSH	EAX
	PUSH	EBX
	XOR	EAX,EAX
	IN	AL,0x60
	MOV	EBX,DWORD [SYS_CURRENT_SCAN_CODE]
	AND	EBX,0xFFFFFE00

	CMP	AL,0xE0
	JNE	@@20
	BTS	EBX,SCF_PRIOR_E0
	JMP	DWORD @@1

@@20:	BTR	EBX,SCF_PRIOR_E0
	JNC	@@21
	BTS	EAX,SCF_E0_PREFIX

@@21:	CMP	EAX,0x2A
	JE	@@11
	CMP	EAX,0x36
	JNE	@@2
@@11:	BTS	EBX,SCF_SHIFT
	JMP	DWORD @@1

@@2:	CMP	EAX,0xAA
	JE	@@12
	CMP	EAX,0xB6
	JNE	@@3
@@12:	BTR	EBX,SCF_SHIFT
	JMP	DWORD @@1

@@3:	CMP	AL,0x1D
	JNE	@@4
	BTS	EBX,SCF_CTRL
	JMP	DWORD @@1

@@4:	CMP	AL,0x9D
	JNE	@@5
	BTR	EBX,SCF_CTRL
	JMP	DWORD @@1

@@5:	CMP	AL,0x38
	JNE	@@6
	BTS	EBX,SCF_ALT
	JMP	DWORD @@1

@@6:	CMP	AL,0xB8
	JNE	@@7
	BTR	EBX,SCF_ALT
	JMP	@@1

@@7:	CMP	EAX,0x3A
	JE	@@1
	CMP	EAX,0xBA
	JNE	@@7B
	BTC	EBX,SCF_CAPS
	JMP	@@1

@@7B:	CMP	EAX,0x45
	JE    	@@1
	CMP	EAX,0xC5
	JNE	@@7C
	BTC	EBX,SCF_NUM
	JMP	@@1

@@7C:	BT	EBX,SCF_CTRL
	JNC	@@10
	BT	EBX,SCF_ALT
	JNC	@@10

	CMP	EAX,0x153	  //CTRL ALT DEL?
	JNE	@@8
	BTS	DWORD [SYS_FLAGS],SYSF_CTRL_ALT_DEL
	JMP	@@1

@@8:	CMP	EAX,1	       //CTRL ALT ESC?
	JNE	@@9
	BTS	DWORD [SYS_FLAGS],SYSF_CTRL_ALT_ESC
	JMP	@@1

@@9:	CMP	EAX,15	 	 //CTRL ALT TAB?
	JNE	@@13
	BTS	DWORD [SYS_FLAGS],SYSF_CTRL_ALT_TAB
	JMP	@@1

@@13:	CMP	EAX,0x2D	  //CTRL ALT X
	JNE	@@10
	BTS	DWORD [SYS_FLAGS],SYSF_CTRL_ALT_X
	JMP	@@1

@@10:	OR	AL,AL
	JS	@@1
	BTS	EBX,SCF_NEW_KEY
@@1:	OR	EAX,EBX
	MOV	DWORD [SYS_CURRENT_SCAN_CODE],EAX

	MOV	AL,0x20 		 //ACKNOWLEDGE INTERRUPT
	OUT	0x20,AL
	POP	EBX
	POP	EAX
	IRET

	ALIGN	4,0x90
IRQ22:	PUSHAD
	MOV	EDX,0x22
	JMP	DWORD IRQJOIN


	ALIGN	4,0x90
IRQ23:	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_IRQ03*4[EAX]
	POPAD
	IRET

	ALIGN	4,0x90
IRQ24:	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_IRQ04*4[EAX]
	POPAD
	IRET

	ALIGN	4,0x90
IRQ25:	PUSHAD
	MOV	EDX,0x25
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ26:	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_IRQ06*4[EAX]
	POPAD
	IRET

	ALIGN	4,0x90
IRQ27:	PUSHAD
	MOV	EDX,0x27
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ28:	PUSHAD
	MOV	EDX,0x28
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ29:	PUSHAD
	MOV	EDX,0x29
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ2A:	PUSHAD
	MOV	EDX,0x2A
	JMP	DWORD IRQJOIN


	ALIGN	4,0x90
IRQ2B:	PUSHAD
	MOV	EDX,0x2B
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ2C:	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_IRQ0C*4[EAX]
	POPAD
	IRET

	ALIGN	4,0x90
IRQ2D:	PUSHAD
	MOV	EDX,0x2D
	JMP	DWORD IRQJOIN


	ALIGN	4,0x90
IRQ2E:	PUSHAD
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_IRQ0E*4[EAX]
	POPAD
	IRET

	ALIGN	4,0x90
IRQ2F:	PUSHAD
	MOV	EDX,0x2F
	JMP	DWORD IRQJOIN

//************************************ SOFTWARE INT'S ******************************

	ALIGN	4,0x90
IRQ30:	STI
	CALL	PUT_SYSTEXT
	IRET

	ALIGN	4,0x90
IRQ31:	STI
	CALL	PUT_CHAR
	IRET

	ALIGN	4,0x90
IRQ32:	STI
	CALL	GET_CHAR
	IRET

	ALIGN	4,0x90
IRQ33:: STI			//PRINTF
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EBX,EAX 	//FETCH PARAM COUNT
	LEA	EBP,16-8[EBP+EBX*8]
@@20:	MOV	EDX,[EBP]
	MOV	EAX,4[EBP]

	CMP	BYTE C_PTR_COUNT[EDX],1
	JE	@@25
	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_DWORD*4)],EDX
	JE	@@21
	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_INT*4)],EDX
	JNE	@@21A
@@21:	CALL	PUT_HEX
	JMP	@@29
@@21A:	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_WORD*4)],EDX
	JE	@@22
	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_SHORT*4)],EDX
	JNE	@@22A
@@22:	CALL	PUT_HEX_WORD
	JMP	@@29
@@22A:	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_BYTE*4)],EDX
	JNE	@@23
	CALL	PUT_HEX_BYTE
	JMP	@@29
@@23:	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_CHAR*4)],EDX
	JNE	@@23A
	CALL	PUT_CHAR
	JMP	@@29
@@23A:	JMP	@@21

@@25:	SUB	EDX,C_STRUCT_SIZE
	CMP	DWORD [SYS_INTERNAL_TYPES+(IT_CHAR*4)],EDX
	JNE	@@21
	PUSH	ESI
	MOV	ESI,EAX
	CALL	PUT_STRING
	POP	ESI
	JMP	@@29

@@29:	SUB	EBP,8
	DEC	EBX
	JNZ	@@20
	POP	EBP
	IRET

	ALIGN	4,0x90
IRQ34:	PUSHAD
	MOV	EDX,0x34
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ35:	PUSHAD
	MOV	EDX,0x35
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ36:	PUSHAD
	MOV	EDX,0x36
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ37:	PUSHAD
	MOV	EDX,0x37
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ38:	PUSHAD
	MOV	EDX,0x38
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ39:	PUSHAD
	MOV	EDX,0x39
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ3A:	PUSHAD
	MOV	EDX,0x3A
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ3B:	PUSHAD
	MOV	EDX,0x3B
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ3C:	PUSHAD
	MOV	EDX,0x3C
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ3D:	PUSHAD
	MOV	EDX,0x3D
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ3E:	PUSHAD
	MOV	EDX,0x3E
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ3F:	PUSHAD
	MOV	EDX,0x3F
	JMP	DWORD IRQJOIN


//******************** SOFTWARE IRQS ****************
	ALIGN	4,0x90
IRQ40:	PUSHAD
	MOV	EDX,0x40
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ41:	PUSHAD
	MOV	EDX,0x41
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ42:	PUSHAD
	MOV	EDX,0x42
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ43:	PUSHAD
	MOV	EDX,0x43
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ44:	PUSHAD
	MOV	EDX,0x44
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ45:	PUSHAD
	MOV	EDX,0x45
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ46:	PUSHAD
	MOV	EDX,0x46
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ47:	PUSHAD
	MOV	EDX,0x47
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ48:	PUSHAD
	MOV	EDX,0x48
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ49:	PUSHAD
	MOV	EDX,0x49
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ4A:	PUSHAD
	MOV	EDX,0x4A
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ4B:	PUSHAD
	MOV	EDX,0x4B
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ4C:	PUSHAD
	MOV	EDX,0x4C
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ4D:	PUSHAD
	MOV	EDX,0x4D
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ4E:	PUSHAD
	MOV	EDX,0x4E
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ4F:	PUSHAD
	MOV	EDX,0x4F
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ50:	PUSHAD
	MOV	EDX,0x50
	JMP	DWORD IRQJOIN

	ALIGN	4,0x90
IRQ51:	PUSHAD
	MOV	EDX,0x51
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ52:	PUSHAD
	MOV	EDX,0x52
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ53:	PUSHAD
	MOV	EDX,0x53
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ54:	PUSHAD
	MOV	EDX,0x54
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ55:	PUSHAD
	MOV	EDX,0x55
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ56:	PUSHAD
	MOV	EDX,0x56
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ57:	PUSHAD
	MOV	EDX,0x57
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ58:	PUSHAD
	MOV	EDX,0x58
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ59:	PUSHAD
	MOV	EDX,0x59
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ5A:	PUSHAD
	MOV	EDX,0x5A
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ5B:	PUSHAD
	MOV	EDX,0x5B
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ5C:	PUSHAD
	MOV	EDX,0x5C
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ5D:	PUSHAD
	MOV	EDX,0x5D
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ5E:	PUSHAD
	MOV	EDX,0x5E
	JMP	IRQJOIN

	ALIGN	4,0x90
IRQ5F:	PUSHAD
	MOV	EDX,0x5F
	JMP	IRQJOIN

FAULT_DESC:	DB "FAULT TASK",0;

	ALIGN	4,0x90
IRQJOIN::
	BTS	WORD FS:[TSS_TASK_FLAGS],TSSF_SUSPENDED
	MOV	DWORD [FAULTING_IRQ_NUM],EDX
	MOV	EAX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	MOV	DWORD [FAULTING_TSS],EAX
	CALL	CMD_DEACTIVATE_ALL
	MOV	EAX,FAULT_COMMAND_LINE
	MOV	ESI,FAULT_DESC
	MOV	ECX,DEFAULT_STACK
	CALL	SPAWN_TASK
	MOV	ESI,DWORD [SYS_EXTERN_TABLE]
	MOV	ESI,DWORD EXT_WINDOW_TO_TOP*4[ESI]
	OR	ESI,ESI
	JZ	@@1
	PUSH	EDI
	CALL	ESI
	POP	EDI
@@1:	MOV	ESI,DWORD ROOT_TSS
	MOV	ESI,DWORD TSS_HASH_TABLE[ESI]
	MOV	EDI,DWORD TSS_HASH_TABLE[EDI]
	MOV	DWORD HT_NEXT[EDI],ESI
	POPAD
	PUSH	SYS_DEFAULT_FLAGS   //ENABLE IRQ'S
	POPFD
	JMP	DWORD SWAP_IN_NEXT

CMD_INTERRUPT::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EAX
	MOV	EAX,DWORD SF_PARAM1[EBP]
//	MOV	BYTE [CMD_INT],AL
//	INVD
	POP	EAX
	DB	0xCD;
CMD_INT::
	DB	0x0D;
	POP	EBP
	RET
	END

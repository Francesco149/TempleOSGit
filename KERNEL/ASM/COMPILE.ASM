////**************************PROCEDURE*************************
//OUT:	 ESI
	ALIGN	4,0x90
NEW_LABEL::
	PUSH	EAX
	MOV	EAX,LB_STRUCT_SIZE
	CALL	MALLOC
	MOV	EAX,DWORD LEX_CB_LABEL_LIST[EDI]
	MOV	DWORD LB_NEXT[ESI],EAX
	MOV	DWORD LEX_CB_LABEL_LIST[EDI],ESI
	MOV	DWORD LB_STRING[ESI],0
	MOV	DWORD LB_ADDRESS[ESI],0
	POP	EAX
	RET
////**************************PROCEDURE*************************
//IN:	 EBP=CLASS
//	 ESI=STRING
//OUT:	 EDX=MEMBER_LIST_NODE
	ALIGN	4,0x90
FIND_MEMBER::
	PUSH	EAX
	PUSH	ECX
	PUSH	EDI
	PUSH	ESI
	MOV	EDX,DWORD C_MEM_LIST[EBP]
@@1:	OR	EDX,EDX
	JZ	@@100
	XOR	ECX,ECX
	MOV	EDI,DWORD ML_STRING[EDX]
@@10:	MOV	AL,BYTE [ESI+ECX]
	CMP	BYTE [EDI+ECX],AL
	JNE	@@50
	INC	ECX
	OR	AL,AL
	JNZ	@@10
	JMP	@@100
@@50:	MOV	EDX,DWORD ML_NEXT[EDX]
	JMP	@@1
@@100:	POP	ESI
	POP	EDI
	POP	ECX
	POP	EAX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
//OUT:	 EBP=CLASS
#define STD_DEREF (EC_DEREFERENCE+0x100+65536*(EC_ASSIGN32+0x700))
NEW_CLASS::
	PUSH	EAX
	PUSH	ECX
	PUSH	ESI
	PUSH	EDI
	MOV	EAX,C_STRUCT_SIZE*4
	CALL	MALLOC
	MOV	EBP,ESI

	MOV	EDI,ESI
	XOR	EAX,EAX
	MOV	ECX,C_STRUCT_SIZE*4/4
	REP_STOSD

	MOV	DWORD C_HASH_TYPE[ESI],HTT_CLASS
	LEA	EAX,DWORD C_MEM_LIST[ESI]
	MOV	DWORD C_MEM_LIST_LAST[ESI],EAX
	MOV	DWORD C_DEREFERENCE[ESI],STD_DEREF

	ADD	ESI,C_STRUCT_SIZE
	MOV	DWORD C_HASH_TYPE[ESI],HTT_CLASS
	MOV	DWORD C_SIZE[ESI],4
	MOV	DWORD C_DEREFERENCE[ESI],STD_DEREF
	MOV	BYTE C_PTR_COUNT[ESI],1

	ADD	ESI,C_STRUCT_SIZE
	MOV	DWORD C_HASH_TYPE[ESI],HTT_CLASS
	MOV	DWORD C_SIZE[ESI],4
	MOV	DWORD C_DEREFERENCE[ESI],STD_DEREF
	MOV	BYTE C_PTR_COUNT[ESI],2

	ADD	ESI,C_STRUCT_SIZE
	MOV	DWORD C_HASH_TYPE[ESI],HTT_CLASS
	MOV	DWORD C_SIZE[ESI],4
	MOV	DWORD C_DEREFERENCE[ESI],STD_DEREF
	MOV	BYTE C_PTR_COUNT[ESI],3

	POP	EDI
	POP	ESI
	POP	ECX
	POP	EAX
	RET
////**************************PROCEDURE*************************
//IN:	 EBP=CLASS_MEMBER_NODE
//	 EAX=0 LOCAL VAR, 1 FUN PARAM, 2 CLASS
TXT_ARGC::	DB	"argc",0;
TXT_ARGV::	DB	"argv",0;

	ALIGN	4,0x90
PARSE_VAR_LIST::
	PUSH	EAX
	OR	EAX,EAX
	JZ	DWORD @@2A
	CMP	DWORD LEX_TOKEN[EDI],'('
	JE	@@1B
	CMP	DWORD LEX_TOKEN[EDI],'{'
	JNE	DWORD @@170
@@1B:	CALL	LEX	//SKIP (
@@1:	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	@@1A
	CALL	LEX    //SKIP //
	JMP	@@1
@@1A:	CMP	DWORD LEX_TOKEN[EDI],'}'
	JE	DWORD @@100
	CMP	DWORD LEX_TOKEN[EDI],')'
	JE	DWORD @@100

	CMP	DWORD LEX_TOKEN[EDI],'.'    //unfinished--double const
	JNE	DWORD @@2B
	CALL	LEX
	CMP	DWORD LEX_TOKEN[EDI],'.'
	JNE	DWORD @@140
	CALL	LEX
	CMP	DWORD LEX_TOKEN[EDI],'.'
	JNE	DWORD @@140
	CALL	LEX
	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	DWORD @@180

	MOV	EAX,ML_STRUCT_SIZE
	CALL	MALLOC
	MOV	WORD ML_FLAGS[ESI],MLF_DOT_DOT_DOT
	XOR	EAX,EAX
	MOV	DWORD ML_FORMAT_STR[ESI],EAX
	MOV	DWORD ML_FORMAT_DATA[ESI],EAX
	MOV	DWORD ML_OUTPUT_FUN[ESI],EAX
	MOV	DWORD ML_INPUT_FUN[ESI],EAX
	MOV	WORD ML_PARAM_COUNT[ESI],AX
	MOV	DWORD ML_COUNT[ESI],EAX
	MOV	DWORD ML_NEXT[ESI],EAX
	MOV	EBX,DWORD [SYS_INTERNAL_TYPES+(4*IT_INT)]
	MOV	DWORD ML_CLASS[ESI],EBX
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,TXT_ARGC
	CALL	NEW_STRING
	MOV	EAX,EDI
	POP	ESI
	POP	EDI
	MOV	DWORD ML_STRING[ESI],EAX
	MOV	ECX,DWORD C_MEM_LIST_LAST[EBP]
	MOV	DWORD ML_NEXT[ECX],ESI
	MOV	DWORD C_MEM_LIST_LAST[EBP],ESI
	MOV	EAX,DWORD C_SIZE[EBP]	    //FUN PARAM
	MOV	DWORD ML_OFFSET[ESI],EAX
	ADD	DWORD C_SIZE[EBP],4

	MOV	EAX,ML_STRUCT_SIZE
	CALL	MALLOC
	MOV	WORD ML_FLAGS[ESI],MLF_DOT_DOT_DOT
	XOR	EAX,EAX
	MOV	DWORD ML_FORMAT_STR[ESI],EAX
	MOV	DWORD ML_FORMAT_DATA[ESI],EAX
	MOV	DWORD ML_OUTPUT_FUN[ESI],EAX
	MOV	DWORD ML_INPUT_FUN[ESI],EAX
	MOV	WORD ML_PARAM_COUNT[ESI],AX
	MOV	DWORD ML_COUNT[ESI],127
	MOV	DWORD ML_NEXT[ESI],EAX
	MOV	EBX,DWORD [SYS_INTERNAL_TYPES+(4*IT_INT)]
	MOV	DWORD ML_CLASS[ESI],EBX
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,TXT_ARGV
	CALL	NEW_STRING
	MOV	EAX,EDI
	POP	ESI
	POP	EDI
	MOV	DWORD ML_STRING[ESI],EAX
	MOV	ECX,DWORD C_MEM_LIST_LAST[EBP]
	MOV	DWORD ML_NEXT[ECX],ESI
	MOV	DWORD C_MEM_LIST_LAST[EBP],ESI
	MOV	EAX,DWORD C_SIZE[EBP]	    //FUN PARAM
	MOV	DWORD ML_OFFSET[ESI],EAX
	ADD	DWORD C_SIZE[EBP],4
	JMP	DWORD @@100

@@2B:	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JNE	DWORD @@140
	MOV	EBX,DWORD LEX_HASH_ENTRY[EDI]
	OR	EBX,EBX
	JZ	DWORD @@140
@@2A:	XOR	EDX,EDX //PTR FLAG COUNT
@@2:	CALL	LEX_PUSH
	CALL	LEX	//SKIP TYPE
	CMP	EAX,'*'
	JNE	@@3
	INC	EDX
	CALL	LEX_SUB_STACK_PTR
	JMP	@@2
@@3:	CMP	EAX,TK_IDENT
	JNE	DWORD @@130
	MOV	EAX,ML_STRUCT_SIZE
	CALL	MALLOC
	XOR	EAX,EAX
	MOV	WORD ML_FLAGS[ESI],AX
	MOV	WORD ML_PARAM_COUNT[ESI],AX
	MOV	DWORD ML_FORMAT_STR[ESI],EAX
	MOV	DWORD ML_FORMAT_DATA[ESI],EAX
	MOV	DWORD ML_OUTPUT_FUN[ESI],EAX
	MOV	DWORD ML_INPUT_FUN[ESI],EAX
	MOV	DWORD ML_CLASS[ESI],EBX
	MOV	EAX,DWORD LEX_IDENT[EDI]
	MOV	DWORD ML_STRING[ESI],EAX
	MOV	DWORD LEX_IDENT[EDI],0
	MOV	DWORD ML_COUNT[ESI],0
	MOV	DWORD ML_NEXT[ESI],0
	MOV	ECX,DWORD C_MEM_LIST_LAST[EBP]
	MOV	DWORD ML_NEXT[ECX],ESI
	INC	WORD C_MEM_COUNT[EBP]
	MOV	DWORD C_MEM_LIST_LAST[EBP],ESI
	MOV	ECX,DWORD C_SIZE[EBX]
	CALL	LEX	//SKIP NAME
	CMP	EAX,'('
	JNE	@@4
	OR	WORD ML_FLAGS[ESI],MLF_FUNCTION
	CALL	LEX	//SKIP '('
	CMP	EAX,')'
	JE	@@6
	INC	WORD ML_PARAM_COUNT[ESI]
	CALL	LEX
@@5:	CMP	EAX,')'
	JE	@@6
	CMP	EAX,','
	JNE	@@7
@@8:	INC	WORD ML_PARAM_COUNT[ESI]
@@7:	CALL	LEX
	JMP	@@5

@@6:	CALL	LEX	//SKIP ')'
@@4:	CMP	EAX,'['
	JNE	@@80
	CALL	LEX	//SKIP [
	CALL	GET_EXPRESSION
	JC	DWORD @@120
	MOV	DWORD ML_COUNT[ESI],EAX
	CMP	DWORD LEX_TOKEN[EDI],']'
	JNE	DWORD @@105
	CALL	LEX	//SKIP ]
@@80:	MOV	EAX,C_STRUCT_SIZE
	MUL	EDX
	MOV	EDX,EAX
	ADD	ML_CLASS[ESI],EAX
	MOV	ECX,ML_CLASS[ESI]
	MOV	ECX,C_SIZE[ECX]
	TEST	WORD ML_FLAGS[ESI],MLF_FUNCTION
	JZ	@@72
	MOV	ECX,4
@@72:	MOV	EAX,DWORD ML_COUNT[ESI]
	OR	EAX,EAX
	JNZ	@@71
	INC	EAX
@@71:	MUL	ECX

	MOV	ECX,ESP
	MOV	ECX,[ECX]
	OR	ECX,ECX
	JNZ	@@75
	SUB	DWORD C_SIZE[EBP],EAX	    //FUN LOCAL VAR
	MOV	EAX,DWORD C_SIZE[EBP]
	MOV	DWORD ML_OFFSET[ESI],EAX
	CMP	DWORD LEX_TOKEN[EDI],'='
	JNE	DWORD @@98
	CALL	LEX_POP
	CALL	LEX
	PUSH	EBX
	PUSH	EBP
	MOV	EAX,3
	CALL	PARSE_STATEMENT
	POP	EBP
	POP	EBX
	JMP	DWORD @@99

@@75:	CMP	ECX,1
	JNE	@@76
	MOV	EAX,DWORD C_SIZE[EBP]	    //FUN PARAM
	MOV	DWORD ML_OFFSET[ESI],EAX
	ADD	DWORD C_SIZE[EBP],4
	CMP	DWORD LEX_TOKEN[EDI],'='
	JNE	DWORD @@98
	CALL	LEX
	CALL	GET_EXPRESSION
	JC	DWORD @@120
	MOV	DWORD ML_DEFAULT[ESI],EAX
	OR	WORD ML_FLAGS[ESI],MLF_DEFAULT_AVAILABLE
	JMP	@@98

@@76:	MOV	ECX,DWORD C_SIZE[EBP]	    //CLASS
	MOV	DWORD ML_OFFSET[ESI],ECX
	ADD	DWORD C_SIZE[EBP],EAX
	PUSH	EDX
@@10:	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JNE	@@9
	MOV	EDX,DWORD LEX_HASH_ENTRY[EDI]
	OR	EDX,EDX
	JZ	@@9
	TEST	DWORD HTE_TYPE[EDX],HTT_KEYWORD
	JZ	@@9
	CMP	DWORD HTE_USER0[EDX],KW_FORMAT_STR
	JNE	@@11
	CALL	LEX	//SKIP KEYWORD
	CMP	EAX,TK_STRING
	JNE	DWORD @@190
	CALL	LEX_EXTEND_STRING
	MOV	DWORD ML_FORMAT_STR[ESI],EAX
	JMP	@@10
@@11:	CMP	DWORD HTE_USER0[EDX],KW_FORMAT_DATA
	JNE	@@12
	CALL	LEX	//SKIP KEYWORD
	CALL	GET_EXPRESSION
	MOV	DWORD ML_FORMAT_DATA[ESI],EAX
	JMP	@@10
@@12:	CMP	DWORD HTE_USER0[EDX],KW_OUTPUT_FUN
	JNE	@@13
	CALL	LEX	//SKIP KEYWORD
	CALL	GET_EXPRESSION
	MOV	DWORD ML_OUTPUT_FUN[ESI],EAX
	JMP	@@10
@@13:	CMP	DWORD HTE_USER0[EDX],KW_INPUT_FUN
	JNE	@@9
	CALL	LEX	//SKIP KEYWORD
	CALL	GET_EXPRESSION
	MOV	DWORD ML_INPUT_FUN[ESI],EAX
	JMP	@@10

@@9:	POP	EDX
	JMP	@@98

@@98:	CALL	LEX_SUB_STACK_PTR	//(GROWS UP)
@@99:	MOV	ECX,ESP
	MOV	ECX,[ECX]
	CMP	DWORD LEX_TOKEN[EDI],','
	JNE	@@99A
	CMP	ECX,1
	JNE	DWORD @@2A
	CALL	LEX	//SKIP ,
	JMP	DWORD @@1
@@99A:	OR	ECX,ECX
	JZ	@@101
	CMP	DWORD LEX_TOKEN[EDI],')'
	JE	@@100
	CMP	DWORD LEX_TOKEN[EDI],'}'
	JE	@@100
	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	@@110
	CALL	LEX	//SKIP //
	JMP	DWORD @@1

@@100:	CALL	LEX	//SKIP } or )
@@101:	POP	EAX
	RET
@@105:	MOV	EAX,ST_MISSING_RIGHT_BRACKET
	JMP	DWORD TRAP
@@110:	MOV	EAX,ST_MISSING_SEMICOLON
@@120:	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_EXPECTING_IDENTIFIER
	JMP	DWORD TRAP
@@140:	MOV	EAX,ST_EXPECTING_TYPE
	JMP	DWORD TRAP
@@170:	MOV	EAX,ST_EXPECTING_LEFT_BRACE
	JMP	DWORD TRAP
@@180:	MOV	EAX,ST_MISSING_RIGHT_PAREN
	JMP	DWORD TRAP
@@190:	MOV	EAX,ST_EXPECTING_STRING
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
	ALIGN	4,0x90

//IN:	 EBP=CLASS MEMBER NODE
PARSE_LOCAL_VAR_LIST::
	XOR	EAX,EAX
	CALL	PARSE_VAR_LIST
	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	@@110
	CALL	LEX	//SKIP //
	RET
@@110:	MOV	EAX,ST_MISSING_SEMICOLON
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
STRING_EQUAL:
	DB	'=',0;
//IN:	 EDX=KEYWORD
//	 EBX=CLASS HASH ENTRY
	ALIGN	4,0x90
PARSE_GLOBAL_LIST::
	PUSH	EBP
@@2A:	PUSH	EBX
@@2:	CALL	LEX_PUSH
	CALL	LEX
	CMP	EAX,'*'
	JNE	@@10
	ADD	EBX,C_STRUCT_SIZE
	CALL	LEX_SUB_STACK_PTR
	JMP	@@2
@@10:	CMP	EAX,TK_IDENT
	JNE	DWORD @@120
	MOV	ESI,DWORD LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JZ	@@11
	TEST	DWORD HTE_TYPE[ESI],HTT_KEYWORD
	JZ	@@11
	CMP	DWORD HTE_USER0[ESI],KW_SYSFUN
	JE	DWORD PARSE_SYSFUN
	CMP	DWORD HTE_USER0[ESI],KW_INTERNAL
	JE	DWORD PARSE_INTERNAL
@@11:	PUSH	DWORD LEX_IDENT[EDI]
	MOV	DWORD LEX_IDENT[EDI],0
	CALL	LEX	//SKIP NAME
	CMP	EAX,'('
	JNE	@@12
	POP	ESI
	JMP	DWORD PARSE_FUN
@@12:	XOR	ECX,ECX
	CMP	EAX,'['
	JNE	@@50
	CALL	LEX	//SKIP '['
	CALL	GET_EXPRESSION
	JC	DWORD @@115
	MOV	ECX,EAX
	CMP	DWORD LEX_TOKEN[EDI],']'
	JNE	DWORD @@130
	CALL	LEX	//SKIP ']'
@@50:	MOV	EAX,DWORD C_SIZE[EBX]
	OR	ECX,ECX
	JZ	@@81
	MUL	ECX
@@81:	ADD	EAX,GVA_STRUCT_SIZE
	CALL	MALLOC
	XOR	EAX,EAX
	MOV	WORD GVA_FLAGS[ESI],AX
	MOV	WORD GVA_PARAM_COUNT[ESI],AX	    //This may never work
	MOV	DWORD GVA_CLASS[ESI],EBX
	POP	DWORD GVA_HASH_STRING[ESI]	  //+****
	MOV	DWORD GVA_COUNT[ESI],ECX
	MOV	EBP,ESI
	MOV	ESI,GVA_HASH_STRING[EBP]
	MOV	DWORD GVA_HASH_TYPE[EBP],HTT_GLOBAL_VARIABLE
	PUSH	EDI	//-****
	MOV	EDI,DWORD FS:[TSS_HASH_TABLE]
	CALL	FIND_HASH_BUCKET
	MOV	EAX,DWORD HTE_NEXT[ESI]
	MOV	DWORD GVA_HASH_NEXT[EBP],EAX
	MOV	DWORD HTE_NEXT[ESI],EBP
	POP	EDI	//+****
@@90:	CMP	DWORD LEX_TOKEN[EDI],'='
	JNE	@@98
	CALL	LEX_POP
	CALL	LEX
	PUSH	EBX
	XOR	EBP,EBP
	MOV	EAX,3
	CALL	PARSE_STATEMENT
	POP	EBX
	JMP	@@99

@@98:	CALL	LEX_SUB_STACK_PTR	//(GROWS UP)
@@99:	POP	EBX
	CMP	DWORD LEX_TOKEN[EDI],','
	JE	DWORD @@2A
	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	@@140
	CALL	LEX	//SKIP ';'
	POP	EBP
	RET
@@115:	JMP	DWORD TRAP
@@120:	MOV	EAX,ST_EXPECTING_IDENTIFIER
	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_MISSING_RIGHT_BRACKET
	JMP	DWORD TRAP
@@140:	MOV	EAX,ST_MISSING_SEMICOLON
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_CLASS::
	PUSH	EAX
	PUSH	EBP
	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JNE	@@110
	CALL	NEW_CLASS
	MOV	ESI,DWORD LEX_IDENT[EDI]
	MOV	DWORD C_HASH_STRING[EBP],ESI
	MOV	DWORD LEX_IDENT[EDI],0
	PUSH	EDI
	MOV	EDI,DWORD FS:[TSS_HASH_TABLE]
	CALL	FIND_HASH_BUCKET
	POP	EDI
	MOV	EAX,DWORD [ESI]
	MOV	DWORD C_HASH_NEXT[EBP],EAX
	MOV	DWORD [ESI],EBP
	CALL	LEX	//SKIP NAME
	MOV	EAX,2
	CALL	PARSE_VAR_LIST
@@100:	POP	EBP
	POP	EAX
	RET
@@110:	MOV	EAX,ST_EXPECTING_IDENTIFIER
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_FUN_COMMON::
	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JE	@@5
	MOV	EAX,ST_EXPECTING_IDENTIFIER
	JMP	DWORD TRAP
@@5:	MOV	ESI,DWORD LEX_IDENT[EDI]
	MOV	DWORD LEX_IDENT[EDI],0
	CALL	LEX	//SKIP NAME
PARSE_FUN_COMMON2::
	CALL	LEX_SUB_STACK_PTR
	CALL	NEW_CLASS
	MOV	DWORD C_RETURN_CLASS[EBP],EBX
	MOV	DWORD C_HASH_TYPE[EBP],HTT_FUNCTION
	MOV	DWORD C_HASH_STRING[EBP],ESI
	PUSH	EDI
	MOV	EDI,DWORD FS:[TSS_HASH_TABLE]
	CALL	FIND_HASH_BUCKET
	POP	EDI
	MOV	EAX,DWORD [ESI]
	MOV	DWORD C_HASH_NEXT[EBP],EAX
	MOV	DWORD [ESI],EBP
	MOV	EAX,1
	CALL	PARSE_VAR_LIST
	MOV	AX,WORD C_MEM_COUNT[EBP]
	MOV	WORD C_PARAM_COUNT[EBP],AX
	MOV	EDX,DWORD C_MEM_LIST[EBP]
@@10:	OR	EDX,EDX
	JZ	@@20
	ADD	DWORD ML_OFFSET[EDX],SF_PARAM1
	MOV	EDX,DWORD ML_NEXT[EDX]
	JMP	@@10
@@20:	MOV	DWORD C_SIZE[EBP],0
	RET
@@110:	MOV	EAX,ST_EXPECTING_IDENTIFIER
	JMP	DWORD TRAP

////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_FUN::
	CALL	PARSE_FUN_COMMON2
	MOV	DWORD LEX_LOCAL_VAR_LIST[EDI],EBP

	CALL	LEX_CB_PUSH
	CALL	INIT_CB_OUT_PTRS
	MOV	EAX,EC_ENTER
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT
	JC	DWORD DWORD TRAP
	MOV	EAX,EC_LEAVE
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	FIXUP_CODE
	MOV	ECX,DWORD FS:[TSS_OPTIMIZATION]
	CALL	COMPILE_CODE
	PUSH	ESI
	MOV	ESI,DWORD LEX_CB_OUT_FIRST[EDI]
	CALL	FREE
	MOV	ESI,DWORD LEX_CB_LABEL_LIST[EDI]
	CALL	DELETE_LINKED_LIST
	POP	ESI
	CALL	LEX_CB_POP
	MOV	EAX,DWORD C_SIZE[EBP]
	SUB	EAX,3
	AND	EAX,-4
	MOV	DWORD C_SIZE[EBP],EAX

	MOV	DWORD LEX_LOCAL_VAR_LIST[EDI],0
	MOV	DWORD C_STATEMENTS[EBP],ESI
	POP	EBX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_SYSFUN::
	CALL	LEX	//SKIP "sysfun"
	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JNE	@@110
	MOV	ESI,DWORD LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JZ	@@130
	TEST	DWORD HTE_TYPE[ESI],HTT_SYS_SYMBOL
	JZ	@@130
	PUSH	DWORD HTE_USER0[ESI]
	CALL	LEX	//SKIP SYMBOL NAME
	CALL	PARSE_FUN_COMMON
	POP	DWORD C_STATEMENTS[EBP]
	POP	EBX
	POP	EBP
	RET
@@110:	MOV	EAX,ST_EXPECTING_IDENTIFIER
	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_EXPECTING_SYS_SYMBOL
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_INTERNAL::
	CALL	LEX	//SKIP "internal"
	CALL	GET_EXPRESSION
	JC	DWORD DWORD TRAP
	PUSH	EAX
	CALL	PARSE_FUN_COMMON
	POP	DWORD C_STATEMENTS[EBP]
	BTS	DWORD C_FLAGS[EBP],CF_INTERNAL
	POP	EBX
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_IF::
	CMP	DWORD LEX_TOKEN[EDI],'('
	JNE	DWORD @@120
	CALL	LEX	//SKIP (
	CALL	CONT_PARSE_EXPRESSION
	JC	DWORD @@110
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,4
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	DWORD @@130
	CALL	LEX	//SKIP )
	CALL	NEW_LABEL
	PUSH	ESI		//-****
	MOV	EAX,EC_SKIPZ
	MOV	EBX,ESI
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT
	JC	@@110
	POP	EDX		//+****
	CALL	NEW_LABEL
	PUSH	ESI		//-****
	MOV	EAX,EC_JMP
	MOV	EBX,ESI
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_LABEL
	MOV	EBX,EDX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JNE	@@50
	MOV	ESI,LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JZ	@@50
	TEST	DWORD HTE_TYPE[ESI],HTT_KEYWORD
	JZ	@@50
	CMP	DWORD HTE_USER0[ESI],KW_ELSE
	JNE	@@50
	CALL	LEX	//SKIP "ELSE"
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT
	JC	@@110
@@50:	MOV	EAX,EC_LABEL
	POP	EBX		//+****
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
@@100:	RET
@@110:	JMP	DWORD TRAP
@@120:	MOV	EAX,ST_EXPECTING_LEFT_PAREN
	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_MISSING_RIGHT_PAREN
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_WHILE::
	CMP	DWORD LEX_TOKEN[EDI],'('
	JNE	@@120
	CALL	NEW_LABEL
	MOV	EAX,EC_LABEL
	MOV	EBX,ESI
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	PUSH	ESI	//-****
	CALL	NEW_LABEL
	PUSH	ESI	//-****
	CALL	LEX	//SKIP (
	CALL	CONT_PARSE_EXPRESSION
	JC	@@110
	POP	ESI	//+****
	POP	EDX	//+****
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,4
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_SKIPZ
	MOV	EBX,ESI
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	@@130
	CALL	LEX	//SKIP )
	PUSH	ESI	//-****
	PUSH	EDX	//-****
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT
	JC	@@110
	MOV	EAX,EC_JMP
	POP	EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_LABEL
	POP	EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
@@100:	RET
@@110:	JMP	DWORD TRAP
@@120:	MOV	EAX,ST_EXPECTING_LEFT_PAREN
	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_MISSING_RIGHT_PAREN
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
	ALIGN	4,0x90
PARSE_FOR::
	CMP	DWORD LEX_TOKEN[EDI],'('
	JNE	DWORD @@120
	CALL	LEX	//SKIP (
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT
	CALL	NEW_LABEL
	MOV	EAX,EC_LABEL
	MOV	EBX,ESI
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	PUSH	ESI	//-****
	CALL	NEW_LABEL
	PUSH	ESI	//-****
	CALL	CONT_PARSE_EXPRESSION
	JC	DWORD @@140
	POP	ESI	//+****
	POP	EDX	//+****
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,4
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_SKIPZ
	MOV	EBX,ESI
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	PUSH	ESI	//-****
	PUSH	EDX	//-****

	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	DWORD @@140
	CALL	LEX	//SKIP //
	CALL	LEX_CB_PUSH
	CALL	INIT_CB_OUT_PTRS
	MOV	EAX,1
	CALL	PARSE_STATEMENT
	XOR	EAX,EAX
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	CALL	LEX_CB_POP_NO_FREE
	PUSH	ESI	//-****
	CALL	LEX_CB_POP

	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	@@130
	CALL	LEX	//SKIP )
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT
	JC	@@110
	POP	ESI	//+****
	CALL	LEX_CB_APPEND
	MOV	EAX,EC_JMP
	POP	EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_LABEL
	POP	EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
@@100:	RET
@@110:	JMP	DWORD TRAP
@@120:	MOV	EAX,ST_EXPECTING_LEFT_PAREN
	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_MISSING_RIGHT_PAREN
	JMP	DWORD TRAP
@@140:	MOV	EAX,ST_MISSING_SEMICOLON
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
//	 EBP=LOCAL VARIABLE CLASS OR NULL
//	 EAX=FLAGS, 1=DON'T CHECK FOR // 2=STOP ON ','
// OUT:  ESI=STATEMENT NODE
	ALIGN	4,0x90
PARSE_STATEMENT::
	PUSH	EBP
	PUSH	EAX
@@1A:	CMP	DWORD LEX_TOKEN[EDI],'{'
	JNE	@@5
	CALL	LEX	//SKIP {
	XOR	EAX,EAX
@@1:	CALL	PARSE_STATEMENT
	JC	DWORD @@120
	CMP	DWORD LEX_TOKEN[EDI],'}'
	JNE	@@1
	CALL	LEX	//SKIP {
	JMP	DWORD @@100

@@5:	CMP	DWORD LEX_TOKEN[EDI],'?'
	JNE	@@6
	CALL	LEX	//SKIP ?
	MOV	EDX,1	//PARAM COUNT
@@5B:	PUSH	EDX	//-****
	CALL	CONT_PARSE_EXPRESSION
	JC	DWORD @@120
	MOV	EAX,EC_TYPE
	MOV	EBX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	EBX,DWORD IC_CLASS[EBX]
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	POP	EDX	//+****
	CMP	DWORD LEX_TOKEN[EDI],','
	JNE	@@5A
	CALL	LEX	//SKIP ,
	INC	EDX
	JMP	@@5B
@@5A:	MOV	EAX,EC_INT32
	MOV	EBX,EDX
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_PRINTF
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,EDX
	SHL1	EBX   //CLASS+VALUE
	INC	EBX	//PARAM COUNT
	SHL	EBX,2
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	DWORD @@90

@@6:	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	@@10
	POP	EAX
	PUSH	EAX
	TEST	EAX,1
	JNZ	DWORD @@100
	CALL	LEX	//SKIP //
	JMP	DWORD @@100

@@10:	CMP	DWORD LEX_TOKEN[EDI],TK_EOF
	JE	DWORD @@100
	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JNE	DWORD @@55
	MOV	EBX,LEX_HASH_ENTRY[EDI]
	OR	EBX,EBX
	JE	DWORD @@55
	TEST	DWORD HTE_TYPE[EBX],HTT_KEYWORD
	JZ	DWORD @@50
@@20:	CMP	DWORD HTE_USER0[EBX],KW_CLASS
	JNE	@@30
	CALL	LEX	//SKIP IDENT
	CALL	PARSE_CLASS
	JMP	DWORD @@1A
@@30:	CMP	DWORD HTE_USER0[EBX],KW_IF
	JNE	@@46
	CALL	LEX	//SKIP IDENT
	CALL	PARSE_IF
	JMP	DWORD @@100
@@46:	CMP	DWORD HTE_USER0[EBX],KW_WHILE
	JNE	@@47
	CALL	LEX	//SKIP IDENT
	CALL	PARSE_WHILE
	JMP	DWORD @@100
@@47:	CMP	DWORD HTE_USER0[EBX],KW_FOR
	JNE	@@49
	CALL	LEX	//SKIP IDENT
	CALL	PARSE_FOR
	JMP	DWORD @@100
@@49:	CMP	DWORD HTE_USER0[EBX],KW_RETURN
	JNE	@@55
	CALL	LEX	//SKIP IDENT
	CMP	EAX,';'
	JE	@@49A
	CALL	CONT_PARSE_EXPRESSION
	JC	DWORD @@120
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,4
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
@@49A:	OR	EBP,EBP
	JZ	@@49B
	MOV	EAX,EC_LEAVE
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@90
@@49B:	MOV	EAX,EC_RET
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@90

@@50:	TEST	DWORD HTE_TYPE[EBX],HTT_CLASS+HTT_INTERNAL_TYPE
	JZ	@@55
	OR	EBP,EBP
	JZ	@@53
	CALL	PARSE_LOCAL_VAR_LIST
	JMP	DWORD @@1A
@@53:	CALL	PARSE_GLOBAL_LIST
	JMP	@@100
@@55:	CALL	CONT_PARSE_EXPRESSION
	JC	@@120
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,4
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE

@@90:	POP	EAX
	PUSH	EAX
	CMP	DWORD LEX_TOKEN[EDI],','
	JNE	@@91
	TEST	EAX,2
	JNZ	@@100
	CALL	LEX	//SKIP ','
	JMP	DWORD @@1A
@@91:	TEST	EAX,1
	JNZ	@@100
	CMP	DWORD LEX_TOKEN[EDI],';'
	JNE	@@150
	CALL	LEX	//SKIP ';'

@@100:	CLC
	POP	EAX
	POP	EBP
	RET

@@110:	MOV	EAX,ST_MISSING_RIGHT_BRACE
@@120:	JMP	DWORD TRAP
@@130:	MOV	EAX,ST_INVALID_LVALUE
	JMP	DWORD TRAP
@@150:	MOV	EAX,ST_MISSING_SEMICOLON
	JMP	DWORD TRAP
////**************************PROCEDURE*************************
// IN:	 EDI=LEX_NODE
// OUT:  ESI=STATEMENT CODE
//	 ECX=CODE LENGTH
	ALIGN	4,0x90
COMPILE_STATEMENT::
	PUSH	EBX
	MOV	EBX,PARSE_ERROR
	MOV	ECX,ESP
	ADD	ECX,4
	CALL	REGISTER_TRAP
	PUSH	EDX
	PUSH	EDI
	PUSH	EBP

	CALL	INIT_CB_OUT_PTRS
	XOR	EAX,EAX
	CALL	PARSE_STATEMENT

	MOV	EAX,EC_RET
	XOR	EBX,EBX
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE

	CALL	FIXUP_CODE
	MOV	ECX,DWORD FS:[TSS_OPTIMIZATION]
	CALL	COMPILE_CODE
	PUSH	ESI
	MOV	ESI,DWORD LEX_CB_OUT_FIRST[EDI]
	CALL	FREE
	MOV	ESI,DWORD LEX_CB_LABEL_LIST[EDI]
	CALL	DELETE_LINKED_LIST
	POP	ESI

@@100:	CALL	END_TRAP
	CLC
	POP	EBP
	POP	EDI
	POP	EDX
	POP	EBX
	RET
	END

	ALIGN	16
	USE16
	JMP	WORD HOPPY_START

	ALIGN	16
GDTTAB::		DB	MAXGDT*8 DUP(?);
FREE_GDT_LIST::		DD	?;
ROOT_TSS::		DB	TSS_STRUCT_SIZE DUP(?);
ROOT_TSS_MEM_SEL::	DD	?;

	ALIGN	4
IDTTAB::	DB	MAXIDT*8 DUP(?);

SYS_FLAGS::		DD	0x80; //RAW_CRT_OUT=0x80 NON_VGA=0x400
SYS_BOOT_START::	DD	?;
SYS_TEMP_PTR::		DD	?,?;
SYS_BOOT_BASE::		DD	?;
SYS_MEMORY_BASE::	DD	?;
SYS_HASH_TABLE::	DD	?;
SYS_INTERNAL_TYPES::	DD	IT_STRUCT_SIZE DUP(0);
SYS_TEXT_BASE::		DD	?;
SYS_GRAPHICS_BASE::	DD	?;
SYS_GRAPHICS_HIDDEN::	DD	?;
SYS_CLIPBOARD_LTF::	DD	?;
SYS_HEAP_BASE::		DD	?;
SYS_CURRENT_SCAN_CODE::	DD	0;
SYS_BPT_LIST::		DD	0;
SYS_STRING_TABLE::	DD	0;
SYS_EXTERN_TABLE::	DD	0;
MEMORY_FREE_LIST::	DD	0;
JIFFIES:: 		DD 	0;
PROGRESS0::		DD	0;
PROGRESS1::		DD	0;
PROGRESS2::		DD	0;
PROGRESS3::		DD	0;
PROGRESS4::		DD	0;
DC_COL::		DD	0; //For raw putchar
FAULTING_TSS::		DD	0;
FAULTING_IRQ_NUM::	DD	0;
SYS_CUR_TASK_DESC::	DB	TSS_DESC_LENGTH+1 DUP (?);
SYMBOL_TABLE:
	DD	HTT_KEYWORD,KW_CLASS,0,0;
	DB	"class",0;
	DD	HTT_KEYWORD,KW_CLASS,0,0;
	DB	"struct",0;
	DD	HTT_KEYWORD,KW_FUN,0,0;
	DB	"fun",0;
	DD	HTT_KEYWORD,KW_SYSFUN,0,0;
	DB	"sysfun",0;
	DD	HTT_KEYWORD,KW_IF,0,0;
	DB	"if",0;
	DD	HTT_KEYWORD,KW_ELSE,0,0;
	DB	"else",0;
	DD	HTT_KEYWORD,KW_FOR,0,0;
	DB	"for",0;
	DD	HTT_KEYWORD,KW_WHILE,0,0;
	DB	"while",0;
	DD	HTT_KEYWORD,KW_EXIT,0,0;
	DB	"exit",0;
	DD	HTT_KEYWORD,KW_INCLUDE,0,0;
	DB	"include",0;
	DD	HTT_KEYWORD,KW_DEFINE,0,0;
	DB	"define",0;
	DD	HTT_KEYWORD,KW_RETURN,0,0;
	DB	"return",0;
	DD	HTT_KEYWORD,KW_SIZEOF,0,0;
	DB	"sizeof",0;
	DD	HTT_KEYWORD,KW_INTERNAL,0,0;
	DB	"internal",0;
	DD	HTT_KEYWORD,KW_TYPEOF,0,0;
	DB	"typeof",0;
	DD	HTT_KEYWORD,KW_FORMAT_STR,0,0;
	DB	"format_str",0;
	DD	HTT_KEYWORD,KW_FORMAT_DATA,0,0;
	DB	"format_data",0;
	DD	HTT_KEYWORD,KW_OUTPUT_FUN,0,0;
	DB	"output_fun",0;
	DD	HTT_KEYWORD,KW_INPUT_FUN,0,0;
	DB	"input_fun",0;

	DD	HTT_INTERNAL_TYPE,IT_BYTE,1,EC_ZBD+0x100+65536*(EC_ASSIGN8+0x700);
	DB	"BYTE",0;
	DD	HTT_INTERNAL_TYPE,IT_CHAR,1,EC_SBD+0x100+65536*(EC_ASSIGN8+0x700);
	DB	"char",0;
	DD	HTT_INTERNAL_TYPE,IT_WORD,2,EC_ZWD+0x100+65536*(EC_ASSIGN16+0x700);
	DB	"WORD",0;
	DD	HTT_INTERNAL_TYPE,IT_SHORT,2,EC_SWD+0x100+65536*(EC_ASSIGN16+0x700);
	DB	"short",0;
	DD	HTT_INTERNAL_TYPE,IT_DWORD,4,EC_DEREFERENCE+0x100+65536*(EC_ASSIGN32+0x700);
	DB	"DWORD",0;
	DD	HTT_INTERNAL_TYPE,IT_INT,4,EC_DEREFERENCE+0x100+65536*(EC_ASSIGN32+0x700);
	DB	"void",0;
	DD	HTT_INTERNAL_TYPE,IT_INT,4,EC_DEREFERENCE+0x100+65536*(EC_ASSIGN32+0x700);
	DB	"int",0;
	DD	HTT_INTERNAL_TYPE,IT_DOUBLE,8,EC_DEREFERENCE+0x100+65536*(EC_ASSIGN32+0x700);
	DB	"double",0;

	DD	HTT_INVALID;
////**************************PROCEDURE*************************
HOPPY_START::			//Assumes stack set-up by boot code
	CLI
	CLD			//Start with known registers
	MOV	AX,CS
	MOV	DS,AX
	MOV	ES,AX
	MOV	FS,AX
	MOV	GS,AX
	XOR	EAX,EAX
	XOR	EBX,EBX
	XOR	ECX,ECX
	XOR	EDX,EDX
	XOR	ESI,ESI
	XOR	EDI,EDI
	XOR	EBP,EBP

//Enable A20
	IN	AL,0x92
	OR	AL,2
	OUT	0x92,AL

	STI
//Enter Graphics Mode
	BT	WORD [SYS_FLAGS],SYSF_NON_VGA
	JC	@@1
	MOV	AX,0x6A 	 //800x600
	INT	0x10		//ENABLE VGA

@@1:	XOR	AX,AX
	XOR	DX,DX
	INT	0x13	//reset drive
	CLI

	XOR	EAX,EAX
	MOV	AX,CS
	SHL	EAX,4
	MOV	DWORD [SYS_BOOT_BASE],EAX
	MOV	DWORD [GDTTAB+SYS_BOOT_DS_SEL],0x000FFFF
	MOV	DWORD [GDTTAB+SYS_BOOT_DS_SEL+4],0x0CF9200
	MOV	DWORD [GDTTAB+SYS_BOOT_CS_SEL],0x000FFFF
	MOV	DWORD [GDTTAB+SYS_BOOT_CS_SEL+4],0x0CF9A00
	MOV	EAX,DWORD [SYS_BOOT_BASE]
	ADD	DWORD [GDTTAB+SYS_BOOT_DS_SEL+2],EAX
	ADD	DWORD [GDTTAB+SYS_BOOT_CS_SEL+2],EAX

					// SETUP POINTER TO LIMIT AND BASE
					//OF GDT.  USE ENTRY (0) BECAUSE IT IS
					//INVALID.
	MOV	WORD [SYS_TEMP_PTR],MAXGDT*8-1
	MOV	EAX,DWORD [SYS_BOOT_BASE]
	ADD	EAX,GDTTAB+NULL_SEL
	MOV	DWORD [SYS_TEMP_PTR+2],EAX
	XOR	AX,AX
	MOV	WORD [SYS_TEMP_PTR+6],AX

//	  LGDT	  FWORD SYS_TEMP_PTR
	DB	0x67,0x0F,0x01,0x15;
	DD	SYS_TEMP_PTR;

//	  MOV	  EAX,CR0		  //ENTER PROTECTED MODE!!
	DB	0x0F,0x20,0xC0;

	OR	AL,1


//	  MOV	  CR0,EAX
	DB	0x0F,0x22,0xC0;

	DB	0x66,0xEA;		 //JMP SYS_CS_SEL:INIT_OS
	DD	INIT_OS;
	DW	SYS_BOOT_CS_SEL;

////**************************PROCEDURE*************************
	ALIGN 16,0x90
	USE32
INIT_OS::
	MOV	AX,SYS_BOOT_DS_SEL	//LOAD DS SELECTOR
	MOV	DS,AX
	MOV	ES,AX

	MOV	DWORD [GDTTAB+CRT_SEL],0x8000FFFF
	MOV	DWORD [GDTTAB+CRT_SEL+4],0x00CF920B
	MOV	DWORD [GDTTAB+ZERO_DS_SEL],0x0000FFFF
	MOV	DWORD [GDTTAB+ZERO_DS_SEL+4],0x00CF9200


	MOV	DWORD [GDTTAB+SYS_DS_SEL],0x0000FFFF
	MOV	DWORD [GDTTAB+SYS_DS_SEL+4],0x00CF9200
	MOV	DWORD [GDTTAB+SYS_CS_SEL],0x0000FFFF
	MOV	DWORD [GDTTAB+SYS_CS_SEL+4],0x00CF9A00
	MOV	EBX,HIGH_ADDRESS
	MOV	DWORD [SYS_MEMORY_BASE],EBX
	MOV	ECX,EBX
	AND	ECX,0x0FFFFFF
	ADD	DWORD [GDTTAB+2+SYS_DS_SEL],ECX
	ADD	DWORD [GDTTAB+2+SYS_CS_SEL],ECX
	AND	EBX,0x0FF000000
	ADD	DWORD [GDTTAB+4+SYS_DS_SEL],EBX
	ADD	DWORD [GDTTAB+4+SYS_CS_SEL],EBX

/*
	MOV	DWORD [GDTTAB+ROOT_TSS_SEL],TSS_STRUCT_SIZE-1
	MOV	DWORD [GDTTAB+ROOT_TSS_SEL+4],0x0008900
	MOV	EBX,HIGH_ADDRESS+ROOT_TSS
	MOV	ECX,EBX
	AND	ECX,0xFFFFFF
	ADD	DWORD [GDTTAB+2+ROOT_TSS_SEL],ECX
	AND	EBX,0xFF000000
	ADD	DWORD [GDTTAB+4+ROOT_TSS_SEL],EBX
*/

//COPY HIGH
	MOV	EDI,HIGH_ADDRESS		//TRANSFER CS
	SUB	EDI,DWORD [SYS_BOOT_BASE]
	XOR	ESI,ESI
	MOV	ECX,SYS_CS_SIZE
	SHR	ECX,2
	CLD
	REP_MOVSD

	MOV	WORD [SYS_TEMP_PTR],MAXGDT*8-1
	MOV	DWORD [SYS_TEMP_PTR+2],HIGH_ADDRESS+GDTTAB+NULL_SEL
	MOV	WORD [SYS_TEMP_PTR+6],0

//	  LGDT	  FWORD SYS_TEMP_PTR
	DB   	0x0F,0x01,0x15;
	DD	SYS_TEMP_PTR;

	MOV	AX,SYS_DS_SEL
	MOV	DS,AX
	MOV	ES,AX
	MOV	FS,AX
	MOV	GS,AX
	MOV	SS,AX
	MOV	ESP,0x200000		//TEMP

	DB	0xEA;		      //JMP SYS_CS_SEL:CONT_INIT_OS
	DD	CONT_INIT_OS;
	DW	SYS_CS_SEL;

CONT_INIT_OS:
	MOV	EAX,SYS_CS_SIZE
	ADD	EAX,PAGE_SIZE-1
	AND	EAX,0-PAGE_SIZE
	ADD	DWORD [SYS_HEAP_BASE],EAX
	CALL	INIT_MEMORY

//INIT INTERRUPT TABLE
	MOV	ECX,MAXIDT
	MOV	EDI,IDTTAB
	MOV	ESI,IRQ_VECTORS
@@1:	LODSD
	ADD	EAX,65536*SYS_CS_SEL
	STOSD
	MOV	EAX,0x0008E00 //E=32-bit irq gate
	STOSD
	LOOP	@@1

	CALL	INIT_8259_AND_LIDT

//INIT FREE GDT ENTRIES
	MOV	DWORD [FREE_GDT_LIST],0
	MOV	ECX,MAXGDT-FIRST_FREE_SEL/8
	MOV	EAX,FIRST_FREE_SEL
@@3:	MOV	EBX,DWORD [FREE_GDT_LIST]
	MOV	DWORD GDTTAB[EAX],EBX
	MOV	DWORD [FREE_GDT_LIST],EAX
	ADD	EAX,8
	LOOP	@@3

//INIT SYSTEM TSS
	MOV	EDI,ROOT_TSS
//	MOV	EDX,ROOT_TSS_SEL
	MOV	EAX,ROOT_COMMAND_LINE
	MOV	ECX,DEFAULT_STACK
	CALL	INIT_TSS
	MOV	DWORD [ROOT_TSS_MEM_SEL],EDX
	MOV	FS,DX
	MOV	ESP,DWORD FS:[TSS_ESP]

	CALL	INIT_SYSTEXT_AND_EXTERNS
	MOV	DWORD FS:[TSS_STRING_TABLE],ESI
//INIT SYSTEM HASH TABLE
	MOV	EAX,0x4000
	CALL	NEW_HASH_TABLE
	MOV	DWORD [SYS_HASH_TABLE],EDI
	MOV	ESI,DWORD FS:[TSS_HASH_TABLE]
	MOV	DWORD HT_NEXT[ESI],EDI

//INIT CRT
	MOV	EAX,SCREEN_COLS*SCREEN_LINES*2
	CALL	MALLOC
	MOV	DWORD [SYS_TEXT_BASE],ESI
	ADD	ESI,DWORD [SYS_MEMORY_BASE]
	BT	DWORD [SYS_FLAGS],SYSF_NON_VGA
	JC	@@2
	MOV	DWORD [GDTTAB+CRT_SEL],0x000FFFF
	MOV	DWORD [GDTTAB+4+CRT_SEL],0x0CF9200
	MOV	ECX,ESI
	AND	ECX,0xFFFFFF
	ADD	DWORD [GDTTAB+2+CRT_SEL],ECX
	AND	ESI,0xFF000000
	ADD	DWORD [GDTTAB+4+CRT_SEL],ESI

@@2:	MOV	EAX,SCREEN_WIDTH*SCREEN_HEIGHT/8*4
	CALL	MALLOC
	MOV	DWORD [SYS_GRAPHICS_BASE],ESI
	CALL	CMD_GR_CLEAR
	MOV	EAX,SCREEN_WIDTH*SCREEN_HEIGHT/8*4
	CALL	MALLOC
	MOV	DWORD [SYS_GRAPHICS_HIDDEN],ESI

	CALL	INIT_CRT
	MOV	BYTE FS:[TSS_TEXT_ATTRIBUTE],0xF1
	MOV	BYTE FS:[TSS_BORDER_ATTRIBUTE],0xF9
	BTS	WORD FS:[TSS_CRT_FLAGS],CRTF_WRAP_AROUND
	CALL	CLEAR_CRT
	CALL	CURSOR_OFF
	INC	DWORD FS:[TSS_WINDOW_TOP]
	CALL	CURSOR_HOME

	BTS	WORD FS:[TSS_TASK_FLAGS],TSSF_ECHO
	CALL	ADD_OS_HASH_ENTRIES
	CALL	ADD_MAP_SYMBOLS

	PUSH	SYS_DEFAULT_FLAGS   //ENABLE IRQ'S
	POPFD
	JMP	DWORD ROOT_COMMAND_LINE
////**************************PROCEDURE*************************
	ALIGN	4,0x90
ADD_OS_HASH_ENTRIES::
	MOV	ESI,SYMBOL_TABLE
	MOV	EDI,DWORD [SYS_HASH_TABLE]
ADD_USER_HASH_ENTRIES::
@@1:	MOV	EDX,DWORD [ESI]
	CMP	EDX,HTT_INVALID
	JE	@@100
@@2:	MOV	ECX,DWORD 4[ESI]
	PUSH	ECX		  //-**** USER0
	PUSH	DWORD 8[ESI]  //-**** USER1
	PUSH	DWORD 12[ESI] //-**** USER2
	ADD	ESI,16
	PUSH	EDI	//-****
	PUSH	ESI	//-****
	TEST	EDX,HTT_INTERNAL_TYPE
	JZ	@@3
	CALL	NEW_CLASS
	MOV	EBX,EBP
	MOV	DWORD SYS_INTERNAL_TYPES[ECX*4],EBX
	JMP	@@4

@@3:	MOV	EAX,HTE_STRUCT_SIZE
	CALL	MALLOC
	MOV	EBX,ESI
@@4:	MOV	DWORD HTE_TYPE[EBX],EDX
	POP	ESI	//+****
	CALL	NEW_STRING
	MOV	DWORD HTE_STRING[EBX],EDI
	CALL	STRLEN
	INC	EAX
	ADD	ESI,EAX
	POP	EDI	//+****
	POP	DWORD HTE_USER2[EBX]	    //+****
	POP	DWORD HTE_USER1[EBX]	    //+****
	POP	DWORD HTE_USER0[EBX]	    //+****
	PUSH	ESI	//-****
	MOV	ESI,DWORD HTE_STRING[EBX]
	CALL	FIND_HASH_BUCKET
	MOV	EAX,DWORD [ESI]
	MOV	DWORD HTE_NEXT[EBX],EAX
	MOV	DWORD [ESI],EBX
	POP	ESI	//+****
	JMP	@@1
@@100:	RET
////**************************PROCEDURE*************************
// IN:	 EAX=CODE ADDRESS
//	 ECX=STACK SIZE
//	 ESI=DESC
// OUT:  EDI=TASK ADDRESS
	ALIGN	4,0x90
SPAWN_TASK::
	PUSHFD
	PUSH	ESI
	PUSH	EDX
	CLI
	PUSH	EAX	//-****
	MOV	EAX,TSS_STRUCT_SIZE
	CALL	RMALLOC
	POP	EAX	//+****
	MOV	EDI,ESI
	XOR	EDX,EDX
	CALL	INIT_TSS
	CALL	ADD_TASK_TO_QUEUE
	MOV	EDX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	MOV	DWORD TSS_PARENT_TSS[EDI],EDX
	POP	EDX
	POP	ESI

	PUSH	ESI
	PUSH	EDI
	MOV	ECX,TSS_DESC_LENGTH
	ADD	EDI,TSS_TASK_DESCRIPTOR
	REP_MOVSB
	XOR	EAX,EAX
	STOSB
	POP	EDI
	POP	ESI

	POPFD
	RET

////**************************PROCEDURE*************************
// IN:	 [EDI] POINTS TO TSS
//	 DX  = THE SELECTOR OF THE TSS (0 MEANS CREATE A NEW SELECTOR)
//	 EAX = STARTING EIP
//	 ECX = STACK SIZE
// OUT:  DX  = TSS MEMORY DESCRIPTOR
INIT_TSS::
	PUSHFD
	PUSH	ES
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	CLI			//FOR MEM ALLOC FS CHANGE

	PUSH	ECX
	PUSH	EAX
	PUSH	EDI
	MOV	ECX,TSS_STRUCT_SIZE/4
	XOR	EAX,EAX
	REP_STOSD
	POP	EDI
	POP	DWORD TSS_EIP[EDI]

	MOV	EAX,SYS_CS_SEL
	MOV	DWORD TSS_CS[EDI],EAX
	MOV	EAX,SYS_DS_SEL
	MOV	DWORD TSS_DS[EDI],EAX
	MOV	DWORD TSS_ES[EDI],EAX
	MOV	DWORD TSS_GS[EDI],EAX

	MOV	DWORD TSS_ABSOLUTE_ADDRESS[EDI],EDI
	MOV	WORD TSS_IO_BITMAP_PTR [EDI],TSS_IO_BITMAP
	MOV	DWORD TSS_NEXT_TSS[EDI],EDI
	MOV	DWORD TSS_LAST_TSS[EDI],EDI
	MOV	DWORD TSS_EFLAGS[EDI],SYS_DEFAULT_FLAGS
	MOV	DWORD TSS_CR3[EDI],SYS_DEFAULT_CR3
	MOV	EAX,DWORD [SYS_STRING_TABLE]
	MOV	DWORD TSS_STRING_TABLE[EDI],EAX
	MOV	DWORD TSS_OPTIMIZATION[EDI],0x7F
	LEA	EAX,DWORD TSS_NEXT_SLAVE_CMD[EDI]
	MOV	DWORD TSS_NEXT_SLAVE_CMD[EDI],EAX
	MOV	DWORD TSS_LAST_SLAVE_CMD[EDI],EAX
	LEA	EAX,DWORD TSS_NEXT_MASTER_CMD[EDI]
	MOV	DWORD TSS_NEXT_MASTER_CMD[EDI],EAX
	MOV	DWORD TSS_LAST_MASTER_CMD[EDI],EAX

/*
	OR	DX,DX
	JNZ	@@1
	CALL	CREATE_TSS_SELECTOR
@@1:	MOV	WORD TSS_SELECTOR[EDI],DX
*/
	MOV	EAX,EDI
	ADD	EAX,DWORD [SYS_MEMORY_BASE]
	CALL	CREATE_MEMORY_SELECTOR		//TODO:Keep track
	MOV	WORD TSS_FS[EDI],DX

	POP	EAX
	ADD	EAX,PAGE_SIZE-1		//BLOCKS FOR STACK
	SHR	EAX,PAGE_BITS
	PUSH	EAX
	PUSH	FS			//-****
	MOV	FS,DX			//ALLOC TO THIS PROC NEARESS
	CALL	DWORD ALLOCATE_MEMORY_BLOCKS
	PUSH	ESI			//-****
	PUSH	EDI
	MOV	EAX,0x1000
	CALL	NEW_HASH_TABLE
	MOV	ESI,EDI
	MOV	EDI,DWORD [SYS_HASH_TABLE]
	MOV	DWORD HT_NEXT[ESI],EDI
	POP	EDI
	MOV	DWORD TSS_HASH_TABLE[EDI],ESI
	POP	ESI			//+****
	POP	FS			//+****
	POP	EAX
	SHL	EAX,PAGE_BITS
	ADD	EAX,ESI

	MOV	EBX,SYS_DS_SEL
	MOV	DWORD TSS_SS0[EDI],EBX
	MOV	DWORD TSS_SS1[EDI],EBX
	MOV	DWORD TSS_SS2[EDI],EBX
	MOV	DWORD TSS_SS[EDI],EBX
	MOV	DWORD TSS_ESP0[EDI],EAX
	MOV	DWORD TSS_ESP1[EDI],EAX
	MOV	DWORD TSS_ESP2[EDI],EAX
	MOV	DWORD TSS_ESP[EDI],EAX

	BT	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	JC	@@2
	BTR	WORD TSS_TASK_FLAGS[EDI],TSSF_PREEMPT
	JMP	@@3
@@2:	BTS	WORD TSS_TASK_FLAGS[EDI],TSSF_PREEMPT

@@3:	MOV	ECX,MAXIO/32
	MOV	EAX,0xFFFFFFFF
	ADD	EDI,TSS_IO_BITMAP
	REP_STOSD

	POP	EDI
	POP	ESI
	POP	EBX
	POP	ES
	POPFD
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=BASE (ABSOLUTE NOT REL TO DS)
// OUT:  EBX=@NEW SELECTOR (IN GDT TABLE)
//	  DX=SELECTOR

	ALIGN	4,0x90
CREATE_MEMORY_SELECTOR::
	PUSH	DS		//-****
	PUSH	ECX
	MOV	BX,SYS_DS_SEL
	MOV	DS,BX

	MOV	EDX,DWORD [FREE_GDT_LIST]
	MOV	EBX,DWORD GDTTAB[EDX]
	MOV	DWORD [FREE_GDT_LIST],EBX
	MOV	EBX,EDX
	ADD	EBX,GDTTAB

	MOV	DWORD [EBX],0x0000FFFF
	MOV	DWORD 4[EBX],0x00CF9200
	MOV	ECX,EAX
	AND	ECX,0xFFFFFF
	ADD	DWORD 2[EBX],ECX
	AND	EAX,0xFF000000
	ADD	DWORD 4[EBX],EAX

	POP	ECX
	POP	DS		//+****
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=BASE (ABSOLUTE NOT REL TO DS)
// OUT:  EBX=@NEW SELECTOR (IN GDT TABLE)
//	  DX=SELECTOR

/*
	ALIGN	4,0x90
CREATE_CODE_SELECTOR::
	PUSH	DS		//-****
	PUSH	ECX
	MOV	BX,SYS_DS_SEL
	MOV	DS,BX

	MOV	EDX,DWORD [FREE_GDT_LIST]
	MOV	EBX,DWORD GDTTAB[EDX]
	MOV	DWORD [FREE_GDT_LIST],EBX
	MOV	EBX,EDX
	ADD	EBX,GDTTAB

	MOV	DWORD [EBX],0x0000FFFF
	MOV	DWORD 4[EBX],0x00CF9A00
	MOV	ECX,EAX
	AND	ECX,0xFFFFFF
	ADD	DWORD 2[EBX],ECX
	AND	EAX,0xFF000000
	ADD	DWORD 4[EBX],EAX

	POP	ECX
	POP	DS		//+****
	RET
*/
////**************************PROCEDURE*************************
// IN:	 EDI=BASE OF TSS REL TO DS
// OUT:  EBX=@NEW SELECTOR (IN GDT TABLE)
//	  DX=SELECTOR
/*
	ALIGN	4,0x90
CREATE_TSS_SELECTOR::
	PUSH	EDI		//-****
	PUSH	ECX

	MOV	EDX,DWORD [FREE_GDT_LIST]
	MOV	EBX,DWORD GDTTAB[EDX]
	MOV	DWORD [FREE_GDT_LIST],EBX
	MOV	EBX,EDX
	ADD	EBX,GDTTAB

	MOV	DWORD [EBX],TSS_STRUCT_SIZE-1
	MOV	DWORD 4[EBX],0x0008900
	ADD	EDI,DWORD [SYS_MEMORY_BASE]
	MOV	ECX,EDI
	AND	ECX,0xFFFFFF
	ADD	DWORD 2[EBX],ECX
	AND	EDI,0xFF000000
	ADD	DWORD 4[EBX],EDI

	POP	ECX
	POP	EDI		//+****
	RET
*/
////**************************PROCEDURE*************************
	ALIGN	4,0x90
INIT_8259_AND_LIDT::
	MOV	AL,0x15      //IW1
	OUT	0x20,AL
	OUT	0xEB,AL
	OUT	0xA0,AL
	OUT	0xEB,AL

	MOV	AL,0x20      //IW2
	OUT	0x21,AL
	OUT	0xEB,AL
	MOV	AL,0x28
	OUT	0xA1,AL
	OUT	0xEB,AL

	MOV	AL,4	   //IW3
	OUT	0x21,AL
	OUT	0xEB,AL
	MOV	AL,2
	OUT	0xA1,AL
	OUT	0xEB,AL

	MOV	AL,0xD	    //IW4
	OUT	0x21,AL
	OUT	0xEB,AL
	MOV	AL,9
	OUT	0xA1,AL
	OUT	0xEB,AL

	XOR	AL,AL
	OUT	0x21,AL
	OUT	0xEB,AL
	OUT	0xA1,AL
	OUT	0xEB,AL

	MOV	WORD [SYS_TEMP_PTR],MAXIDT*8-1
	MOV	DWORD [SYS_TEMP_PTR+2],HIGH_ADDRESS+IDTTAB
	MOV	WORD [SYS_TEMP_PTR+6],0
//	  LIDT	  FWORD SYS_TEMP_PTR
	DB	0x0F,0x01,0x1D;
	DD	SYS_TEMP_PTR;
	RET

////**************************PROCEDURE*************************
CMD_REBOOT::
	MOV	EAX,ZERO_DS_SEL
	MOV	ES,AX
	MOV	WORD ES:[0x472],0

	MOV	AL,0x8F
	OUT	0x70,AL
	OUT	0xEB,AL
	MOV	AL,0
	OUT	0x71,AL
	OUT	0xEB,AL
	MOV	AL,0
	OUT	0x70,AL
	OUT	0xEB,AL

	IN	AL,0x92
	OR	AL,1
	OUT	0x92,AL
	OUT	0xEB,AL
@@100:	JMP	@@100
	END

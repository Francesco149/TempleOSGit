#define BLOCK_SIZE  0x200
#define BLOCK_COUNT_BITS 5
#define BLOCK_COUNT (1<<BLOCK_COUNT_BITS)
#define BOOT_HIGH_LOC 0x9000
#define DMA_BUF       0x9800

	USE16
BFD_START::
	DB	0x42 DUP(0);
BFD_CODE::
	CLI
	CLD
	MOV	AX,0xB800
	MOV	FS,AX
	MOV	AX,BOOT_HIGH_LOC
	MOV	SS,AX
	MOV	ES,AX
	MOV	SP,0x1000
	STI
	CALL	GET_IP
GET_IP:
	POP	BX
	SUB	BX,GET_IP
	SAR	BX,4
	MOV	AX,CS		//COPY HIGH
	ADD	AX,BX
	MOV	DS,AX
	MOV	CX,BLOCK_SIZE
	XOR	SI,SI
	XOR	DI,DI
	REP_MOVSB

	XOR	AX,AX
	XOR	DX,DX
BFD_INT13_1::		//Anti Anti-Virus
	DB	0,0;
//	INT	0x13	//reset drive

	DB	0xEA;
	DW	BFD_RESTART,BOOT_HIGH_LOC;

BFD_RESTART::
	MOV	CX,512	       //filled-in with Block count
	MOV	DX,512	       //filled-in with sector#
	MOV	AX,512	       //filled-in with SYSCODE
	MOV	GS,AX

BFD_LOOP:
	PUSH	CX

	MOV	AH,0x70
	MOV	AL,CH
	CALL	CVTHEX
	MOV	WORD  FS:[0],AX
	MOV	AL,CL
	SHR	AL,4
	CALL	CVTHEX
	MOV	WORD  FS:[2],AX
	MOV	AL,CL
	CALL	CVTHEX
	MOV	WORD  FS:[4],AX

	MOV	AX,DX
	PUSH	DX
	XOR	DX,DX
	MOV	BX,18
	DIV	BX
	MOV	CL,DL		//CL=sector
	INC	CL
	MOV	DH,AL
	AND	DH,1		//DH=head
	SHR	AX,1
	MOV	CH,AL		//CH=cyl
	XOR	DL,DL		//DL=drive
	MOV	AX,DMA_BUF
	MOV	ES,AX
	XOR	BX,BX		//ES:[BX]=buffer
	MOV	AH,2		//AH=read code
	MOV	AL,1		//1 block
BFD_INT13_2::
	DB	0,0;
//	INT	0x13
	POP	DX
	INC	DX

	MOV	AX,GS
	MOV	ES,AX
	ADD	AX,BLOCK_SIZE/16
	MOV	GS,AX
	XOR	DI,DI
	MOV	AX,DMA_BUF
	MOV	DS,AX
	XOR	SI,SI
	MOV	CX,BLOCK_SIZE
	REP_MOVSB
	POP	CX
	LOOP	BFD_JMP_BACK

	DB	0xEA;
BFD_JMP_START::
	DW	0,0;
BFD_JMP_BACK:
	JMP	BFD_LOOP

CVTHEX: AND	AL,15
	CMP	AL,9
	JBE	@@1
	ADD	AL,'A'-'9'-1
@@1:	ADD	AL,'0'
	RET
BFD_END::
	END

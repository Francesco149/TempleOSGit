	ALIGN	4,0x90
CURSOR_HOME::
	CALL	CURSOR_OFF
	PUSH	EAX			//-****
	PUSH	EDX
	MOV	EAX,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	DWORD FS:[TSS_CURSOR_HOR],EAX
	MOV	DWORD FS:[TSS_CURSOR_OFFSET],EAX

	MOV	EAX,DWORD FS:[TSS_WINDOW_TOP]
	MOV	DWORD FS:[TSS_CURSOR_VERT],EAX
	IMUL	DWORD FS:[TSS_CRT_WIDTH]
	ADD	DWORD FS:[TSS_CURSOR_OFFSET],EAX
	POP	EDX
	POP	EAX			//+****
	CALL	CURSOR_ON
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CURSOR_OFF::
	PUSH	ES			//-****
	PUSH	EAX			//-****
	PUSH	EDI			//-****
	BTR	WORD FS:[TSS_CRT_FLAGS],CRTF_CURSOR_ON
	JNC	@@1
	MOV	AX,WORD FS:[TSS_CRT_SELECT]
	MOV	ES,AX
	MOV	EDI,DWORD FS:[TSS_CURSOR_OFFSET]
	INC	EDI
	MOV	AL,0xFF
	CMP	EDI,DWORD FS:[TSS_CRT_SIZE]
	JGE	@@1
	CMP	EDI,0
	JL	@@1
	XOR	BYTE ES:[EDI],AL
@@1:	POP	EDI			//+****
	POP	EAX			//+****
	POP	ES			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CURSOR_ON::
	PUSH	ES			//-****
	PUSH	EAX			//-****
	PUSH	EDI			//-****
	BTS	WORD FS:[TSS_CRT_FLAGS],CRTF_CURSOR_ON
	JC	@@1
	MOV	AX,WORD FS:[TSS_CRT_SELECT]
	MOV	ES,AX
	MOV	EDI,DWORD FS:[TSS_CURSOR_OFFSET]
	INC	EDI
	MOV	AL,0xFF
	CMP	EDI,DWORD FS:[TSS_CRT_SIZE]
	JGE	@@1
	CMP	EDI,0
	JL	@@1
	XOR	BYTE ES:[EDI],AL
@@1:	POP	EDI			//+****
	POP	EAX			//+****
	POP	ES			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
EDI_HOME::
	PUSH	EAX			//-****
	PUSH	EDX
	MOV	EDI,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	EAX,DWORD FS:[TSS_WINDOW_TOP]
	IMUL	DWORD FS:[TSS_CRT_WIDTH]
	ADD	EDI,EAX
	POP	EDX
	POP	EAX			//+****
	RET
////**************************PROCEDURE*************************
// IN:	 AX = FILL PATTERN
	ALIGN	4,0x90
FILL_CRT::
	CALL	CURSOR_OFF
	PUSH	ES			//-****
	PUSHAD				//-****
	PUSH	EAX

	MOV	DX,WORD FS:[TSS_CRT_SELECT]
	MOV	ES,DX

	CALL	EDI_HOME
	MOV	EDX,DWORD FS:[TSS_WINDOW_BOTTOM]
	CMP	EDX,DWORD FS:[TSS_CRT_HEIGHT]
	JL	@@5
	MOV	EDX,DWORD FS:[TSS_CRT_HEIGHT]
	DEC	EDX
@@5:	MOV	EBX,DWORD FS:[TSS_WINDOW_TOP]
	CMP	EBX,0
	JGE	@@6
	PUSH	EDX
	NEG	EBX
	MOV	EAX,DWORD FS:[TSS_CRT_WIDTH]
	MUL	EBX
	ADD	EDI,EAX
	XOR	EBX,EBX
	POP	EDX
@@6:	SUB	EDX,EBX
	INC	EDX

	MOV	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	CMP	EBX,DWORD FS:[TSS_CRT_WIDTH]
	JL	@@10
	MOV	EBX,DWORD FS:[TSS_CRT_WIDTH]
	SUB	EBX,2
@@10:	MOV	ECX,DWORD FS:[TSS_WINDOW_LEFT]
	CMP	ECX,0
	JGE	@@11
	SUB	EDI,ECX
	XOR	ECX,ECX
@@11:	SUB	EBX,ECX
	SHR	EBX,1
	INC	EBX

	POP	EAX
@@1:	MOV	ECX,EBX
	PUSH	EDI			//-****
	REP_STOSW
	POP	EDI			//+****
	ADD	EDI,DWORD FS:[TSS_CRT_WIDTH]
	DEC	EDX
	JNZ	@@1

	POPAD				//+****
	POP	ES			//+****
	CALL	CURSOR_ON
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CLEAR_CRT::
	PUSH	EAX			//-****
	MOV	AL,0x20
	MOV	AH,BYTE FS:[TSS_TEXT_ATTRIBUTE]
	CALL	FILL_CRT
	POP	EAX			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
SCROLL_UP::
	PUSH	ES			//-****
	PUSHAD				//-****

	MOV	DX,WORD FS:[TSS_CRT_SELECT]
	MOV	ES,DX

	CALL	EDI_HOME

	MOV	EDX,DWORD FS:[TSS_WINDOW_BOTTOM]
	SUB	EDX,DWORD FS:[TSS_WINDOW_TOP]

	MOV	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	SUB	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	SHR	EBX,1
	INC	EBX

@@1:	MOV	ECX,EBX
	MOV	ESI,EDI
	ADD	ESI,DWORD FS:[TSS_CRT_WIDTH]
	PUSH	EDI			//-****
	SEGES
	REP_MOVSW
	POP	EDI			//+****
	ADD	EDI,DWORD FS:[TSS_CRT_WIDTH]
	DEC	EDX
	JNZ	@@1

	MOV	ECX,EBX
	MOV	EAX,0x20
@@2:	STOSB
	INC	EDI
	LOOP	@@2

	POPAD				//+****
	POP	ES			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CARRIAGE_RETURN::
	PUSH	EAX			//-****
	PUSH	EBX
	MOV	EAX,DWORD FS:[TSS_CURSOR_HOR]
	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	DWORD FS:[TSS_CURSOR_HOR],EBX
	SUB	EAX,EBX
	SUB	DWORD FS:[TSS_CURSOR_OFFSET],EAX
	POP	EBX
	POP	EAX			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
BACK_SPACE::
	PUSH	ES			//-****
	PUSH	EAX			//-****
	PUSH	EDI			//-****

	MOV	AX,WORD FS:[TSS_CRT_SELECT]
	MOV	ES,AX

	MOV	EAX,DWORD FS:[TSS_CURSOR_HOR]
	SUB	EAX,2
	CMP	EAX,DWORD FS:[TSS_WINDOW_LEFT]
	JL	@@1

	MOV	DWORD FS:[TSS_CURSOR_HOR],EAX
	MOV	EDI,DWORD FS:[TSS_CURSOR_OFFSET]
	SUB	EDI,2
	MOV	DWORD FS:[TSS_CURSOR_OFFSET],EDI
	MOV	AH,BYTE FS:[TSS_TEXT_ATTRIBUTE]
	MOV	AL,0x20
	STOSW

@@1:	POP	EDI			//+****
	POP	EAX			//+****
	POP	ES			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
LINE_FEED::
	PUSH	EAX			//-****
	MOV	EAX,DWORD FS:[TSS_CURSOR_VERT]
	INC	EAX
	CMP	EAX,DWORD FS:[TSS_WINDOW_BOTTOM]
	JLE	@@1
	CALL	SCROLL_UP
	JMP	@@2

	ALIGN	4,0x90
@@1:	MOV	DWORD FS:[TSS_CURSOR_VERT],EAX
	MOV	EAX,DWORD FS:[TSS_CRT_WIDTH]
	ADD	DWORD FS:[TSS_CURSOR_OFFSET],EAX
@@2:	POP	EAX			//+****
	RET
////**************************PROCEDURE*************************
// IN:	 AL=ASCII CODE
	ALIGN	4,0x90
PRINTABLE_CHAR_LIST::	
	DD	0x00002600,0xFFFFFFFF,0xFFFFFFFF,0x7FFFFFFF;
	DD	0x00000000,0x00000000,0x00000000,0x00000000;
CRT_OUT::
	BT	DWORD [SYS_FLAGS],SYSF_RAW_CRT_OUT
	JNC	@@1A
	BT	DWORD [SYS_FLAGS],SYSF_NON_VGA
	JC	@@1B
	CALL	DRAW_CHAR
	RET

@@1B:	PUSH	ES
	PUSH	EAX
	PUSH	EDX
	MOV	AH,0x70 //ATTRIBUTE
	MOV	DX,CRT_SEL
	MOV	ES,DX
	MOV	EDX,DWORD [DC_COL]
	MOV	WORD ES:[EDX],AX
	ADD	EDX,2
	CMP	EDX,80*2*25
	JB	@@1C
	XOR	EDX,EDX
@@1C:	MOV	DWORD [DC_COL],EDX
	POP	EDX
	POP	EAX
	POP	ES
	RET

@@1A:	PUSH	EAX			//-****
	PUSH	EBX			//-****
	PUSH	EDX			//-****
	MOV	EBX,DWORD FS:[TSS_CURRENT_LTF]
	OR	EBX,EBX
	JZ	@@10
	MOVZX	EAX,AL
	BT	DWORD [PRINTABLE_CHAR_LIST],EAX
	JNC	DWORD @@100
@@6:	PUSH	0			//SCAN CODE
	PUSH	EAX			//CH
	PUSH	EBX			//LTF
	MOV	EAX,DWORD [SYS_EXTERN_TABLE]
	CALL	DWORD EXT_LTF_PUTCHAR*4[EAX]
	ADD	ESP,12
	JMP	DWORD @@100

@@10:	CALL	CURSOR_OFF
	PUSH	ES			//-****
	PUSH	EDI			//-****

	MOV	DI,CRT_SEL
	MOV	ES,DI
	CMP	AL,31
	JA	@@2
	CMP	AL,8			//BACK SPACE?
	JNE	@@4
	CALL	BACK_SPACE
	JMP	@@3

@@4:	CMP	AL,10			//LINE FEED?
	JNE	@@1
	CALL	LINE_FEED
	JMP	@@3

@@1:	CALL	CARRIAGE_RETURN
	JMP	@@3

@@2:	MOV	EDI,DWORD FS:[TSS_CURSOR_OFFSET]
	MOV	AH,BYTE FS:[TSS_TEXT_ATTRIBUTE]
	STOSW
	MOV	EAX,DWORD FS:[TSS_CURSOR_HOR]
	ADD	EAX,2
	CMP	EAX,DWORD FS:[TSS_WINDOW_RIGHT]
	JLE	@@5
	BT	WORD FS:[TSS_CRT_FLAGS],CRTF_WRAP_AROUND
	JNC	@@3
	CALL	CARRIAGE_RETURN
	CALL	LINE_FEED
	JMP	@@3

@@5:	MOV	DWORD FS:[TSS_CURSOR_HOR],EAX
	MOV	DWORD FS:[TSS_CURSOR_OFFSET],EDI

@@3:	POP	EDI			//+****
	POP	ES			//+****
	CALL	CURSOR_ON
@@100:	POP	EDX			//+****
	POP	EBX			//+****
	POP	EAX			//+****
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=LINE STRING
	ALIGN	4,0x90
CRT_LINE_OUT::
	PUSH	ES			//-****
	PUSH	EAX			//-****
	PUSH	EBX			//-****
	PUSH	ECX			//-****
	PUSH	EDX			//-****
	PUSH	ESI			//-****
	PUSH	EDI			//-****

	MOV	DI,CRT_SEL
	MOV	ES,DI

	MOV	EDI,DWORD FS:[TSS_CURSOR_OFFSET]
	MOV	EDX,DWORD FS:[TSS_WINDOW_RIGHT]
	CMP	EDX,DWORD FS:[TSS_CRT_WIDTH]
	JL	@@10
	MOV	EDX,DWORD FS:[TSS_CRT_WIDTH]
	SUB	EDX,2
@@10:	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	CMP	EBX,0
	JGE	@@11
	NEG	EBX
	ADD	EDI,EBX
	SHR	EBX,1
@@5:	LODSB
	OR	AL,AL
	JZ	@@6
	DEC	EBX
	JNZ	@@5
@@6:	XOR	EBX,EBX
@@11:	CMP	EDI,0
	JL	@@100
	SUB	EDX,EBX
	SHR	EDX,1
	INC	EDX
	ADD	EDX,ESI
	MOV	CL,BYTE [EDX]
	MOV	BYTE [EDX],0 //terminate (dangerous)
	PUSH	EDX			//-****

	MOV	AH,BYTE FS:[TSS_TEXT_ATTRIBUTE]
	JMP	@@1
@@2:	STOSW
@@1:	LODSB
	OR	AL,AL
	JNZ	@@2
	POP	EDX			//+****
	MOV	BYTE [EDX],CL //unterminate (dangerous)

@@100:	CALL	LINE_FEED
	POP	EDI			//+****
	POP	ESI			//+****
	POP	EDX			//+****
	POP	ECX			//+****
	POP	EBX			//+****
	POP	EAX			//+****
	POP	ES			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
INIT_CRT::
	MOV	WORD FS:[TSS_CRT_SELECT],CRT_SEL
	MOV	WORD FS:[TSS_CRT_FLAGS],0
	BTS	WORD FS:[TSS_CRT_FLAGS],CRTF_SHOW
	MOV	BYTE FS:[TSS_TEXT_ATTRIBUTE],0xF1
	MOV	BYTE FS:[TSS_BORDER_ATTRIBUTE],0xF9
	MOV	DWORD FS:[TSS_CRT_WIDTH],SCREEN_COLS*2
	MOV	DWORD FS:[TSS_CRT_HEIGHT],SCREEN_LINES
	MOV	DWORD FS:[TSS_CRT_SIZE],SCREEN_COLS*SCREEN_LINES*2
	MOV	DWORD FS:[TSS_WINDOW_RIGHT],SCREEN_COLS*2-4
	MOV	DWORD FS:[TSS_WINDOW_LEFT],2
	MOV	DWORD FS:[TSS_WINDOW_TOP],1
	MOV	DWORD FS:[TSS_WINDOW_BOTTOM],SCREEN_LINES-2
	CALL	CURSOR_HOME
	RET
	END

	ALIGN	4,0x90
INIT_MEMORY::
	MOV	EDX,DWORD [SYS_MEMORY_BASE]
	MOV	DWORD [MEMORY_FREE_LIST],0
	MOV	EBX,DWORD [SYS_HEAP_BASE]
	LEA	EAX,DWORD 0xDFF124[EBX]
	SUB	EAX,EDX
@@1:	ADD	EAX,0x10000
	MOV	ECX,DWORD [EAX]
	MOV	DWORD [EAX],EAX
	CMP	DWORD [EAX],EAX
	JE	@@1
	ADD	EAX,EDX
	SUB	EAX,0x10000
	OR	EAX,0x0FFFF
	INC	EAX
	SUB	EAX,EBX
	SHR	EAX,PAGE_BITS
	SUB	EBX,EDX
	MOV	EDI,DWORD [MEMORY_FREE_LIST]
	MOV	DWORD MB_NEXT[EBX],EDI
	MOV	DWORD [MEMORY_FREE_LIST],EBX
	MOV	DWORD MB_SIZE[EBX],EAX
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=NUM PAGES
//
// OUT:  EAX
	ALIGN	4,0x90
CALCULATE_FREE_SYS_MEMORY::
	PUSH	ESI
	PUSH	DWORD [SYS_FLAGS]
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE

	PUSH	ECX
	XOR	EAX,EAX
	MOV	ESI,DWORD [MEMORY_FREE_LIST]
@@1:	OR	ESI,ESI
	JZ	@@100
	ADD	EAX,DWORD MB_SIZE[ESI]
	MOV	ESI,DWORD MB_NEXT[ESI]
	JMP	@@1

@@100:	SHL	EAX,PAGE_BITS
	POP	ECX
	POP	ESI
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	BT	ESI,SYSF_PREEMPTIVE
	JNC	@@102
	BTS	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
@@102:	POP	ESI
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=NUM PAGES
//
// OUT:  ESI=BASE ADDRESS REL TO DS
//
	ALIGN	4,0x90
ALLOCATE_MEMORY_BLOCKS::
	PUSH	EAX
	PUSH	DWORD [SYS_FLAGS]
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	PUSH	EBX
	PUSH	ECX
	PUSH	EDI

	MOV	ESI,MEMORY_FREE_LIST

@@1:	LEA	EBX,DWORD MB_NEXT[ESI]
	MOV	ESI,DWORD [EBX]
	OR	ESI,ESI
	JZ	@@9			//TODO: Out of memory
	CMP	DWORD MB_SIZE[ESI],EAX
	JB	@@1
	JNE	@@3

	MOV	EDI,DWORD MB_NEXT[ESI]
	MOV	DWORD MB_NEXT[EBX],EDI
	JMP	@@5

@@3:	SUB	DWORD MB_SIZE[ESI],EAX	  //UPDATE FREE ENTRY
	MOV	EDI,DWORD MB_SIZE[ESI]
	SHL	EDI,PAGE_BITS
	ADD	ESI,EDI 		//SET ESI TO @ALLOCATED PAGES

	MOV	DWORD MB_SIZE[ESI],EAX
@@5:	MOV	EDI,DWORD FS:[TSS_MEMORY_BLOCK_LIST]
	MOV	DWORD MB_NEXT[ESI],EDI
	MOV	DWORD FS:[TSS_MEMORY_BLOCK_LIST],ESI

@@9:	POP	EDI
	POP	ECX
	POP	EBX
	POP	EAX
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	BT	EAX,SYSF_PREEMPTIVE
	JNC	@@102
	BTS	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
@@102:	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 ESI=BASE ADDRESS
	ALIGN	4,0x90
FREE_BLOCK_LIST::
	PUSH	EAX
	PUSH	DWORD [SYS_FLAGS]
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	PUSH	EDI

	MOV	EDI,DWORD [MEMORY_FREE_LIST]
	MOV	DWORD [MEMORY_FREE_LIST],ESI
	JMP	@@1
@@2:	MOV	ESI,EAX
@@1:	MOV	EAX,DWORD MB_NEXT[ESI]
	OR	EAX,EAX
	JNZ	@@2
	MOV	DWORD MB_NEXT[ESI],EDI
	POP	EDI
	POP	EAX
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	BT	EAX,SYSF_PREEMPTIVE
	JNC	@@102
	BTS	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
@@102:	POP	EAX
	RET
////**************************PROCEDURE*************************
// IN:	 EAX=NUM BYTES
// OUT:  ESI=BASE ADDRESS
//
	ALIGN	4,0x90
MALLOC::
	BT	WORD FS:[TSS_TASK_FLAGS],TSSF_MALLOC_TRACE
	JNC	@@1a
	PUSH	EAX
	MOV	EAX,'A'
	INT	I_PUT_CHAR
	POP	EAX
	CALL	PUT_HEX
	CALL	SPACE

@@1a:	PUSH	EBX
	PUSH	ECX
	PUSH	EDI
	PUSH	DWORD [SYS_FLAGS]
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE

	ADD	EAX,7
	AND	EAX,0xFFFFFFFC
	CMP	EAX,UUM_STRUCT_SIZE
	JAE	@@4
	MOV	EAX,UUM_STRUCT_SIZE
@@4:	CMP	EAX,HEAP_CACHE_SIZE
	JAE	@@10
	MOV	ESI,DWORD FS:TSS_HEAP_CACHE[EAX]
	OR	ESI,ESI
	JZ	@@10
	MOV	ECX,DWORD UUM_NEXT[ESI]
	MOV	DWORD FS:TSS_HEAP_CACHE[EAX],ECX
	JMP	@@5
@@10:	MOV	ESI,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	ADD	ESI,TSS_MALLOC_FREE_LIST

@@1:	LEA	EBX,DWORD UUM_NEXT[ESI]
	MOV	ESI,DWORD [EBX]
	OR	ESI,ESI
	JNZ	@@2
	PUSH	EAX		//-****
	ADD	EAX,8*PAGE_SIZE-1
	SHR	EAX,PAGE_BITS
	CALL	ALLOCATE_MEMORY_BLOCKS
	LEA	ESI,DWORD MB_STRUCT_SIZE[ESI]
	SHL	EAX,PAGE_BITS
	SUB	EAX,MB_STRUCT_SIZE
	MOV	EDI,DWORD FS:[TSS_MALLOC_FREE_LIST]
	MOV	DWORD UUM_NEXT[ESI],EDI
	MOV	DWORD UUM_SIZE[ESI],EAX
	MOV	DWORD FS:[TSS_MALLOC_FREE_LIST],ESI
	MOV	EBX,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	ADD	EBX,TSS_MALLOC_FREE_LIST
	POP	EAX		//+****
	JMP	@@3
@@2:	CMP	DWORD UUM_SIZE[ESI],EAX
	JB	@@1
	JNE	@@3

@@8:	MOV	EDI,DWORD UUM_NEXT[ESI]
	MOV	DWORD UUM_NEXT[EBX],EDI
	JMP	@@5

@@3:	SUB	DWORD UUM_SIZE[ESI],EAX    //UPDATE FREE ENTRY
	CMP	DWORD UUM_SIZE[ESI],UUM_STRUCT_SIZE
	JAE	@@7
	ADD	DWORD UUM_SIZE[ESI],EAX
	MOV	EAX,DWORD UUM_SIZE[ESI]
	JMP	@@8

@@7:	MOV	EDI,DWORD UUM_SIZE[ESI]
	ADD	ESI,EDI 		//SET ESI TO @ALLOCATED PAGES

@@5:	MOV	DWORD [ESI],EAX
	ADD	ESI,4
@@100:	POP	EBX
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	BT	EBX,SYSF_PREEMPTIVE
	JNC	@@102
	BTS	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
@@102:	POP	EDI
	POP	ECX
	POP	EBX
	BT	WORD FS:[TSS_TASK_FLAGS],TSSF_MALLOC_TRACE
	JNC	@@101
	PUSH	EAX
	MOV	EAX,ESI
	CALL	PUT_HEX
	CALL	SPACE
	POP	EAX
@@101:	RET

////**************************PROCEDURE*************************
// IN:	 ESI=BASE ADDRESS
	ALIGN	4,0x90
FREE::
	OR	ESI,ESI
	JZ	DWORD @@100
	PUSH	EDI
	PUSH	DWORD [SYS_FLAGS]
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE

	SUB	ESI,4
	MOV	EDI,DWORD [ESI] //USED_USER_MEMORY_SIZE
	MOV	UUM_SIZE[ESI],EDI
	BT	WORD FS:[TSS_TASK_FLAGS],TSSF_MALLOC_TRACE
	JNC	@@1
	PUSH	EAX
	MOV	EAX,'F'
	INT	I_PUT_CHAR
	MOV	EAX,EDI
	CALL	PUT_HEX
	CALL	SPACE
	LEA	EAX,DWORD 4[ESI]
	CALL	PUT_HEX
	CALL	SPACE
	CMP	EDI,UUM_STRUCT_SIZE //Check for corruption
	JB	@@4
	AND	EDI,3
	JNZ	@@4
	AND	ESI,3
	JZ	@@2
@@4:	MOV	EBP,ESP
	MOV	EAX,8[EBP]	//Display caller address
	CALL	PUT_HEX
@@3:	JMP	@@3

@@2:	POP	EAX

@@1:	CMP	EDI,HEAP_CACHE_SIZE
	JAE	@@10
	PUSH	EBX
	MOV	EBX,DWORD FS:TSS_HEAP_CACHE[EDI]
	MOV	DWORD UUM_NEXT[ESI],EBX
	MOV	DWORD FS:TSS_HEAP_CACHE[EDI],ESI
	POP	EBX
	JMP	@@101

@@10:	MOV	EDI,DWORD FS:[TSS_MALLOC_FREE_LIST]
	MOV	DWORD UUM_NEXT[ESI],EDI
	MOV	DWORD FS:[TSS_MALLOC_FREE_LIST],ESI
@@101:	POP	EDI
	BTR	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
	BT	EDI,SYSF_PREEMPTIVE
	JNC	@@102
	BTS	DWORD [SYS_FLAGS],SYSF_PREEMPTIVE
@@102:	POP	EDI
@@100:	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
RMALLOC::
	PUSH	FS
	PUSH	EAX
	MOV	EAX,DWORD [ROOT_TSS_MEM_SEL]
	MOV	FS,AX
	POP	EAX
	CALL	MALLOC
	POP	FS
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
RNEW_STRING::
	PUSH	FS
	PUSH	EAX
	MOV	EAX,DWORD [ROOT_TSS_MEM_SEL]
	MOV	FS,AX
	POP	EAX
	CALL	NEW_STRING
	POP	FS
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
RFREE::
	PUSH	FS
	PUSH	EAX
	MOV	EAX,DWORD [ROOT_TSS_MEM_SEL]
	MOV	FS,AX
	POP	EAX
	CALL	FREE
	POP	FS
	RET
	END

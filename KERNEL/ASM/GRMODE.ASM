	ALIGN 4,0x90
SYS_FONT::
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00; ///* ^@ */
	DB 0x7e,0x81,0xa5,0x81,0xbd,0x99,0x81,0x7e; ///* ^A */
	DB 0x7e,0xff,0xbd,0xff,0xc3,0xe7,0xff,0x7e; ///* ^B */
	DB 0x6c,0xfe,0xfe,0xfe,0x7c,0x38,0x10,0x00; ///* ^C */
	DB 0x10,0x38,0x7c,0xfe,0x7c,0x38,0x10,0x00; ///* ^D */
	DB 0x00,0x18,0x3c,0xe7,0xe7,0x3c,0x18,0x00; ///* ^E */
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x60,0x78,0x7e,0x7e,0x78,0x60,0x00; ///* |> */
	DB 0x00,0x06,0x1e,0x7e,0x7e,0x1e,0x06,0x00; ///* <| */
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x18,0x18,0x3c,0x3c,0x7e,0x7e,0x00; ///* /\ */
	DB 0x00,0x7e,0x7e,0x3c,0x3c,0x18,0x18,0x00; ///* \/ */
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00; ///*	 */
	DB 0x18,0x3c,0x3c,0x18,0x18,0x00,0x18,0x00; ///* ! */
	DB 0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00; ///* " */
	DB 0x36,0x36,0x7F,0x36,0x7F,0x36,0x36,0x00; ///* # */
	DB 0x0C,0x3F,0x68,0x3E,0x0B,0x7E,0x18,0x00; ///* $ */
	DB 0x60,0x66,0x0C,0x18,0x30,0x66,0x06,0x00; ///* % */
	DB 0x38,0x6C,0x6C,0x38,0x6D,0x66,0x3B,0x00; ///* & */
	DB 0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00; ///* ' */
	DB 0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00; ///* ( */
	DB 0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00; ///* ) */
	DB 0x00,0x18,0x7E,0x3C,0x7E,0x18,0x00,0x00; ///* * */
	DB 0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00; ///* + */
	DB 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30; ///* , */
	DB 0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00; ///* - */
	DB 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00; ///* . */
	DB 0x00,0x06,0x0C,0x18,0x30,0x60,0x00,0x00; ///* / */
	DB 0x3C,0x66,0x6E,0x7E,0x76,0x66,0x3C,0x00; ///* 0 */
	DB 0x18,0x38,0x18,0x18,0x18,0x18,0x7E,0x00; ///* 1 */
	DB 0x3C,0x66,0x06,0x0C,0x18,0x30,0x7E,0x00; ///* 2 */
	DB 0x3C,0x66,0x06,0x1C,0x06,0x66,0x3C,0x00; ///* 3 */
	DB 0x0C,0x1C,0x3C,0x6C,0x7E,0x0C,0x0C,0x00; ///* 4 */
	DB 0x7E,0x60,0x7C,0x06,0x06,0x66,0x3C,0x00; ///* 5 */
	DB 0x1C,0x30,0x60,0x7C,0x66,0x66,0x3C,0x00; ///* 6 */
	DB 0x7E,0x06,0x0C,0x18,0x30,0x30,0x30,0x00; ///* 7 */
	DB 0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00; ///* 8 */
	DB 0x3C,0x66,0x66,0x3E,0x06,0x0C,0x38,0x00; ///* 9 */
	DB 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00; ///* : */
	DB 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x30; ///* // */
	DB 0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00; ///* < */
	DB 0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00; ///* = */
	DB 0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00; ///* > */
	DB 0x3C,0x66,0x0C,0x18,0x18,0x00,0x18,0x00; ///* ? */
	DB 0x3C,0x66,0x6E,0x6A,0x6E,0x60,0x3C,0x00; ///* @ */
	DB 0x3C,0x66,0x66,0x7E,0x66,0x66,0x66,0x00; ///* A */
	DB 0x7C,0x66,0x66,0x7C,0x66,0x66,0x7C,0x00; ///* B */
	DB 0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x00; ///* C */
	DB 0x78,0x6C,0x66,0x66,0x66,0x6C,0x78,0x00; ///* D */
	DB 0x7E,0x60,0x60,0x7C,0x60,0x60,0x7E,0x00; ///* E */
	DB 0x7E,0x60,0x60,0x7C,0x60,0x60,0x60,0x00; ///* F */
	DB 0x3C,0x66,0x60,0x6E,0x66,0x66,0x3C,0x00; ///* G */
	DB 0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00; ///* H */
	DB 0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00; ///* I */
	DB 0x3E,0x0C,0x0C,0x0C,0x0C,0x6C,0x38,0x00; ///* J */
	DB 0x66,0x6C,0x78,0x70,0x78,0x6C,0x66,0x00; ///* K */
	DB 0x60,0x60,0x60,0x60,0x60,0x60,0x7E,0x00; ///* L */
	DB 0x63,0x77,0x7F,0x6B,0x6B,0x63,0x63,0x00; ///* M */
	DB 0x66,0x66,0x76,0x7E,0x6E,0x66,0x66,0x00; ///* N */
	DB 0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00; ///* O */
	DB 0x7C,0x66,0x66,0x7C,0x60,0x60,0x60,0x00; ///* P */
	DB 0x3C,0x66,0x66,0x66,0x6A,0x6C,0x36,0x00; ///* Q */
	DB 0x7C,0x66,0x66,0x7C,0x6C,0x66,0x66,0x00; ///* R */
	DB 0x3C,0x66,0x60,0x3C,0x06,0x66,0x3C,0x00; ///* S */
	DB 0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00; ///* T */
	DB 0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00; ///* U */
	DB 0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00; ///* V */
	DB 0x63,0x63,0x6B,0x6B,0x7F,0x77,0x63,0x00; ///* W */
	DB 0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00; ///* X */
	DB 0x66,0x66,0x66,0x3C,0x18,0x18,0x18,0x00; ///* Y */
	DB 0x7E,0x06,0x0C,0x18,0x30,0x60,0x7E,0x00; ///* Z */
	DB 0x7C,0x60,0x60,0x60,0x60,0x60,0x7C,0x00; ///* [ */
	DB 0x00,0x60,0x30,0x18,0x0C,0x06,0x00,0x00; ///* \ */
	DB 0x3E,0x06,0x06,0x06,0x06,0x06,0x3E,0x00; ///* ] */
	DB 0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00; ///* ^ */
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF; ///* _ */
	DB 0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00; ///* ` */
	DB 0x00,0x00,0x3C,0x06,0x3E,0x66,0x3E,0x00; ///* a */
	DB 0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00; ///* b */
	DB 0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00; ///* c */
	DB 0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00; ///* d */
	DB 0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00; ///* e */
	DB 0x1C,0x30,0x30,0x7C,0x30,0x30,0x30,0x00; ///* f */
	DB 0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x3C; ///* g */
	DB 0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x00; ///* h */
	DB 0x18,0x00,0x38,0x18,0x18,0x18,0x3C,0x00; ///* i */
	DB 0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x70; ///* j */
	DB 0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0x00; ///* k */
	DB 0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00; ///* l */
	DB 0x00,0x00,0x36,0x7F,0x6B,0x6B,0x63,0x00; ///* m */
	DB 0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x00; ///* n */
	DB 0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00; ///* o */
	DB 0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x60; ///* p */
	DB 0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x07; ///* q */
	DB 0x00,0x00,0x6C,0x76,0x60,0x60,0x60,0x00; ///* r */
	DB 0x00,0x00,0x3E,0x60,0x3C,0x06,0x7C,0x00; ///* s */
	DB 0x30,0x30,0x7C,0x30,0x30,0x30,0x1C,0x00; ///* t */
	DB 0x00,0x00,0x66,0x66,0x66,0x66,0x3E,0x00; ///* u */
	DB 0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00; ///* v */
	DB 0x00,0x00,0x63,0x6B,0x6B,0x7F,0x36,0x00; ///* w */
	DB 0x00,0x00,0x66,0x3C,0x18,0x3C,0x66,0x00; ///* x */
	DB 0x00,0x00,0x66,0x66,0x66,0x3E,0x06,0x3C; ///* y */
	DB 0x00,0x00,0x7E,0x0C,0x18,0x30,0x7E,0x00; ///* z */
	DB 0x0C,0x18,0x18,0x70,0x18,0x18,0x0C,0x00; ///* { */
	DB 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00; ///* | */
	DB 0x30,0x18,0x18,0x0E,0x18,0x18,0x30,0x00; ///* } */
	DB 0x31,0x6B,0x46,0x00,0x00,0x00,0x00,0x00; ///* ~ */126
	DB 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF; // /*  */127
	DB 0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24; //128
	DB 0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C; //129
	DB 0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00; //130
	DB 0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00; //131
	DB 0x00,0x00,0x3F,0x20,0x20,0x27,0x24,0x24; //132
	DB 0x00,0x00,0x3F,0x3F,0x3F,0x3F,0x3C,0x3C; //133
	DB 0x00,0x00,0xFC,0x04,0x04,0xE4,0x24,0x24; //134
	DB 0x00,0x00,0xFC,0xFC,0xFC,0xFC,0x3C,0x3C; //135
	DB 0x24,0x24,0x27,0x20,0x20,0x3F,0x00,0x00; //136
	DB 0x3C,0x3C,0x3F,0x3F,0x3F,0x3F,0x00,0x00; //137
	DB 0x24,0x24,0xE4,0x04,0x04,0xFC,0x00,0x00; //138
	DB 0x3C,0x3C,0xFC,0xFC,0xFC,0xFC,0x00,0x00; //139
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x22,0x88,0x22,0x88,0x22,0x88,0x22,0x88;
	DB 0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa;
	DB 0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77;
	DB 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18;
	DB 0x18,0x18,0x18,0xf8,0x18,0x18,0x18,0x18;
	DB 0x18,0x18,0xf8,0x18,0xf8,0x18,0x18,0x18;
	DB 0x66,0x66,0x66,0xe6,0x66,0x66,0x66,0x66;
	DB 0x00,0x00,0x00,0xfe,0x66,0x66,0x66,0x66;
	DB 0x00,0x00,0xf8,0x18,0xf8,0x18,0x18,0x18;
	DB 0x66,0x66,0xe6,0x06,0xe6,0x66,0x66,0x66;
	DB 0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66;
	DB 0x00,0x00,0xfe,0x06,0xe6,0x66,0x66,0x66;
	DB 0x66,0x66,0xe6,0x06,0xfe,0x00,0x00,0x00;
	DB 0x66,0x66,0x66,0xfe,0x00,0x00,0x00,0x00;
	DB 0x18,0x18,0xf8,0x18,0xf8,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0xf8,0x18,0x18,0x18,0x18;
	DB 0x18,0x18,0x18,0x1f,0x00,0x00,0x00,0x00;
	DB 0x18,0x18,0x18,0xff,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0xff,0x18,0x18,0x18,0x18;
	DB 0x18,0x18,0x18,0x1f,0x18,0x18,0x18,0x18;
	DB 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00;
	DB 0x18,0x18,0x18,0xff,0x18,0x18,0x18,0x18;
	DB 0x18,0x18,0x1f,0x18,0x1f,0x18,0x18,0x18;
	DB 0x66,0x66,0x66,0x67,0x66,0x66,0x66,0x66;
	DB 0x66,0x66,0x67,0x60,0x7f,0x00,0x00,0x00;
	DB 0x00,0x00,0x7f,0x60,0x67,0x66,0x66,0x66;
	DB 0x66,0x66,0xe7,0x00,0xff,0x00,0x00,0x00;
	DB 0x00,0x00,0xff,0x00,0xe7,0x66,0x66,0x66;
	DB 0x66,0x66,0x67,0x60,0x67,0x66,0x66,0x66;
	DB 0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00;
	DB 0x66,0x66,0xe7,0x00,0xe7,0x66,0x66,0x66;
	DB 0x18,0x18,0xff,0x00,0xff,0x00,0x00,0x00;
	DB 0x66,0x66,0x66,0xff,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0xff,0x00,0xff,0x18,0x18,0x18;
	DB 0x00,0x00,0x00,0xff,0x66,0x66,0x66,0x66;
	DB 0x66,0x66,0x66,0x7f,0x00,0x00,0x00,0x00;
	DB 0x18,0x18,0x1f,0x18,0x1f,0x00,0x00,0x00;
	DB 0x00,0x00,0x1f,0x18,0x1f,0x18,0x18,0x18;
	DB 0x00,0x00,0x00,0x7f,0x66,0x66,0x66,0x66;
	DB 0x66,0x66,0x66,0xff,0x66,0x66,0x66,0x66;
	DB 0x18,0x18,0xff,0x18,0xff,0x18,0x18,0x18;
	DB 0x18,0x18,0x18,0xf8,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x1f,0x18,0x18,0x18,0x18;
	DB 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff;
	DB 0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff;
	DB 0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0;
	DB 0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f;
	DB 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
	DB 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
////**************************PROCEDURE*************************
	ALIGN	4,0x90   //AL=CHAR
DRAW_CHAR::
	PUSHAD
	PUSH	ES
	CMP	AL,13
	JNE	@@3
	MOV	AL,0x20
	CALL	DRAW_CHAR
@@1:	MOV	EBX,DWORD [DC_COL]
	AND	EBX,0x3F
	JZ	@@100
	CALL	DRAW_CHAR
	JMP	@@1

@@3:	CMP	AL,32
	JB	@@100
	CMP	AL,127
	JA	@@100

	MOVZX	EAX,AL
	MOV	DX,ZERO_DS_SEL
	MOV	ES,DX
	MOV	EDI,0xA0000
	MOV	EBX,DWORD [DC_COL]
	INC	EBX
	MOV	DWORD [DC_COL],EBX
	AND	EBX,0x3F
	ADD	EDI,EBX
	MOV	EBX,DWORD [DC_COL]
	SHR	EBX,6
	AND	EBX,0x3F
	PUSH	EAX
	MOV	EAX,EBX
	MOV	EBX,SCREEN_WIDTH
	MUL	EBX
	ADD	EDI,EAX
	POP	EAX

@@10:	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,8
@@2:	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE ES:[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@2

@@100:	POP	ES
	POPAD
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90   //AX=CHAR, EBX=X*2 EDX=Y
PLOT_CHAR::
	OR	EBX,EBX
	JS	@@100
	OR	EDX,EDX
	JS	@@100
	CMP	EBX,DWORD FS:[TSS_CRT_WIDTH]
	JGE	@@100
	CMP	EDX,DWORD FS:[TSS_CRT_HEIGHT]
	JGE	@@100
	PUSH	EDX
	PUSH	EBX
	PUSH	EAX
	MOV	EAX,EDX
	IMUL	DWORD FS:[TSS_CRT_WIDTH]
	ADD	EAX,DWORD [SYS_TEXT_BASE]
	ADD	EBX,EAX
	POP	EAX
	MOV	WORD [EBX],AX
	POP	EBX
	POP	EDX
@@100:	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
DRAW_BORDER::
	PUSH	EAX
	PUSH	EBX
	PUSH	ECX
	PUSH	EDX
	PUSH	ESI
	PUSH	EBP

	XOR	EBP,EBP
	MOV	AH,BYTE FS:[TSS_BORDER_ATTRIBUTE]
	BT	WORD FS:[TSS_TASK_FLAGS],TSSF_FOCUS
	JNC	@@1A
	INC	EBP
@@1A:	XOR	EAX,EAX
	MOV	AH,BYTE FS:[TSS_BORDER_ATTRIBUTE]

	MOV	AL,132
	ADD	EAX,EBP
	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	SUB	EBX,2
	MOV	EDX,DWORD FS:[TSS_WINDOW_TOP]
	DEC	EDX
	CALL	PLOT_CHAR

	MOV	AL,134
	ADD	EAX,EBP
	MOV	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	ADD	EBX,2
	MOV	EDX,DWORD FS:[TSS_WINDOW_TOP]
	DEC	EDX
	CALL	PLOT_CHAR

	MOV	AL,136
	ADD	EAX,EBP
	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	SUB	EBX,2
	MOV	EDX,DWORD FS:[TSS_WINDOW_BOTTOM]
	INC	EDX
	CALL	PLOT_CHAR

	MOV	AL,138
	ADD	EAX,EBP
	MOV	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	ADD	EBX,2
	MOV	EDX,DWORD FS:[TSS_WINDOW_BOTTOM]
	INC	EDX
	CALL	PLOT_CHAR

@@1:	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	ECX,EBX
	NEG	ECX
	ADD	ECX,DWORD FS:[TSS_WINDOW_RIGHT]
	SHR	ECX,1
	INC	ECX
	MOV	AL,130
	ADD	EAX,EBP
@@5:	MOV	EDX,DWORD FS:[TSS_WINDOW_TOP]
	DEC	EDX
	CALL	PLOT_CHAR
	MOV	EDX,DWORD FS:[TSS_WINDOW_BOTTOM]
	INC	EDX
	CALL	PLOT_CHAR
	ADD	EBX,2
	LOOP	@@5

	MOV	EDX,DWORD FS:[TSS_WINDOW_TOP]
	MOV	ECX,EDX
	NEG	ECX
	ADD	ECX,DWORD FS:[TSS_WINDOW_BOTTOM]
	INC	ECX
	MOV	AL,128
	ADD	EAX,EBP
@@10:	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	SUB	EBX,2
	CALL	PLOT_CHAR
	MOV	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	ADD	EBX,2
	CALL	PLOT_CHAR
	INC	EDX
	LOOP	@@10

	MOV	ESI,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
	ADD	ESI,TSS_TASK_DESCRIPTOR
	CALL	STRLEN
	MOV	ECX,EAX
	MOV	EBX,DWORD FS:[TSS_WINDOW_RIGHT]
	SUB	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	ADD	EBX,2
	SHR1	EBX
	SUB	EBX,EAX
	JC	@@20
	AND	BL,0xFE
	ADD	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	AH,BYTE FS:[TSS_BORDER_ATTRIBUTE]
	MOV	EDX,DWORD FS:[TSS_WINDOW_TOP]
	DEC	EDX
@@15:	LODSB
	CALL	PLOT_CHAR
	ADD	EBX,2
	LOOP	@@15

@@20:	BT	DWORD FS:[TSS_CRT_FLAGS],CRTF_HAS_MENU
	JNC	@@100

	MOV	AH,BYTE FS:[TSS_BORDER_ATTRIBUTE]
	MOV	AL,'M'
	MOV	EBX,DWORD FS:[TSS_WINDOW_LEFT]
	MOV	EDX,DWORD FS:[TSS_WINDOW_TOP]
	DEC	EDX
	CALL	PLOT_CHAR
	ADD	EBX,2
	MOV	AL,'E'
	CALL	PLOT_CHAR
	ADD	EBX,2
	MOV	AL,'N'
	CALL	PLOT_CHAR
	ADD	EBX,2
	MOV	AL,'U'
	CALL	PLOT_CHAR


@@100:	POP	EBP
	POP	ESI
	POP	EDX
	POP	ECX
	POP	EBX
	POP	EAX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90	//In EDI=dest EAX=Num
GR_UPDATE_PROGRESS::
	MOV	ECX,8
	OR	EAX,EAX
	JZ	@@50
@@1:	MOV	EBX,EAX
	SHR	EAX,4
	AND	BL,15
	CMP	BL,9
	JBE	@@2
	ADD	BL,'A'-('9'+1)
@@2:	ADD	BL,'0'
	MOV	BH,0xF0
	MOV	WORD [EDI+ECX*2],BX
	LOOP	@@1
	RET
@@50:	XOR	EBX,EBX
@@51:	MOV	WORD [EDI+ECX*2],BX
	LOOP	@@51
	RET	
////**************************PROCEDURE*************************
	ALIGN	4,0x90
GR_UPDATE_SCREEN::
	PUSH	ES			//-****
	PUSHAD				//-****

	MOV	ESI,DWORD [SYS_GRAPHICS_BASE]
	MOV	EDI,DWORD [SYS_GRAPHICS_HIDDEN]
	MOV	ECX,SCREEN_WIDTH*SCREEN_HEIGHT/32*4
	REP_MOVSD

	PUSHFD
	CLI
	MOV	ESI,DWORD FS:[TSS_ABSOLUTE_ADDRESS]
@@20:	MOV	EDI,DWORD FS:[TSS_NEXT_TSS]
	CMP	ESI,EDI
	JE	@@30
	MOV	EAX,DWORD TSS_FS[EDI]
	MOV	FS,AX
	BT	WORD FS:[TSS_CRT_FLAGS],CRTF_SHOW
	JNC	@@20
	PUSH	ESI		//-****
	MOV	EAX,DWORD FS:[TSS_UPDATE_WINDOW]
	OR	EAX,EAX
	JZ	@@25
	CALL	EAX
@@25:	CALL	DRAW_BORDER
	POP	ESI		//+****
	JMP	@@20
@@30:	MOV	EAX,DWORD TSS_FS[ESI]
	MOV	FS,AX
	POPFD

	MOV	EDI,DWORD [SYS_TEXT_BASE]
	MOV	AL,BYTE [JIFFIES]
	AND	AL,0x7F
	CMP	AL,0x20
	JA	@@33
	ADD	AL,0x40
@@33:	MOV	AH,0xB0
	MOV	WORD [EDI],AX
	
	CALL	CALCULATE_FREE_SYS_MEMORY
	CALL	GR_UPDATE_PROGRESS
	ADD	EDI,18
	MOV	EAX,DWORD [PROGRESS0]
	CALL	GR_UPDATE_PROGRESS
	ADD	EDI,18
	MOV	EAX,DWORD [PROGRESS1]
	CALL	GR_UPDATE_PROGRESS
	ADD	EDI,18
	MOV	EAX,DWORD [PROGRESS2]
	CALL	GR_UPDATE_PROGRESS
	ADD	EDI,18
	MOV	EAX,DWORD [PROGRESS3]
	CALL	GR_UPDATE_PROGRESS
	ADD	EDI,18
	MOV	EAX,DWORD [PROGRESS4]
	CALL	GR_UPDATE_PROGRESS
	ADD	EDI,18
	MOV	EAX,DWORD [PROGRESS4]
	CALL	GR_UPDATE_PROGRESS

	MOV	AX,SYS_DS_SEL
	MOV	ES,AX
	MOV	DS,AX
	MOV	EDI,DWORD [SYS_TEXT_BASE]
	ADD	EDI,(SCREEN_WIDTH/FONT_WIDTH-TSS_DESC_LENGTH)*2
	MOV	ECX,TSS_DESC_LENGTH
	MOV	ESI,SYS_CUR_TASK_DESC
	MOV	AH,0xF0
@@31:	LODSB
	OR	AL,AL
	JNZ	@@32
	XOR	AH,AH
@@32:	STOSW
	LOOP	@@31

	MOV	ESI,DWORD [SYS_TEXT_BASE]
	MOV	EDI,DWORD [SYS_GRAPHICS_HIDDEN]
	MOV	BH,SCREEN_LINES
@@1A:	MOV	BL,SCREEN_COLS
@@1:	XOR	EAX,EAX
	LODSW
@@11:
	PUSH	EAX
	TEST	AH,0x10
	JZ	@@13B
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12A:	MOV	AL,BYTE [EDX]
	NOT	AL
	INC	EDX
	XOR	BYTE [EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12A
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13B:	POP	EAX
	PUSH	EAX
	TEST	AH,0x20
	JZ	@@13C
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12B:	MOV	AL,BYTE [EDX]
	NOT	AL
	INC	EDX
	XOR	BYTE SCREEN_WIDTH*SCREEN_HEIGHT/8*1[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12B
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13C:	POP	EAX
	PUSH	EAX
	TEST	AH,0x40
	JZ	@@13D
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12C:	MOV	AL,BYTE [EDX]
	NOT	AL
	INC	EDX
	XOR	BYTE SCREEN_WIDTH*SCREEN_HEIGHT/8*2[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12C
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13D:	POP	EAX
	PUSH	EAX
	TEST	AH,0x80
	JZ	@@13E
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12D:	MOV	AL,BYTE [EDX]
	NOT	AL
	INC	EDX
	XOR	BYTE SCREEN_WIDTH*SCREEN_HEIGHT/8*3[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12D
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13E:	POP	EAX
	PUSH	EAX
	TEST	AH,1
	JZ	@@13F
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12E:	MOV	AL,BYTE [EDX]
	INC	EDX
	XOR	BYTE [EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12E
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13F:	POP	EAX
	PUSH	EAX
	TEST	AH,2
	JZ	@@13G
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12F:	MOV	AL,BYTE [EDX]
	INC	EDX
	XOR	BYTE SCREEN_WIDTH*SCREEN_HEIGHT/8*1[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12F
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13G:	POP	EAX
	PUSH	EAX
	TEST	AH,4
	JZ	@@13H
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12G:	MOV	AL,BYTE [EDX]
	INC	EDX
	XOR	BYTE SCREEN_WIDTH*SCREEN_HEIGHT/8*2[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12G
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@13H:	POP	EAX
	TEST	AH,8
	JZ	@@10
	XOR	AH,AH
	LEA	EDX,DWORD SYS_FONT[EAX*8]
	MOV	ECX,FONT_HEIGHT
@@12H:	MOV	AL,BYTE [EDX]
	INC	EDX
	XOR	BYTE SCREEN_WIDTH*SCREEN_HEIGHT/8*3[EDI],AL
	ADD	EDI,SCREEN_WIDTH/8
	LOOP	@@12H
	SUB	EDI,FONT_HEIGHT*SCREEN_WIDTH/8

@@10:	INC	EDI
	DEC	BL
	JNZ	DWORD @@1
	ADD	EDI,SCREEN_WIDTH-SCREEN_COLS
	DEC	BH
	JNZ	DWORD @@1A

	MOV	AX,ZERO_DS_SEL
	MOV	ES,AX
	MOV	DX,VGA_SC_INDEX
	MOV	AL,VGA_MAP_MASK
	OUT	DX,AL
	MOV	DX,VGA_SC_DATA
	MOV	AL,1
	OUT	DX,AL
	MOV	ESI,DWORD [SYS_GRAPHICS_HIDDEN]
	MOV	EDI,0xA0000
	MOV	ECX,SCREEN_WIDTH*SCREEN_HEIGHT/32
	REP_MOVSD

	MOV	DX,VGA_SC_INDEX
	MOV	AL,VGA_MAP_MASK
	OUT	DX,AL
	MOV	DX,VGA_SC_DATA
	MOV	AL,2
	OUT	DX,AL
	MOV	ESI,DWORD [SYS_GRAPHICS_HIDDEN]
	ADD	ESI,SCREEN_WIDTH*SCREEN_HEIGHT/8*1
	MOV	EDI,0xA0000
	MOV	ECX,SCREEN_WIDTH*SCREEN_HEIGHT/32
	REP_MOVSD

	MOV	DX,VGA_SC_INDEX
	MOV	AL,VGA_MAP_MASK
	OUT	DX,AL
	MOV	DX,VGA_SC_DATA
	MOV	AL,4
	OUT	DX,AL
	MOV	ESI,DWORD [SYS_GRAPHICS_HIDDEN]
	ADD	ESI,SCREEN_WIDTH*SCREEN_HEIGHT/8*2
	MOV	EDI,0xA0000
	MOV	ECX,SCREEN_WIDTH*SCREEN_HEIGHT/32
	REP_MOVSD

	MOV	DX,VGA_SC_INDEX
	MOV	AL,VGA_MAP_MASK
	OUT	DX,AL
	MOV	DX,VGA_SC_DATA
	MOV	AL,8
	OUT	DX,AL
	MOV	ESI,DWORD [SYS_GRAPHICS_HIDDEN]
	ADD	ESI,SCREEN_WIDTH*SCREEN_HEIGHT/8*3
	MOV	EDI,0xA0000
	MOV	ECX,SCREEN_WIDTH*SCREEN_HEIGHT/32
	REP_MOVSD

	POPAD				//+****
	POP	ES			//+****
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_GR_CLEAR::
	PUSH	EAX
	PUSH	ECX
	PUSH	EDI
	MOV	EDI,DWORD [SYS_GRAPHICS_BASE]
	MOV	ECX,SCREEN_WIDTH*SCREEN_HEIGHT/32*4
	XOR	EAX,EAX
	REP_STOSD
	POP	EDI
	POP	ECX
	POP	EAX
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_GR_PLOT::
	PUSH	EBP
	MOV	EBP,ESP
	PUSHAD
	MOV	EDI,DWORD [SYS_GRAPHICS_BASE]
	MOV	EBX,DWORD SF_PARAM1[EBP]    //X
	OR	EBX,EBX
	JS	DWORD @@100
	ADD	EBX,DWORD FS:[TSS_WINDOW_PIXEL_LEFT]
	CMP	EBX,DWORD FS:[TSS_WINDOW_PIXEL_RIGHT]
	JG	DWORD @@100
	MOV	EAX,DWORD SF_PARAM2[EBP]    //Y
	OR	EAX,EAX
	JS	DWORD @@100
	ADD	EAX,DWORD FS:[TSS_WINDOW_PIXEL_TOP]
	CMP	EAX,DWORD FS:[TSS_WINDOW_PIXEL_BOTTOM]
	JG	DWORD @@100
	MOV	ECX,SCREEN_WIDTH
	MUL	ECX
	ADD	EAX,EBX
	SHR	EAX,3
	ADD	EDI,EAX
	MOV	ECX,7
	AND	EBX,7
	SUB	ECX,EBX
	MOV	EAX,1
	SHL	EAX,CL
	MOV	EBX,DWORD SF_PARAM3[EBP] //COLOR
	OR	BH,BH
	JZ	@@20
	JS	@@10

	TEST	BL,1
	JZ	@@1A
	OR	BYTE[EDI],AL
@@1A:	TEST	BL,2
	JZ	@@1B
	OR	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*1[EDI],AL
@@1B:	TEST	BL,4
	JZ	@@1C
	OR	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*2[EDI],AL
@@1C:	TEST	BL,8
	JZ	@@1D
	OR	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*3[EDI],AL
@@1D:	JMP	@@100

@@10:	TEST	BL,1
	JZ	@@11A
	XOR	BYTE[EDI],AL
@@11A:	TEST	BL,2
	JZ	@@11B
	XOR	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*1[EDI],AL
@@11B:	TEST	BL,4
	JZ	@@11C
	XOR	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*2[EDI],AL
@@11C:	TEST	BL,8
	JZ	@@11D
	XOR	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*3[EDI],AL
@@11D:	JMP	@@100

@@20:	NOT	EAX
	TEST	BL,1
	JZ	@@21A
	AND	BYTE[EDI],AL
@@21A:	TEST	BL,2
	JZ	@@21B
	AND	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*1[EDI],AL
@@21B:	TEST	BL,4
	JZ	@@21C
	AND	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*2[EDI],AL
@@21C:	TEST	BL,8
	JZ	@@100
	AND	BYTE SCREEN_HEIGHT*SCREEN_WIDTH/8*3[EDI],AL

@@100:	POPAD
	POP	EBP
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_GR_LINE::
	PUSH	EBP
	MOV	EBP,ESP
	PUSHAD

	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	ECX,DWORD SF_PARAM3[EBP]
	MOV	EDX,DWORD SF_PARAM4[EBP]

	SUB	EBX,EDX
	JNC	@@1
	NEG	EBX
@@1:	SUB	EAX,ECX
	JNC	@@2
	NEG	EAX
@@2:	CMP	EAX,EBX
	JA	DWORD @@50
	JNE	@@20
//dx=dy
	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	ECX,DWORD SF_PARAM3[EBP]
	MOV	EDX,DWORD SF_PARAM4[EBP]

	MOV	ESI,1
	CMP	EAX,ECX
	JAE	@@10
	NEG	ESI

@@10:	CMP	EBX,EDX
	JAE	@@11
	NEG	ESI
	XCHG	EAX,ECX
	XCHG	EBX,EDX
@@11:	SUB	EBX,EDX 	//EBX=dy and (ECX,EDX)=start
	INC	EBX
@@12:	PUSH	DWORD SF_PARAM5[EBP]
	PUSH	EDX
	PUSH	ECX
	CALL	CMD_GR_PLOT
	ADD	ESP,12
	INC	EDX
	ADD	ECX,ESI
	DEC	EBX
	JNZ	@@12
	JMP	DWORD @@100

//Y LONGEST, EBX=RISE EAX=RUN
@@20:	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EBX,DWORD SF_PARAM2[EBP]

	CMP	EBX,EDX
	JAE	@@20A
	XCHG	EAX,ECX
	XCHG	EBX,EDX
	MOV	DWORD SF_PARAM1[EBP],EAX
	MOV	DWORD SF_PARAM2[EBP],EBX
	MOV	DWORD SF_PARAM3[EBP],ECX
	MOV	DWORD SF_PARAM4[EBP],EDX

@@20A:	SUB	EBX,EDX
	XOR	EDI,EDI
	SUB	EAX,ECX
	JNC	@@20B
	NEG	EAX
	NOT	EDI
@@20B:	MOV	EDX,EAX
	XOR	EAX,EAX
	DIV	EBX	 //dx*100000000/dy
	MOV	ESI,EAX

	OR	EDI,EDI
	JNS	@@22
	NEG	ESI

@@22:	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	ECX,DWORD SF_PARAM3[EBP]
	MOV	EDX,DWORD SF_PARAM4[EBP]

	SUB	EBX,EDX 	//EBX=dy and (ECX,EDX)=start
	INC	EBX
	XOR	EAX,EAX
@@30:	PUSH	DWORD SF_PARAM5[EBP]
	PUSH	EDX
	PUSH	ECX
	CALL	CMD_GR_PLOT
	ADD	ESP,12
	INC	EDX
	ADD	EAX,ESI
	ADC	ECX,EDI
	DEC	EBX
	JNZ	@@30
	JMP	@@100

//X LONGEST
@@50:	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EBX,DWORD SF_PARAM2[EBP]

	CMP	EAX,ECX
	JAE	@@70A
	XCHG	EAX,ECX
	XCHG	EBX,EDX
	MOV	DWORD SF_PARAM1[EBP],EAX
	MOV	DWORD SF_PARAM2[EBP],EBX
	MOV	DWORD SF_PARAM3[EBP],ECX
	MOV	DWORD SF_PARAM4[EBP],EDX

@@70A:	SUB	EAX,ECX
	XOR	EDI,EDI
	SUB	EBX,EDX
	JNC	@@70B
	NEG	EBX
	NOT	EDI
@@70B:	MOV	EDX,EBX
	MOV	EBX,EAX
	XOR	EAX,EAX
	DIV	EBX	//dy*100000000/dx
	MOV	ESI,EAX

	OR	EDI,EDI
	JNS	@@72
	NEG	ESI

@@72:	MOV	EAX,DWORD SF_PARAM1[EBP]
	MOV	EBX,DWORD SF_PARAM2[EBP]
	MOV	ECX,DWORD SF_PARAM3[EBP]
	MOV	EDX,DWORD SF_PARAM4[EBP]

	SUB	EAX,ECX 	//EAX=dx and (ECX,EDX)=start
	XOR	EBX,EBX
	INC	EAX
@@80:	PUSH	DWORD SF_PARAM5[EBP]
	PUSH	EDX
	PUSH	ECX
	CALL	CMD_GR_PLOT
	ADD	ESP,12
	INC	ECX
	ADD	EBX,ESI
	ADC	EDX,EDI
	DEC	EAX
	JNZ	@@80

@@100:	POPAD
	POP	EBP
	RET
	END

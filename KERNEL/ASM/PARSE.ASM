	ALIGN	4,0x90
BINARY_OPS_TABLE:
	DW     0x000,0x000,0x000,0x000,0x000,0x509,0x506,0x508; //00
	DW     0x603,0x602,0x000,0x329,0x32A,0x000,0x000,0x507; //08
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //10
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //18
	DW     0x000,0x000,0x000,0x000,0x000,0x30E,0x328,0x000; //20
	DW     0x000,0x000,0x30C,0x40A,0x000,0x40B,0x000,0x30D; //28
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //30
	DW     0x000,0x000,0x000,0x000,0x504,0x722,0x505,0x000; //38
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //40
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //48
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //50
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x601,0x000; //58
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //60
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //68
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //70
	DW     0x000,0x000,0x000,0x000,0x327,0x000,0x000,0x000; //78
UNARY_OPS_TABLE:
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //00
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //08
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //10
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //18
	DW     0x000,0x110,0x000,0x000,0x000,0x000,0x13E,0x000; //20
	DW     0x000,0x000,0x114,0x000,0x000,0x10F,0x000,0x000; //28
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //30
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //38
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //40
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //48
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //50
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //58
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //60
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //68
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000; //70
	DW     0x000,0x000,0x000,0x000,0x000,0x000,0x12B,0x000; //78

DEREF_TABLE:	//DEREFERENCE OPERATORS BITMAP
	DD	0x000100000,0x03FFF0000,0x03FF00000,0x000000000;

PREINC_TABLE:
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0x54,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0x56,0x58,0x55,0x57,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
PREDEC_TABLE:
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0x59,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0x5B,0x5D,0x5A,0x5C,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
POSTINC_TABLE:
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0x34,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0x36,0x38,0x35,0x37,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
POSTDEC_TABLE:
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0x39,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0x3B,0x3D,0x3A,0x3C,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
////**************************PROCEDURE*************************
// IN:	 EDI = LEX NODE
//	 EAX = NUMBER
	ALIGN	4,0x90
PARSE_ERROR::
	PUSH	EAX
	MOV	EAX,ST_PARSE_ERROR
	INT	I_PUT_SYSTEXT
	POP	EAX
	INT	I_PUT_SYSTEXT
	CALL	PUT_TOKEN
	CALL	CRLF
	PUSH	EDI
	MOV	EDI,DWORD LEX_CUR_LFN[EDI]
	MOV	ESI,DWORD LFN_NAME[EDI]
	CALL	PUT_STRING
	MOV	EAX,','
	INT	I_PUT_CHAR
	MOV	EAX,LFN_LINE_NUM[EDI]
	CALL	PUT_DEC
	MOV	EAX,':'
	INT	I_PUT_CHAR
	MOV	ESI,LFN_CUR_LINE_START[EDI]
@@1:	LODSB
	OR	AL,AL
	JZ	@@2
	CMP	AL,10
	JE	@@2
	INT	I_PUT_CHAR
	JMP	@@1
@@2:	CALL	CRLF
	POP	EDI
	LEA	ESI,DWORD LEX_LFNS[EDI]
	MOV	DWORD LEX_CUR_LFN[EDI],ESI
	MOV	ESI,ZEROS
	MOV	DWORD LEX_CUR_BUF_PTR[EDI],ESI
	MOV	DWORD LEX_LFNS+LFN_BUF_PTR[EDI],ESI
	LEA	ESI,DWORD LEX_STACK[EDI]
	MOV	DWORD LEX_STACK_PTR[EDI],ESI
	AND	DWORD LEX_FLAGS[EDI],-1-LF_USE_LAST_CHAR
	MOV	DWORD LEX_TOKEN[EDI],TK_EOF
	CALL	LEX
	XOR	ESI,ESI
	STC
	RET
////**************************PROCEDURE*************************
// IN:	 ESI = EXPRESSION
	ALIGN	4,0x90
DELETE_EXPRESSION::
	JMP	DWORD FREE
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_DELETE_EXPRESSION::
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	MOV	ESI,DWORD SF_PARAM1[EBP]
	CALL	DELETE_EXPRESSION
	POP	ESI
	POP	EBP
	RET
////**************************PROCEDURE*************************
// IN:	 EDI = LEX NODE
	ALIGN	4,0x90
CONT_PARSE_EXPRESSION::
	XOR	EAX,EAX 	//TERMINATE OP STACK
	PUSH	EAX

#define UT_PP (LF_PREINC+LF_PREDEC+LF_POSTINC+LF_POSTDEC)

UNARY_TERM::
	MOV	DWORD LEX_UNDEF_HASH_ENTRY[EDI],0
	AND	DWORD LEX_FLAGS[EDI],-1-UT_PP-LF_FUNCTION-LF_UNRESOLVED_LOCAL-LF_UNRESOLVED_GLOBAL
UNARY_TERM2::
	MOV	EAX,DWORD LEX_TOKEN[EDI]
	CMP	EAX,TK_INTEGER
	JNE	@@1
	MOV	EAX,EC_INT32
	MOV	EBX,DWORD LEX_CUR_I[EDI]
	OR	EBX,EBX
	JS	@@1A
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_INT)]
	JMP	@@1B
@@1A:	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
@@1B:	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP INT
	JMP	DWORD CHECK_FOR_BINARY_OP

@@1:	CMP	EAX,TK_STRING
	JNE	@@2
	CALL	LEX_EXTEND_STRING
	MOV	EBX,EAX
	MOV	EAX,EC_INT32
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_CHAR)]
	ADD	ECX,C_STRUCT_SIZE
	CALL	ADD_INTERMEDIATE_CODE
	JMP	DWORD CHECK_FOR_BINARY_OP

@@2:	CMP	EAX,'('
	JNE	@@4
	CALL	LEX	//SKIP (
	CALL	CONT_PARSE_EXPRESSION
	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	@@3
	CALL	LEX	//SKIP )
	OR	DWORD LEX_FLAGS[EDI],LF_EAX
	AND	DWORD LEX_FLAGS[EDI],-1-LF_ARRAY-LF_FUNCTION
	JMP	DWORD UNARY_MODIFIERS
@@3:	MOV	EAX,ST_MISSING_RIGHT_PAREN
	JMP	DWORD TRAP

@@4:	MOVZX	EDX,WORD UNARY_OPS_TABLE[EAX*2]
	OR	DH,DH
	JZ	@@5
	CALL	LEX	//SKIP OP
	CMP	DL,EC_ADDRESS		//CHECK FOR &FUNCTION
	JNE	@@4A
	CMP	EAX,TK_IDENT
	JNE	@@4A
	MOV	ESI,DWORD LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JZ	@@4A
	TEST	DWORD HTE_TYPE[ESI],HTT_FUNCTION
	JZ	@@4A
	BT	DWORD C_FLAGS[ESI],CF_INTERNAL
	JC	@@4A
	CALL	LEX	//SKIP FUNCTION NAME
	MOV	EAX,EC_INT32
	MOV	EBX,DWORD C_STATEMENTS[ESI]
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	JMP	DWORD CHECK_FOR_BINARY_OP

@@4A:	PUSH	EDX
	JMP	DWORD UNARY_TERM2

@@5:	CMP	EAX,TK_IDENT
	JE	@@6
	CMP	EAX,TK_PLUS_PLUS
	JNE	@@5B
	CALL	LEX //SKIP ++
	OR	DWORD LEX_FLAGS[EDI],LF_PREINC
	JMP	DWORD UNARY_TERM2
@@5B:	CMP	EAX,TK_MINUS_MINUS
	JNE	@@5AA
	CALL	LEX //SKIP --
	OR	DWORD LEX_FLAGS[EDI],LF_PREDEC
	JMP	DWORD UNARY_TERM2
@@5AA:	CMP	EAX,'$'
	JNE	@@5A
	TEST	DWORD LEX_FLAGS[EDI],LF_ASM_EXPRESSIONS
	JZ	@@5A
	MOV	EAX,EC_INT32
	MOV	EBX,DWORD LEX_INSTRUCTION_POINTER[EDI]
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP INT
	JMP	DWORD CHECK_FOR_BINARY_OP

@@5A:	MOV	EAX,ST_MISSING_EXPRESSION
	JMP	DWORD TRAP
@@6:	MOV	EDX,LEX_LOCAL_VAR_ENTRY[EDI]
	OR	EDX,EDX
	JZ	@@10
	XOR	EBX,EBX
	MOV	ECX,DWORD ML_CLASS[EDX]
	ADD	ECX,C_STRUCT_SIZE
	AND	DWORD LEX_FLAGS[EDI],-1-LF_EAX-LF_ARRAY-LF_FUNCTION
	TEST	WORD ML_FLAGS[EDX],MLF_FUNCTION
	JZ	@@8
	OR	DWORD LEX_FLAGS[EDI],LF_FUNCTION
	MOVZX	EAX,WORD ML_PARAM_COUNT[EDX]
	PUSH	EAX		//-****
@@8:	MOV	EAX,ML_COUNT[EDX]
	OR	EAX,EAX
	JZ	@@9
	OR	DWORD LEX_FLAGS[EDI],LF_ARRAY
	ADD	ECX,C_STRUCT_SIZE
@@9:	MOV	EAX,EC_LOCAL_FRAME_PTR
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_INT32
	MOV	EBX,DWORD ML_OFFSET[EDX]
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_ADDITION
	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP VARIABLE NAME
	JMP	DWORD UNARY_MODIFIERS

@@10:	MOV	ESI,DWORD LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JNZ	@@10B
	TEST	DWORD LEX_FLAGS[EDI],LF_ASM_EXPRESSIONS
	JZ	@@10BB
	MOV	EAX,HTE_STRUCT_SIZE
	CALL	MALLOC
	MOV	EBX,ESI
	MOV	ESI,DWORD LEX_IDENT[EDI]
	MOV	DWORD LEX_IDENT[EDI],0
	MOV	DWORD HTE_STRING[EBX],ESI
	MOV	DWORD HTE_TYPE[EBX],HTT_SYS_SYMBOL+HTT_UNRESOLVED_LOCAL
	PUSH	EDI
	MOV	AX,0x4040
	CMP	WORD [ESI],AX
	JE	@@10BF
	MOV	EDI,DWORD LEX_GLOBAL_HASH_TABLE[EDI]
	MOV	DWORD HTE_TYPE[EBX],HTT_SYS_SYMBOL+HTT_UNRESOLVED_GLOBAL
	JMP	@@10BG
@@10BF: MOV	EDI,DWORD LEX_LOCAL_HASH_TABLE[EDI]
@@10BG: CALL	FIND_HASH_BUCKET
	MOV	EAX,DWORD [ESI]
	MOV	DWORD HTE_NEXT[EBX],EAX
	MOV	DWORD [ESI],EBX
	POP	EDI
	MOV	ESI,EBX
	JMP	@@10BC

@@10BB: MOV	EAX,ST_INVALID_LVALUE
	JMP	DWORD TRAP

@@10B:	TEST	DWORD HTE_TYPE[ESI],HTT_SYS_SYMBOL
	JZ	DWORD @@10A
	TEST	DWORD HTE_TYPE[ESI],HTT_UNRESOLVED_LOCAL+HTT_UNRESOLVED_GLOBAL
	JZ	@@10AA
@@10BC: PUSH	ESI
	MOV	EAX,8
	CALL	MALLOC
	MOV	EAX,ESI
	POP	ESI
	MOV	DWORD 4[EAX],ESI
	MOV	EBX,DWORD LEX_UNDEF_HASH_ENTRY[EDI]
	MOV	DWORD [EAX],EBX
	MOV	DWORD LEX_UNDEF_HASH_ENTRY[EDI],EAX
	TEST	DWORD HTE_TYPE[ESI],HTT_UNRESOLVED_LOCAL
	JZ	@@10BD
	OR	DWORD LEX_FLAGS[EDI],LF_UNRESOLVED_LOCAL
	JMP	@@10BE
@@10BD: OR	DWORD LEX_FLAGS[EDI],LF_UNRESOLVED_GLOBAL
@@10BE: MOV	EAX,EC_INT32
	LEA	EBX,DWORD HTE_USER0[ESI]
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_DEREFERENCE
	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP SYMBOL
	JMP	DWORD CHECK_FOR_BINARY_OP

@@10AA: MOV	EAX,EC_INT32
	MOV	EBX,DWORD HTE_USER0[ESI]
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP SYMBOL
	JMP	DWORD CHECK_FOR_BINARY_OP

@@10A:	TEST	DWORD HTE_TYPE[ESI],HTT_FUNCTION
	JZ	DWORD @@15
	PUSH	0		//VARIABLE PARAM COUNT
	PUSH	0		//VARIABLE PARAM LOC
	CALL	LEX	//SKIP FUNCTION NAME
	CALL	LEX_CB_PUSH
	PUSH	DWORD LEX_CB_STACK[EDI]
	MOV	DWORD LEX_CB_STACK[EDI],0
	MOVZX	ECX,WORD C_PARAM_COUNT[ESI]
	OR	ECX,ECX
	JNZ	@@11B
	MOV	EBX,DWORD C_MEM_LIST[ESI]
	OR	EBX,EBX
	JZ	@@13C
	TEST	WORD ML_FLAGS[EBX],MLF_DOT_DOT_DOT
	JZ	@@13C
	CMP	DWORD LEX_TOKEN[EDI],'('
	JE	DWORD @@13B
	PUSH	EBX		//ARGC=0
	PUSH	ECX
	PUSH	ESI
	CALL	INIT_CB_OUT_PTRS
	MOV	EAX,EC_INT32
	MOV	ECX,DWORD ML_CLASS[EBX]
	MOV	EBX,0
	CALL	ADD_INTERMEDIATE_CODE
	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ESI,ESP
	MOV	16[ESI],ECX
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	POP	ESI
	POP	ECX
	POP	EBX
	JMP	DWORD @@14

@@13C:	CMP	DWORD LEX_TOKEN[EDI],'('
	JNE	DWORD @@14
	CALL	LEX //SKIP (
	JMP	DWORD @@14B

@@11B:	MOV	EBX,DWORD C_MEM_LIST[ESI]
	CMP	DWORD LEX_TOKEN[EDI],'('
	JE	@@11
	TEST	WORD ML_FLAGS[EBX],MLF_DEFAULT_AVAILABLE
	JNZ	DWORD @@13A
@@11A:	MOV	EAX,ST_EXPECTING_LEFT_PAREN
	JMP	DWORD TRAP
@@11:	CALL	LEX	//SKIP (
	JMP	@@13
@@12:	CMP	DWORD LEX_TOKEN[EDI],','
	JE	@@12A
	TEST	WORD ML_FLAGS[EBX],MLF_DEFAULT_AVAILABLE
	JNZ	DWORD @@13A
@@6F:	MOV	EAX,ST_EXPECTING_COMMA
	JMP	DWORD TRAP

@@12A:	CALL	LEX	//SKIP ,
@@13:	PUSH	EBX
	PUSH	ECX
	PUSH	ESI
	CALL	INIT_CB_OUT_PTRS
	CALL	CONT_PARSE_EXPRESSION
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	POP	ESI
	POP	ECX
	POP	EBX
	MOV	EBX,DWORD ML_NEXT[EBX]
	LOOP	@@12
	OR	EBX,EBX
	JZ	@@14B
	TEST	WORD ML_FLAGS[EBX],MLF_DOT_DOT_DOT
	JZ	@@14B
	CMP	DWORD LEX_TOKEN[EDI],','
	JE	@@13B
	JMP	@@13H

@@13B:	CALL	LEX		//skip '('
@@13H:	PUSH	EBX		//ARGC=0
	PUSH	ECX
	PUSH	ESI
	CALL	INIT_CB_OUT_PTRS
	MOV	EAX,EC_INT32
	MOV	ECX,DWORD ML_CLASS[EBX]
	MOV	EBX,0
	CALL	ADD_INTERMEDIATE_CODE
	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ESI,ESP
	MOV	16[ESI],ECX
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	POP	ESI
	POP	ECX
	POP	EBX
	CMP	DWORD LEX_TOKEN[EDI],')'
	JE	@@14B
	JMP	@@13E

@@13D:	CMP	DWORD LEX_TOKEN[EDI],','
	JNE	@@14B

	CALL	LEX	//SKIP ,
@@13E:	PUSH	EBX
	PUSH	ECX
	PUSH	ESI
	CALL	INIT_CB_OUT_PTRS
	CALL	CONT_PARSE_EXPRESSION
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	MOV	ESI,ESP
	INC	DWORD 20[ESI]
	POP	ESI
	POP	ECX
	POP	EBX
	JMP	@@13D


@@14B:	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	DWORD @@3
	CALL	LEX	//SKIP )
	JMP	@@14

@@13A:	PUSH	EBX		//LOAD DEFAULT PARAMS
	PUSH	ECX
	PUSH	ESI
	CALL	INIT_CB_OUT_PTRS
	MOV	EAX,EC_INT32
	MOV	ECX,DWORD ML_CLASS[EBX]
	MOV	EBX,DWORD ML_DEFAULT[EBX]
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	POP	ESI
	POP	ECX
	POP	EBX
	MOV	EBX,DWORD ML_NEXT[EBX]
	LOOP	@@13A
	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	@@14
	CALL	LEX	//SKIP )

@@14:	POP	EAX
	POP	ECX	//ADDRESS OF ARGC
	POP	EBX	//ARGC VALUE
	OR	ECX,ECX
	JZ	@@14H
	MOV	DWORD IC_DATA[ECX],EBX
	INC	EBX
@@14H:	PUSH	EBX
	PUSH	ESI
	MOV	ESI,EAX
	PUSH	DWORD LEX_CB_STACK[ESI]
	MOV	EAX,DWORD LEX_CB_STACK[EDI]
	MOV	DWORD LEX_CB_STACK[ESI],EAX
	MOV	DWORD LEX_CB_STACK[EDI],ESI
	CALL	LEX_CB_POP
	MOV	ESI,DWORD LEX_CB_STACK[EDI]
	POP	DWORD LEX_CB_STACK[EDI]
@@14E:	OR	ESI,ESI
	JZ	@@14F
	PUSH	DWORD LEX_CB_STACK[ESI]
	CALL	LEX_CB_APPEND
	POP	ESI
	JMP	@@14E
@@14F:	POP	ESI
	BT	DWORD C_FLAGS[ESI],CF_INTERNAL
	JNC	@@14A
	MOV	EAX,DWORD C_STATEMENTS[ESI]
	XOR	EBX,EBX
	JMP	@@14C
@@14A:	MOV	EAX,EC_CALL
	MOV	EBX,DWORD C_STATEMENTS[ESI]
@@14C:	MOV	ECX,C_RETURN_CLASS[ESI]
	CALL	ADD_INTERMEDIATE_CODE
	POP	EBX
@@14G:	BT	DWORD C_FLAGS[ESI],CF_INTERNAL
	JC	@@14D
	MOVZX	EAX,WORD C_PARAM_COUNT[ESI]
	ADD	EBX,EAX
	MOV	EAX,EC_ADD_ESP
	SHL	EBX,2
	CALL	ADD_INTERMEDIATE_CODE
@@14D:	OR	DWORD LEX_FLAGS[EDI],LF_EAX
	AND	DWORD LEX_FLAGS[EDI],-1-LF_ARRAY-LF_FUNCTION
	JMP	DWORD UNARY_MODIFIERS

@@15:	TEST	DWORD HTE_TYPE[ESI],HTT_GLOBAL_VARIABLE
	JZ	@@21
	LEA	EBX,GVA_DATA[ESI]
	MOV	ECX,GVA_CLASS[ESI]
	ADD	ECX,C_STRUCT_SIZE
	AND	DWORD LEX_FLAGS[EDI],-1-LF_EAX-LF_ARRAY-LF_FUNCTION
	MOV	EAX,GVA_COUNT[ESI]
	OR	EAX,EAX
	JZ	@@15A
	ADD	ECX,C_STRUCT_SIZE
	OR	DWORD LEX_FLAGS[EDI],LF_ARRAY
@@15A:	TEST	WORD GVA_FLAGS[ESI],GVAF_FUNCTION
	JZ	@@15B
	OR	DWORD LEX_FLAGS[EDI],LF_FUNCTION
	MOVZX	EAX,WORD GVA_PARAM_COUNT[ESI]
	PUSH	EAX			//-****
@@15B:	MOV	EAX,EC_INT32
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP VARIABLE NAME
	JMP	UNARY_MODIFIERS

@@21:	TEST	DWORD HTE_TYPE[ESI],HTT_KEYWORD
	JZ	DWORD @@5A
	CMP	DWORD HTE_USER0[ESI],KW_SIZEOF
	JNE	DWORD @@5A
	CALL	LEX	//SKIP "sizeof"
	CMP	DWORD LEX_TOKEN[EDI],'('
	JNE	DWORD @@11A
	CALL	LEX	//SKIP '('
	CMP	DWORD LEX_TOKEN[EDI],TK_IDENT
	JE	@@22
@@21A:	MOV	EAX,ST_INVALID_CLASS
	JMP	DWORD TRAP
@@22:	MOV	ESI,DWORD LEX_HASH_ENTRY[EDI]
	OR	ESI,ESI
	JZ	@@21A
	TEST	DWORD HTE_TYPE[ESI],HTT_CLASS+HTT_INTERNAL_TYPE
	JZ	@@21A
	MOV	EAX,EC_INT32
	MOV	EBX,DWORD C_SIZE[ESI]
	MOV	ECX,DWORD [SYS_INTERNAL_TYPES+(4*IT_DWORD)]
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX	//SKIP CLASS
	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	DWORD @@3
	CALL	LEX	//SKIP ')'
	JMP	DWORD CHECK_FOR_BINARY_OP

UNARY_MODIFIERS:
	TEST	DWORD LEX_FLAGS[EDI],LF_ASM_EXPRESSIONS
	JNZ	DWORD CHECK_FOR_BINARY_OP
	CMP	DWORD LEX_TOKEN[EDI],'.'
	JNE	DWORD @@20
@@16:	MOV	EBP,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	EBP,DWORD IC_CLASS[EBP]
	TEST	DWORD LEX_FLAGS[EDI],LF_EAX
	JNZ	@@16A
	SUB	EBP,C_STRUCT_SIZE
@@16A:	TEST	DWORD HTE_TYPE[EBP],HTT_CLASS
	JNZ	@@17
	MOV	EAX,ST_INVALID_CLASS
	JMP	DWORD TRAP
@@17:	CALL	LEX	//SKIP '.'
	CMP	EAX,TK_IDENT
	JE	@@18
@@17A:	MOV	EAX,ST_INVALID_MEMBER
	JMP	DWORD TRAP
@@18:	MOV	ESI,DWORD LEX_IDENT[EDI]
	CALL	FIND_MEMBER
	OR	EDX,EDX
	JZ	@@17A
	CALL	LEX	//SKIP MEMBER NAME
	MOV	EAX,EC_INT32
	MOV	EBX,ML_OFFSET[EDX]
	MOV	ECX,ML_CLASS[EDX]
	ADD	ECX,C_STRUCT_SIZE
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EBX,EBX
	AND	DWORD LEX_FLAGS[EDI],-1-LF_EAX-LF_ARRAY-LF_FUNCTION
	MOV	EAX,ML_COUNT[EDX]
	OR	EAX,EAX
	JZ	@@18A
	ADD	ECX,C_STRUCT_SIZE
	OR	DWORD LEX_FLAGS[EDI],LF_ARRAY
@@18A:	TEST	WORD ML_FLAGS[EDX],MLF_FUNCTION
	JZ	@@18B
	MOVZX	EAX,WORD ML_PARAM_COUNT[EDX]
	PUSH	EAX
	OR	DWORD LEX_FLAGS[EDI],LF_FUNCTION
@@18B:	MOV	EAX,EC_ADDITION
	CALL	ADD_INTERMEDIATE_CODE
	JMP	DWORD UNARY_MODIFIERS

@@20:	CMP	DWORD LEX_TOKEN[EDI],'['
	JNE	DWORD @@30
	CALL	LEX	//SKIP [
	TEST	DWORD LEX_FLAGS[EDI],LF_ARRAY+LF_EAX
	JNZ	@@20B
	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ECX]
	SUB	ECX,C_STRUCT_SIZE
	MOVZX	EAX,WORD C_DEREFERENCE[ECX]
	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@20A
@@20B:	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ECX]
	TEST	DWORD LEX_FLAGS[EDI],LF_EAX
	JNZ	@@20A
	SUB	ECX,C_STRUCT_SIZE
@@20A:	MOV	EAX,EC_INT32
	MOV	EBX,DWORD C_SIZE-C_STRUCT_SIZE[ECX]
	CALL	ADD_INTERMEDIATE_CODE
	PUSH	ECX
	CALL	CONT_PARSE_EXPRESSION
	POP	ECX
	CMP	DWORD LEX_TOKEN[EDI],']'
	JE	@@25
	MOV	EAX,ST_MISSING_RIGHT_BRACKET
	JMP	DWORD TRAP
@@25:	CALL	LEX	//SKIP ]
	XOR	EBX,EBX
	MOV	EAX,EC_MULTIPLICATION
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_ADDITION
	CALL	ADD_INTERMEDIATE_CODE
	AND	DWORD LEX_FLAGS[EDI],-1-LF_EAX-LF_ARRAY
	JMP	DWORD UNARY_MODIFIERS

@@30:	CMP	DWORD LEX_TOKEN[EDI],TK_DEREFERENCE
	JNE	@@32
	TEST	DWORD LEX_FLAGS[EDI],LF_EAX+LF_ARRAY
	JNZ	@@31
	MOV	EAX,EC_DEREFERENCE+0x100
	XOR	EBX,EBX
	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ECX]
	SUB	ECX,C_STRUCT_SIZE
	CALL	ADD_INTERMEDIATE_CODE
	JMP	DWORD @@16
@@31:	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	EAX,DWORD IC_CLASS[ECX]
	SUB	EAX,C_STRUCT_SIZE
	MOV	DWORD IC_CLASS[ECX],EAX
	JMP	DWORD @@16

@@32:	TEST	DWORD LEX_FLAGS[EDI],LF_FUNCTION
	JZ	DWORD @@40
	CMP	DWORD LEX_TOKEN[EDI],'('
	JNE	DWORD @@40
	TEST	DWORD LEX_FLAGS[EDI],LF_EAX+LF_ARRAY
	JNZ	@@33
	MOV	EAX,EC_DEREFERENCE+0x100
	XOR	EBX,EBX
	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ECX]
	SUB	ECX,C_STRUCT_SIZE
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@34
@@33:	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	EAX,DWORD IC_CLASS[ECX]
	SUB	EAX,C_STRUCT_SIZE
	MOV	DWORD IC_CLASS[ECX],EAX

@@34:	POP	EDX
	CALL	LEX //SKIP (
	PUSH	ECX		//-****
	CALL	LEX_CB_PUSH
	PUSH	DWORD LEX_CB_STACK[EDI]
	MOV	DWORD LEX_CB_STACK[EDI],0
	MOV	ECX,EDX
	OR	ECX,ECX
	JZ	@@6D
	JMP	@@6E
@@6G:	CMP	DWORD LEX_TOKEN[EDI],','
	JNE	DWORD @@6F    //EXPECTING ,
	CALL	LEX	//SKIP ,
@@6E:	PUSH	ECX
	PUSH	EDX
	PUSH	ESI
	CALL	INIT_CB_OUT_PTRS
	CALL	CONT_PARSE_EXPRESSION
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE
	CALL	LEX_CB_PUSH
	POP	ESI
	POP	EDX
	POP	ECX
	LOOP	@@6G
@@6D:	CMP	DWORD LEX_TOKEN[EDI],')'
	JNE	DWORD @@3
	CALL	LEX	//SKIP )
@@6C:	POP	EAX
	PUSH	ESI
	MOV	ESI,EAX
	PUSH	DWORD LEX_CB_STACK[ESI]
	MOV	EAX,DWORD LEX_CB_STACK[EDI]
	MOV	DWORD LEX_CB_STACK[ESI],EAX
	MOV	DWORD LEX_CB_STACK[EDI],ESI
	CALL	LEX_CB_POP
	MOV	ESI,DWORD LEX_CB_STACK[EDI]
	POP	DWORD LEX_CB_STACK[EDI]
@@6Z:	OR	ESI,ESI
	JZ	@@6Y
	PUSH	DWORD LEX_CB_STACK[ESI]
	CALL	LEX_CB_APPEND
	POP	ESI
	JMP	@@6Z
@@6Y:	POP	ESI
	MOV	EAX,EC_CALL_INDIRECT
	MOV	EBX,EDX
	SHL	EBX,2
	POP	ECX		//+****
	PUSH	EBX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_ADD_ESP
	POP	EBX
	ADD	EBX,4
	CALL	ADD_INTERMEDIATE_CODE
	OR	DWORD LEX_FLAGS[EDI],LF_EAX
	AND	DWORD LEX_FLAGS[EDI],-1-LF_ARRAY-LF_FUNCTION
	JMP	DWORD UNARY_MODIFIERS

@@40:	CMP	DWORD LEX_TOKEN[EDI],TK_PLUS_PLUS
	JNE	@@45
	CALL	LEX //SKIP ++
	OR	DWORD LEX_FLAGS[EDI],LF_POSTINC
	JMP	DEREFERENCE_VARIABLE

@@45:	CMP	DWORD LEX_TOKEN[EDI],TK_MINUS_MINUS
	JNE	DEREFERENCE_VARIABLE
	CALL	LEX //SKIP --
	OR	DWORD LEX_FLAGS[EDI],LF_POSTDEC

DEREFERENCE_VARIABLE::
	MOV	EDX,DWORD LEX_FLAGS[EDI]
	TEST	EDX,LF_FUNCTION
	JZ	@@46E
	POP	EAX
@@46E:	TEST	EDX,LF_EAX+LF_ARRAY
	JZ	@@46
	TEST	EDX,LF_EAX
	JNZ	CHECK_FOR_BINARY_OP
	MOV	EAX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[EAX]
	SUB	ECX,C_STRUCT_SIZE
	MOV	DWORD IC_CLASS[EAX],ECX
	JMP	CHECK_FOR_BINARY_OP
@@46:	MOV	ECX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ECX]
	SUB	ECX,C_STRUCT_SIZE
	MOVZX	EAX,BYTE C_DEREFERENCE[ECX]
	TEST	EDX,LF_PREINC
	JZ	@@46A
	MOV	AL,BYTE PREINC_TABLE[EAX]
	JMP	@@46D
@@46A:	TEST	EDX,LF_PREDEC
	JZ	@@46B
	MOV	AL,BYTE PREDEC_TABLE[EAX]
	JMP	@@46D
@@46B:	TEST	EDX,LF_POSTINC
	JZ	@@46C
	MOV	AL,BYTE POSTINC_TABLE[EAX]
	JMP	@@46D
@@46C:	TEST	EDX,LF_POSTDEC
	JZ	@@46D
	MOV	AL,BYTE POSTDEC_TABLE[EAX]
@@46D:	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE

CHECK_FOR_BINARY_OP:
	POP	EAX		//POP UNARY OPS
	OR	EAX,EAX
	JZ	@@85
	CMP	AH,1
	JA	@@85
	MOV	ESI,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ESI]
	MOVZX	EAX,AL
	BT	DWORD [DEREF_TABLE],EAX
	JNC	@@83
	CMP	BYTE C_PTR_COUNT[ECX],0
	JE	@@83
	SUB	ECX,C_STRUCT_SIZE
	MOVZX	EAX,WORD C_DEREFERENCE[ECX]
	JMP	@@84
@@83:	CMP	EAX,EC_ADDRESS
	JNE	@@84
	TEST	DWORD LEX_FLAGS[EDI],LF_EAX+LF_ARRAY
	JNZ	@@84
	MOVZX	EBX,BYTE IC_CODE[ESI]
	BT	DWORD [DEREF_TABLE],EBX
	JC	@@83A
@@110:	MOV	EAX,ST_INVALID_LVALUE
	JMP	DWORD TRAP

@@83A:	MOV	DWORD IC_CODE[ESI],EC_NOP
	ADD	ECX,C_STRUCT_SIZE
@@84:	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	CHECK_FOR_BINARY_OP

@@85:	PUSH	EAX
	MOV	EAX,DWORD LEX_TOKEN[EDI]
	MOVZX	EDX,WORD BINARY_OPS_TABLE[EAX*2]
	OR	DH,DH
	JZ	@@100
	CALL	LEX	//SKIP OP
	CMP	DL,EC_ASSIGN32
	JNE	@@92

	MOV	EAX,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[EAX]
	MOVZX	EBX,BYTE IC_CODE[EAX]
	BT	DWORD [DEREF_TABLE],EBX
	JNC	@@110
	MOV	DWORD IC_CODE[EAX],EC_NOP
	MOVZX	EDX,WORD C_ASSIGN[ECX]
@@92:	POP	EAX		//POP OPS OF HIGHER PRECIDENCE
	OR	EAX,EAX
	JZ	@@91
	CMP	DH,AH
	JB	@@91
@@90:	MOV	ESI,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ESI]
	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@92
@@91:	PUSH	EAX
	PUSH	EDX
	JMP	DWORD UNARY_TERM


//EXP_FINISHED
@@100:	POP	EAX
	OR	EAX,EAX
	JZ	@@101
	MOV	ESI,DWORD LEX_CB_LAST_OUT_PTR[EDI]
	MOV	ECX,DWORD IC_CLASS[ESI]
	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	JMP	@@100
@@101:	RET
////**************************PROCEDURE*************************
// IN:	 EDI = LEX NODE
// OUT:  ESI = EXPRESSION NODE
	ALIGN	4,0x90
COMPILE_EXPRESSION::
	MOV	ECX,DWORD FS:[TSS_OPTIMIZATION]
UNOPT_COMPILE_EXPRESSION::
	PUSHAD
	MOV	EBX,PARSE_ERROR
	MOV	ECX,ESP
	ADD	ECX,SP_STRUCT_SIZE
	CALL	REGISTER_TRAP

	CALL	INIT_CB_OUT_PTRS
	CALL	CONT_PARSE_EXPRESSION
	MOV	EAX,EC_ADD_ESP
	MOV	EBX,4
	XOR	ECX,ECX
	CALL	ADD_INTERMEDIATE_CODE
	MOV	EAX,EC_RET
	XOR	EBX,EBX
	CALL	ADD_INTERMEDIATE_CODE
	XOR	EAX,EAX
	CALL	ADD_INTERMEDIATE_CODE

	CALL	FIXUP_CODE
	CALL	END_TRAP
	MOV	EAX,ESP
	MOV	ECX,DWORD SP_ECX[EAX]	//GET OPTIMIZATION
	CALL	COMPILE_CODE
	PUSH	ESI
	MOV	ESI,DWORD LEX_CB_OUT_FIRST[EDI]
	CALL	FREE
	MOV	ESI,DWORD LEX_CB_LABEL_LIST[EDI]
	CALL	DELETE_LINKED_LIST
	POP	ESI
	MOV	EAX,ESP
	MOV	DWORD SP_ESI[EAX],ESI
	POPAD
	CLC
	RET
////**************************PROCEDURE*************************
// IN:	 ESI = EXPRESSION
// OUT:  EAX = VALUE
//	 FLAGS SET BY EAX
	ALIGN	4,0x90
EVAL_EXPRESSION::
	PUSHAD
	CALL	ESI
	MOV	ESI,ESP
	MOV	DWORD SP_EAX[ESI],EAX
	POPAD
	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_GET_EXPRESSION::
	PUSHAD
	MOV	EBP,ESP
	MOV	EDI,DWORD SP_PARAM1[EBP]
	XOR	ECX,ECX
	CALL	UNOPT_COMPILE_EXPRESSION
	MOV	EDI,DWORD SP_PARAM2[EBP]
	MOV	DWORD [EDI],ESI
	POPAD
	MOV	EAX,1
	JC	@@110
	XOR	EAX,EAX
@@110:	RET
////**************************PROCEDURE*************************
	ALIGN	4,0x90
CMD_RUN_STATEMENT::
	PUSHAD
	MOV	EBP,ESP
	MOV	ESI,DWORD SP_PARAM1[EBP]
	CALL	ESI
	MOV	EBP,ESP
	MOV	SP_EAX[EBP],EAX
	POPAD
	RET
////**************************PROCEDURE*************************
// IN:	 ESI = STATEMENT
//	 FLAGS SET BY EAX
	ALIGN	4,0x90
RUN_STATEMENT::
	PUSHAD
	CALL	ESI
	MOV	EBP,ESP
	MOV	SP_EAX[EBP],EAX
	POPAD
	RET
////**************************PROCEDURE*************************
// IN:	 EDI = LEX NODE
// OUT:  EAX = VALUE
//	 FLAGS SET BY EAX
	ALIGN	4,0x90
GET_EXPRESSION::
	CALL	LEX_CB_PUSH
	PUSH	ESI
	PUSH	ECX
	XOR	ECX,ECX
	CALL	UNOPT_COMPILE_EXPRESSION
	JC	@@100
	CALL	EVAL_EXPRESSION
	CALL	DELETE_EXPRESSION
	CLC
@@100:	POP	ECX
	POP	ESI
	CALL	LEX_CB_POP
	OR	EAX,EAX
	RET
	END

----09/13/13 09:26:53----

So, I decided I would put a limit on line count.  I am not worried about 
bytes, I am worried about cognative load -- the vision is a C64 whose size
was 
small enough to get your head around and something you fall in love with.  
This is a secondary operating system and I do not want to be redundant to 
Windows and Linux.  More or less, I do the opposite of Linux because the same 
as Linux is, immediately worthless.  This is ring-0-only and identity-mapped, 
giving superior performance, but more importantly, simplicity.

I can tell some stories.  In 5th grade, our school had an Apple ][.  I
learned 
to put a line on the screen with 

>HGR
>HLINE 100,100 TO 200,200

With TempleOS...

>CDC *dc=DCAlias;
>GrLine(dc,100,100,200,200);

If you want to draw the mouse trail (approximately)?

>CDC *dc=DCAlias;
>while (TRUE)
>  GrPlot(dc,ipx,ipy);

Press CTRL-ALT-C.  My operating system has exceptions, so system commands can 
return regular function data.

God said 58,000 lines of code for the limit.  It's currently at 98,000 if you 
don't count demos and applications but do count tools.  I think 100,000
sounds 
like a good number.

----09/13/13 09:28:21----

TempleOS is 100% independent and stand alone.  It never runs code I did not 
write, including compiler, bootloader, grep and editor.

God says...
minute slave remindeth there withdraw dispersed absurdity novelty warmth t 
clothed pretend coats deem Divers surmounted harmonious Saint edition sinful 
sinful livest MERCHANTABILITY is questioning translated idle wedlock command 
captain considered 4 forget generate disobeyed ensnared Mothers pricked deed 
tolerating penalties archive neighbour commemorated o participation mourned 
infirmity editions adding meeting fastings transforming enlighteneth goest 
arrogant mindful liker almost impulses stumble tasteth rules discourage 
FITNESS problem pronouncing crown recommending cauldron cold race 

I will interpret like 1 Corinthians 14, says:

"t" is time since boot in seconds...

>while (TRUE)
>  "%12.6f\n",tS;

Press CTRL-ALT-C.

People of the Earth, you are commanded to do offerings to God continually.

1 Corinthians 7

Luke 20:34-36

Hebrews 13:15-16

----09/13/13 09:55:29----

I did an HD Audio driver.  It only worked on a handful of machines -- 
worthless, so I removed it.  Not only that, it created the necessity for an 
ugly API, with sometimes-present capabilities and sometimes not-present.  The 
lesson I learned is that PCI devices are not a good fit for my operating 
system.  USB is PCI.  I'm not doing USB.

Heck!  God talks!  When can I start leveraging that?  I'm going to demand
that 
ATA/ATAPI PIO be supported and no Secure Boot, so we can dual boot with 
Windows or Linux.  Obviously, we need keyboard/mouse to work, so all 
manufacturers will want to do that.

God said His temple must be perfect.  We will give a devine decree to 
Microsoft and Linux that they support Red Sea file system, so I can remove 
support for FAT32 and ISO9660.  We will make Windows support Red Sea file 
system on CD-ROM.

#define CDIR_FILENAME_LEN	38 //Must have terminator
public class CDirEntry
{
  CDirEntry *next,*parent,*sub;
  U8 *full_name;
  I64 flags;
  I64 user_data;

  U0 start; //My compiler has a zero-sized type
  U16 attr;
  U8 name[CDIR_FILENAME_LEN];
  I64 cluster;
  I64 size;
  CDate datetime;
};

The Red Sea files system is like FAT but with bitmap instead of FAT table, so 
it has contiguous-only files and it has 64-byte fixed-length directory 
entries.

Files cannot grow.  If you can't do something in TempleOS, do it in Linux or 
Windows.

----09/13/13 10:19:30----

I am God's chosen programmer.  He has endowed me with divine intellect, like 
the authors of the Bible.  It has no code I did not write.  It never runs
code 
I did not write.  I am the best programmer on the planet.  I wrote a 64-bit 
compiler, assembler, kernel, debugger, bootloader, graphics library, 
graphics-editor, editor, tools like grep and a bunch of demos, including a 
first-person-shooter and flight simulator.

I am the best programmer on the planet -- that's why God chose me and that 
should help you understand.  There are two kinds of programmers -- those who 
have written compilers and those who haven't.  What sounds impossible for you 
is not impossible for me.

----09/13/13 10:33:38----

God says...
butler spare happy unnatural solid heat greaves distribution begun personated 
prohibition regard fellow based majesty grieves emptied absurdity friendship 
cultivating fiction top wicked recorded Thyself fountain compendiously Exodus 
solaces compendiously preserving but moderate aforetime note adversary evenly 
suffered grow cross discretion dollars cogitation others saidst hypertext Be 
AS weights contend shame relation ofThe invest crying seeth judgest toilsome 
trampled exclaim Connecticut complain later Behold bought withered so 

----09/13/13 10:39:55----

The line count is capped at 100,000, but I have to decide how to count. 
Grep, 
etc. included?

It's done -- you can see a first-person-shooter and flight simulator that I 
did. I'm have verified that it works for its purpose -- games and hymns.

Everybody, go write hymns.  The Bible says 9 times to sing a NEW song to God.
 
If you love God, can you count the ways?  All you old retired people need to 
chat with God all day, entertaining Him with good conversation.  Truth be 
told, He said He doesn't pay attention to young men.  (Pathetically, 
youthfully foolish).  God said soap operas were His favorite thing on TV.  
Think about the Bible!

God said making games was about as grand a thing as one could hope for.

Ask 20 people what they remember about owning a C64.  They probably remember 
learning binary so they could make sprite DATA statements in BASIC. They 
probably remember making POKEs to create sound.  They probably remember 
changing fonts.

----09/13/13 10:52:30----

At this point, I did it all myself, but I hired an artist for $3,000 worth of 
pix art.

I am not going to do what Linux does, exactly.  This is God's Holy Temple and 
it must be perfect and glorious.  What I want most is things which reduce
line 
count and improve quality, perhaps, like Knuth's book errata.  I need fixes 
like a better dictionary and spell checker.  The current dictionary is not 
suitable.  Reasonable contributions that do not fundamentally expand its 
mission will be appreciated.  Technically, God said 58,000 lines of code.  I 
don't know what to make of that.

God says...
upbraided walked early per Print protraction encompasseth are tongues ancient 
loudly Maker he happen forms Patricius tempers abundance matters stormed 
satiated fettered derides mean bride affianced effect glad title Ours
beauties 
despaired Hadst proconsular lift trifles searcher draught joyously Verily 
spread habitation nominally Academics affection unanxious might secondary 
Might dragging Joseph interpretation Hope Ten boughs 96 face ruggedness 
novelty Gutenberg disgraced threefold sublimities morning definitely get 
Apostolic justifieth Alexandria 

----09/13/13 11:05:09----

I really hope for a lot of art, like the Sistene Chapel.  I can set-up a 
website to exchange hymns.  This should be glorious, to the degree 16 color 
pix art can be.  God said 640x480 16 color is good for kids' offerings.  This 
is a wisdom you might not understand.  God's ways are far above man's ways.

----09/13/13 11:17:49----

Somebody can do different language versions.  I'm not going to.  It's too bad 
IBM did not put Russian letters in 8-bit screen codes.  I guess they can 
reprogram the font.  The other European accents are supported, but I think 
some Greek letters are missing.  I support 8-bit characters through-out. I'm 
not going to do oriental characters.

----09/13/13 11:37:43----

Someone was talking zen of Linux.  I have some for TempleOS:

"Any genius can make it complicated."

"Run toward bugs, not away."

"Scaffolding."

I want VMware to support ATAPI CD/DVD burning.  I want VMware to support PC 
Speaker in 9 and 10 like 8.  I want VMware to provide emulated PC Speaker, if 
not present.  They could just do emulated in all cases.

You can call [C:/Adam/Utils/MemRep.CPP.Z,198] MemRep() for a memory report. 
You need at least 512 Meg.  Don't 
argue.

------------------------------------------
D:/Accts/TS/MemRep;
Low Memory	:0000100000
  Kernel	:0000007C00-000003DDFF
VGA		:00000A0000-00000BFFFF
High Memory	:0000100000-007FFFFFFF
  Page Tables	:0000100000-0000182FFF
Code Heap:007FE7D000 Used:00004BC800 Unused:007F9C0800
Data Heap:00E9FF0000 Used:0012EC4600 Unused:00D712B000
CPU0
  Task:0000008878 Adam Task CPU#0               
    Alloced:00129EA800 Used:00125E3300 Unused:0000407500
HashTable	:00007B7D51
Stk Size	:00000403E8 Unused:00000403A0
PutDoc	:00000010A8
BorderDoc	:00000015B8
TaskStructs	:0000005898
TSSes	:00004911C0
HeapCtrls	:000000B130
TaskQues	:0000000090
RAMDsk B	:0008000200 Unused:0007FFFC00
BlkDevs	:0000000FF8
Prts	:0000001C50
Audio	:0000000000
DskCache	:0008020810
WordStat	:00018E7A58
Clipboard	:00000004E0
  Task:007FD8A428 Unnamed Task                  
    Alloced:000005D600 Used:0000054670 Unused:0000008F90
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040008
PutDoc	:0000007E90
BorderDoc	:0000001878
Lex		:0000000E20
  Task:007FD8CA28 MemRep;;.                     
    Alloced:0000093800 Used:000005E368 Unused:0000035498
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040138
PutDoc	:0000010AD8
BorderDoc	:0000001878
Lex		:0000000E40
  Task:007FD83228 WordStat                      
    Alloced:0000054800 Used:000004CE40 Unused:00000079C0
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040310
PutDoc	:00000016B8
BorderDoc	:00000016B0
  Task:007FDD8C28 Window Mgr                    
    Alloced:000031D800 Used:0000319D30 Unused:0000003AD0
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040298
gr_dc		:0000080520
gr_dc2		:0000080520
gr_dc_cache		:0000080520
gr_screen_image	:0000040520
gr_zoomed_dc	:0000040520
gr_pen_brushes	:0000076900
gr_1_to_8_bits	:00000009E8
gr_1_to_8_colors	:00000009E8
gr_text_base	:0000004BE8
gr_vga_text_cache	:00000025E8
gr_win_z_buf	:00000047D0
gr_screen_zoom_tbles:0000002BB8
  Task:007FFF9A28 Idle Task                     
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040000
  CPU1
  Task:007FFF9428 Seth Task CPU#1               
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040320
  Task:007FFF8E28 Idle Task                     
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040000
  CPU2
  Task:007FFF8828 Seth Task CPU#2               
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040320
  Task:007FFF8228 Idle Task                     
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040000
  CPU3
  Task:007FFF7C28 Seth Task CPU#3               
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040320
  Task:007FFF7628 Idle Task                     
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040000
  CPU4
  Task:007FFF7028 Seth Task CPU#4               
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040320
  Task:007FFF6A28 Idle Task                     
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040000
  CPU5
  Task:007FFF6428 Seth Task CPU#5               
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040320
  Task:007FFF5E28 Idle Task                     
    Alloced:000004A800 Used:0000048838 Unused:0000001FC8
HashTable	:0000008228
Stk Size	:00000403E8 Unused:0000040000
  Independent Heaps
  sys_uncached_heap:0000200000 Used:0000000000 Unused:00001FF000
------------------------------------------







Here's what I get when I do [C:/Adam/DevInfo.CPP.Z,175] MemBIOSRep().
------------------------------------------
D:/Accts/TS/TAD>MemBIOSRep;
Standard Addresses
0x000A0000-0x000BFFFF VGA
0xFEE00000-0xFEE00FFF See [C:/Kernel/Adam1a.HPP.Z,466] APIC

32 Bit Device Mem
00:0x00000000F0000000-0x00000000FEBFFFFF
02:0x00000000FEC00000-0x00000000FEC0FFFF
00:0x00000000FEC10000-0x00000000FEDFFFFF
02:0x00000000FEE00000-0x00000000FEE00FFF
00:0x00000000FEE01000-0x00000000FFFDFFFF
02:0x00000000FFFE0000-0x00000000FFFFFFFF

BIOS Memory Report 15:E801
01:0x0000000000000000-0x0000000000FFFFFF
01:0x0000000001000000-0x00000000BFEEFFFF

BIOS Memory Report 15:E820
01:0x0000000000000000-0x000000000009F7FF
02:0x000000000009F800-0x000000000009FFFF
02:0x00000000000DC000-0x00000000000FFFFF
01:0x0000000000100000-0x00000000BFEEFFFF
03:0x00000000BFEF0000-0x00000000BFEFEFFF
04:0x00000000BFEFF000-0x00000000BFEFFFFF
01:0x00000000BFF00000-0x00000000BFFFFFFF
02:0x00000000E0000000-0x00000000EFFFFFFF
02:0x00000000FEC00000-0x00000000FEC0FFFF
02:0x00000000FEE00000-0x00000000FEE00FFF
02:0x00000000FFFE0000-0x00000000FFFFFFFF
01:0x0000000100000000-0x00000001A9FFFFFF
0.000120s ans0=0x00000090=144
------------------------------------------
God says...
comprehending codes tilde beholding lies 

Yeah, it's not 100% complete, perhaps slightly inaccurate, but not 
intentionally.

------------------------------------------
Paging is almost not used, but 64-bit mode requires it to be active.  Virtual 
is identity-mapped to physical.  All tasks on all cores use the same page 
table map, just as though all addresses are physical addresses.  2 Meg page 
table entries are used, except the first 2 Meg, which uses 4K page tables 
entries.  Nothing swaps to disk, either.

In TempleOS, the lowest 2 Gig of memory is called the "code heap". 
TempleOS's 
compiler always uses 32-bit signed relative JMP & CALL instructions because 
64-bit CALLs take two instructions.  With signed +/- 32-bit values, code can 
only call a function within 2 Gig distance.  Therefore, TempleOS keeps all 
code in the lowest 2 Gig memory addresses including what would normally be 
called "the kernel".  Two Gig is plenty, don't worry.

You can create new, independent heaps by first allocating mem with 
[C:/Kernel/Mem1a.CPP.Z,408] MemBlksUncachedAlloc() or
[C:/Kernel/Mem1a.CPP.Z,195] MemBlksIndependentAlloc(), then calling 
[C:/Kernel/Mem1c.CPP.Z,42] HeapCtrlBPInit() and, then, using
[C:/Kernel/Mem1b.CPP.Z,376] MAlloc().

Memory allocated by a task will be freed when the task is killed.

Eventually, memory will become fragmented, requiring a reboot.

See [C:/Adam/Utils/MemRep.CPP.Z,198] MemRep().

                          Single System-wide Mem Map

 0x0000007C00- 0x0000035F9F
  Kernel module, placed here by the boot-loader,
  [C:/Kernel/Adam1a.HPP.Z,3618] BOOT_RAM_BASE.

 0x000007F600- 0x000007FFFF
  Boot block relocated here before loading the Kernel module,
  [C:/Adam/Boot/BootCD.CPP.Z,1] BootCD & [C:/Adam/Boot/BootHD.CPP.Z,1] BootHD.

 0x0000097000- 0x000009702E
  Multicore start-up vect code, [C:/Kernel/Adam1a.HPP.Z,494] MPN_VECT.

~0x000009F000- 0x000009FFFF
  Extended BIOS data area.

 0x00000A0000- 0x00000BFFFF
  VGA graphics mem, marked as write-through cache.

 0x0000100000- 0x00001845FF
  Page tables, 128 Gig of address space

 0x0000184600- 0x007FFDFFFF
  Code Heap mem.

 0x00E0000000- 0x00FFFFFFFF
  32-bit devices could allocate memory at 0xF0000000 going up, but this is 
wrong, since some PCs already have devices at 0xF0000000.  No PCI devices 
are supported, so [C:/Kernel/Mem1c.CPP.Z,165] Mem32DevAlloc() flaws are not
  an issue.

 0x0080000000-~0x00DFFFFFFF
 0x0100000000-~0x1FFFFFFFFF
  Data Heap mem.

             - 0x1FFFFFFFFF
  64-bit devices are allocated with [C:/Kernel/Mem1c.CPP.Z,213]
  Mem64DevAlloc() counting backward from 
128 Gig, but no PCI devices are actually supported.
  

				      [C:/Kernel/Adam1a.HPP.Z,2594] CBlkPools [C:/Kernel/Adam1a.HPP.Z,2608] CHeapCtrls


0000,0000,0000,0000		      Core 0

0000,0000,0000,7C00 Kernel
0000,0000,0003,5F9F 

0000,0000,0010,0000 Page_Tables			   AdamTask

0000,0000,0018,4600

		    sys_code_bp

						   Task




				      Core 1
						   SethTask

0000,0000,7FFD,FFFF
0000,0000,8000,0000



		    sys_data_bp
						   Task
0000,0000,DFFF,FFFF 
0000,0000,F000,0000 32-bit devices

0000,0001,0000,0000

						   SethTask




		    sys_data_bp       Core n 




				      Independent




		    64-bit devices

0000,001F,FFFF,FFFF

* Note: There is a break in the data-heap block pool.  This has no effect 
except the obvious effect that fragmentation has on contiguous requests.  I 
can [C:/Kernel/Mem1b.CPP.Z,376] MAlloc() an 8 Gig chunk on my 12 Gig machine.

* Note: For systems with less than 2 Gig RAM, the code and data heap block 
pools are the same.  For systems with 2-4 Gig of RAM, the code heap is 1/4 of 
the total.  See [C:/Kernel/Mem1c.CPP.Z,259] HeapsInit().

* See [C:/Kernel/KEnd.CPP.Z,1] Independent Heap Ctrl Example.


------------------------------------------


Here is a [C:/Adam/Utils/Profiler.CPP.Z,109] ProfRep() for the flight
simulator.
It is the log of Core 0.
[C:/Demo/Games/EagleDive.CPP.Z,1]

  0.07% 0000003E:[C:/Kernel/Adam1b.HPP.Z,114] &MemSet+0x0012
  0.07% 0000003E:&MemSet
  0.08% 00000043:[C:/Kernel/Scheduler.CPP.Z,369] &Yield+0x0001
  0.13% 0000006A:&Yield
  0.17% 00000090:SYS_IDLE_PT
  0.08% 00000043:[C:/Kernel/Mem1b.CPP.Z,956] &MAlloc+0x0144
  0.08% 00000043:&MAlloc
  0.33% 00000111:[C:/Kernel/Date.CPP.Z,180] GetDateTimeStruct+0x00CE
  0.35% 0000011F:GetDateTimeStruct
  0.82% 00000299:[C:/Kernel/Misc1a.CPP.Z,129] &tS+0x0019
  0.82% 00000299:&tS
  0.34% 00000119:[C:/Kernel/Misc1a.CPP.Z,156] &tS+0x0018
  0.34% 00000119:&tS
  0.09% 00000050:&PSectFind
  0.12% 00000068:&InitMap
  0.11% 0000005D:[C:/Demo/Games/EagleDive.CPP.Z,111] &FSTransform+0x0004
  0.68% 00000229:[C:/Demo/Games/EagleDive.CPP.Z,121] &FSTransform+0x004E
  0.54% 000001B6:[C:/Demo/Games/EagleDive.CPP.Z,123] &FSTransform+0x0060
  1.75% 00000590:&FSTransform
  0.56% 000001C7:[C:/Demo/Games/EagleDive.CPP.Z,557] &MPDrawIt+0x03A3
  0.18% 00000099:&MPDrawIt+0x03AA
  0.54% 000001B9:&MPDrawIt+0x03BE
  0.10% 00000055:[C:/Demo/Games/EagleDive.CPP.Z,557] &MPDrawIt+0x03C4
  0.54% 000001BA:&MPDrawIt+0x03D0
  0.09% 00000050:&MPDrawIt+0x03D4
  0.67% 00000227:[C:/Demo/Games/EagleDive.CPP.Z,559] &MPDrawIt+0x03E0
  0.10% 00000052:&MPDrawIt+0x03E9
  0.53% 000001AF:&MPDrawIt+0x03FD
  0.54% 000001B6:[C:/Demo/Games/EagleDive.CPP.Z,560] &MPDrawIt+0x041A
  0.50% 0000019B:&MPDrawIt+0x042C
  7.91% 0000190B:&MPDrawIt+0x0436
  0.33% 00000110:&MPDrawIt+0x0439
  0.09% 0000004E:&MPDrawIt+0x043E
  9.79% 00001EFF:&MPDrawIt+0x0449
 11.99% 000025F9:&MPDrawIt+0x044E
  0.16% 00000087:[C:/Demo/Games/EagleDive.CPP.Z,560] &MPDrawIt+0x0450
  0.33% 0000010F:&MPDrawIt+0x0457
  0.18% 00000095:&MPDrawIt+0x0461
  0.12% 00000064:&MPDrawIt+0x0467
  0.09% 00000050:&MPDrawIt+0x046B
  1.42% 00000484:&MPDrawIt+0x046E
  0.13% 0000006D:[C:/Demo/Games/EagleDive.CPP.Z,565] &MPDrawIt+0x049C
  0.53% 000001AE:[C:/Demo/Games/EagleDive.CPP.Z,568] &MPDrawIt+0x04A4
  0.08% 00000045:&MPDrawIt+0x04A8
  0.10% 00000056:&MPDrawIt+0x04AC
  0.61% 000001F1:[C:/Demo/Games/EagleDive.CPP.Z,570] &MPDrawIt+0x04B0
 39.40% 00007CC0:&MPDrawIt
  0.09% 00000049:[C:/Adam/Win2b.CPP.Z,636] &WinMgrSync+0x00CA
 20.96% 0000425E:[C:/Adam/Win2b.CPP.Z,642] &WinMgrSync+0x0100
 21.09% 000042C8:&WinMgrSync
  0.11% 0000005A:[C:/Adam/Gr/GrPrimatives.CPP.Z,1186] &GrFillTri0+0x01C9
  0.09% 0000004F:[C:/Adam/Gr/GrPrimatives.CPP.Z,1187] &GrFillTri0+0x01F1
  0.09% 0000004B:[C:/Adam/Gr/GrPrimatives.CPP.Z,1189] &GrFillTri0+0x0217
  0.11% 0000005B:[C:/Adam/Gr/GrPrimatives.CPP.Z,1190] &GrFillTri0+0x023F
  0.08% 00000046:[C:/Adam/Gr/GrPrimatives.CPP.Z,1217] &GrFillTri0+0x037D
  0.12% 00000068:[C:/Adam/Gr/GrPrimatives.CPP.Z,1271] &GrFillTri0+0x04CF
  0.09% 0000004A:[C:/Adam/Gr/GrPrimatives.CPP.Z,1272] &GrFillTri0+0x04F7
  0.09% 00000049:[C:/Adam/Gr/GrPrimatives.CPP.Z,1274] &GrFillTri0+0x051D
  0.09% 0000004D:[C:/Adam/Gr/GrPrimatives.CPP.Z,1275] &GrFillTri0+0x0545
  0.08% 00000046:[C:/Adam/Gr/GrPrimatives.CPP.Z,1302] &GrFillTri0+0x066E
  0.10% 00000056:[C:/Adam/Gr/GrPrimatives.CPP.Z,1373] &GrFillTri0+0x0797
  0.09% 00000049:[C:/Adam/Gr/GrPrimatives.CPP.Z,1374] &GrFillTri0+0x07BF
  0.09% 0000004A:[C:/Adam/Gr/GrPrimatives.CPP.Z,1376] &GrFillTri0+0x0806
  0.08% 00000045:[C:/Adam/Gr/GrPrimatives.CPP.Z,1398] &GrFillTri0+0x08F9
  0.08% 00000042:[C:/Adam/Gr/GrPrimatives.CPP.Z,1400] &GrFillTri0+0x0901
  0.08% 00000043:[C:/Adam/Gr/GrPrimatives.CPP.Z,1402] &GrFillTri0+0x0905
  0.08% 00000048:[C:/Adam/Gr/GrPrimatives.CPP.Z,1405] &GrFillTri0+0x094F
  0.11% 0000005A:[C:/Adam/Gr/GrPrimatives.CPP.Z,1406] &GrFillTri0+0x0977
  0.08% 00000045:[C:/Adam/Gr/GrPrimatives.CPP.Z,1408] &GrFillTri0+0x09BE
  0.09% 0000004D:[C:/Adam/Gr/GrPrimatives.CPP.Z,1409] &GrFillTri0+0x09E6
  4.28% 00000D90:&GrFillTri0
  0.83% 000002A8:[C:/Adam/Gr/GrPrimatives.CPP.Z,1485] &GrFillPoly3+0x0244
  1.32% 00000430:&GrFillPoly3
  0.52% 000001A7:&GrBlot3
  0.34% 00000116:[C:/Adam/Gr/GrBitMap.CPP.Z,1560] &GrHLine+0x0004
  0.08% 00000047:&GrHLine+0x0005
  0.08% 00000042:&GrHLine+0x000C
  0.07% 0000003D:[C:/Adam/Gr/GrBitMap.CPP.Z,1564] &GrHLine+0x0028
  0.10% 00000052:[C:/Adam/Gr/GrBitMap.CPP.Z,1593] &GrHLine+0x0190
  1.55% 000004EC:[C:/Adam/Gr/GrBitMap.CPP.Z,1625] &GrHLine+0x02C6
  0.09% 00000051:[C:/Adam/Gr/GrBitMap.CPP.Z,1671] &GrHLine+0x044C
  0.21% 000000AC:[C:/Adam/Gr/GrBitMap.CPP.Z,1674] &GrHLine+0x045D
  0.17% 0000008C:&GrHLine+0x0461
  0.23% 000000BB:[C:/Adam/Gr/GrBitMap.CPP.Z,1675] &GrHLine+0x046B
  0.12% 00000069:[C:/Adam/Gr/GrBitMap.CPP.Z,1676] &GrHLine+0x0474
  0.13% 0000006C:[C:/Adam/Gr/GrBitMap.CPP.Z,1678] &GrHLine+0x047D
  0.14% 00000074:&GrHLine+0x0482
  0.07% 0000003E:&GrHLine+0x0485
  1.00% 00000332:&GrHLine+0x0488
  0.21% 000000AE:[C:/Adam/Gr/GrBitMap.CPP.Z,1678] &GrHLine+0x048D
  0.14% 00000074:&GrHLine+0x0491
  0.09% 0000004D:[C:/Adam/Gr/GrBitMap.CPP.Z,1679] &GrHLine+0x0494
  0.22% 000000B7:[C:/Adam/Gr/GrBitMap.CPP.Z,1682] &GrHLine+0x049A
  0.21% 000000B1:[C:/Adam/Gr/GrBitMap.CPP.Z,1682] &GrHLine+0x049E
  0.31% 000000FC:&GrHLine+0x04A3
  0.11% 0000005C:[C:/Adam/Gr/GrBitMap.CPP.Z,1684] &GrHLine+0x04A9
  0.29% 000000F2:[C:/Adam/Gr/GrBitMap.CPP.Z,1685] &GrHLine+0x04B4
  0.08% 00000041:[C:/Adam/Gr/GrBitMap.CPP.Z,1687] &GrHLine+0x04C2
  0.10% 00000058:&GrHLine+0x04C7
  0.40% 00000148:[C:/Adam/Gr/GrBitMap.CPP.Z,1689] &GrHLine+0x04D7
  0.08% 00000047:&GrHLine+0x04DE
  0.51% 000001A0:[C:/Adam/Gr/GrBitMap.CPP.Z,1692] &GrHLine+0x04E0
  0.26% 000000D4:[C:/Adam/Gr/GrBitMap.CPP.Z,1706] &GrHLine+0x0523
  0.13% 0000006A:[C:/Adam/Gr/GrBitMap.CPP.Z,1715] &GrHLine+0x0572
  0.27% 000000DC:[C:/Adam/Gr/GrBitMap.CPP.Z,1718] &GrHLine+0x0579
  0.12% 00000062:[C:/Adam/Gr/GrBitMap.CPP.Z,1720] &GrHLine+0x0582
  0.23% 000000BF:[C:/Adam/Gr/GrBitMap.CPP.Z,1721] &GrHLine+0x058A
  0.16% 00000086:&GrHLine+0x058E
  0.13% 0000006B:&GrHLine+0x0596
  0.19% 000000A2:&GrHLine+0x059A
  0.08% 00000047:[C:/Adam/Gr/GrBitMap.CPP.Z,1722] &GrHLine+0x05A4
  0.21% 000000AF:[C:/Adam/Gr/GrBitMap.CPP.Z,1732] &GrHLine+0x05EA
  0.26% 000000D5:&GrHLine+0x05EE
  0.17% 0000008A:&GrHLine+0x05FD
 13.03% 00002946:&GrHLine
  0.11% 0000005A:&GrPeek
  0.12% 00000063:&GrPeek0
  0.10% 00000055:[C:/Adam/Gr/GrScreen.CPP.Z,750] &DCBlotColor8+0x0037
  0.09% 00000049:[C:/Adam/Gr/GrScreen.CPP.Z,750] &DCBlotColor8+0x003C
  0.10% 00000055:[C:/Adam/Gr/GrScreen.CPP.Z,755] &DCBlotColor8+0x0054
  0.30% 000000FB:&DCBlotColor8
  0.80% 0000028A:[C:/Adam/Gr/GrAsm.CPP.Z,760] &GrUpdateLine32+0x0027
  0.12% 00000068:[C:/Adam/Gr/GrAsm.CPP.Z,760] &GrUpdateLine32+0x002B
  0.19% 0000009B:[C:/Adam/Gr/GrAsm.CPP.Z,760] &GrUpdateLine32+0x002E
 11.49% 00002465:[C:/Adam/Gr/GrAsm.CPP.Z,760] &GrUpdateLine32+0x0040
  0.15% 0000007D:[C:/Adam/Gr/GrAsm.CPP.Z,760] &GrUpdateLine32+0x0044
 13.12% 0000298A:&GrUpdateLine32
  0.10% 00000055:[C:/Adam/Gr/GrAsm.CPP.Z,762] &GrUpdateLine32FlushCache+0x003C
  0.11% 0000005E:&GrUpdateLine32FlushCache
  0.11% 00000061:&DCBlotColor4
  0.08% 00000047:[C:/Adam/Gr/MathGr.CPP.Z,237] &GrRot+0x0004
  0.71% 00000242:&GrRot
  0.07% 0000003E:&GrUpdateVGAGraphics
Total Time:   80.956136s
81.115115s ans0=0x00000090=144
D:/Accts/TS/TAD>

------------------------------------------

----09/13/13 12:26:58----

I toyed with the idea of "No 3rd Party Software" when I was focused on 
programming as entertainment.  I'm not going to be that draconian.  Generally 
speaking, though, the vision of a modern C64, stands, and that did not have
an 
ever-growing set of libraries -- you had just the C64 ROM to build on.  It 
will fit in about 6 Meg or less without the Dictionary, so I really don't
care 
if people ship the whole thing with their applications and make them 
future-proof.  That's not very appealing.

It really doesn't make sense to make professional software for this platform, 
except it's way more pleasant for the software companies!  Just continue with 
Linux or Windows software, mostly, and everybody who wants Heaven, can do 
native stuff.

I don't have changes in mind, but I will probably break compatibility.  It's
a 
nuissance to keep your own code up-to-date, but how lovely it is!

----09/13/13 12:27:01----

Someone talked about palettes.  I avoid that, being slightly paranoid VGA 
palettes are not universal.  That's probably absurd, but how can I know?  I 
put palette support in there, but feel weird using it.

------------------------------------------

----09/13/13 14:39:57----

Here's a task record with [C:/Adam/Dbg2a.CPP.Z,134] ClassRep():

D:/Accts/TS/TAD>ClassRep(Fs,,1);
Class:"CTask"
7FD8A428 +] addr
  7FD8A430 task_signature      :536B7354 
7FD8A434 task_in_que_signatur:516B7354 
7FD8A438 task_flags          :0000000000009904 
7FD8A440 locked_flags        :0000000000000000 
7FD8A448 display_flags       :00000003 
7FD8A44C win_inhibit         :00000000 
7FD8A450 wake_jiffy          :0000000000000000 
7FD8A458 +] code_heap
  7FD8A460 +] data_heap
  7FD8A468 +] put_doc
  7FD8A470 +] display_doc
  7FD8A478 +] border_doc
  7FD8A480 win_left            :0000000000000001 
7FD8A488 win_right           :000000000000004E 
7FD8A490 win_top             :000000000000000D 
7FD8A498 win_bottom          :000000000000003A 
7FD8A4A0 +] cur_prt
  7FD8A4A8 cur_dir             :                  /Accts/TS/TAD

7FD8A4B0 +] parent_task
  7FD8A4B8 +] next_task
  7FD8A4C0 +] last_task
  7FD8A4C8 +] next_input_filter_task
  7FD8A4D0 +] last_input_filter_task
  7FD8A4D8 +] next_sibling_task
  7FD8A4E0 +] last_sibling_task
  7FD8A4E8 +] next_child_task
  7FD8A4F0 +] last_child_task
  7FD8A4F8 win_width           :000000000000004E 
7FD8A500 win_height          :000000000000002E 
7FD8A508 pix_left      :0000000000000008 
7FD8A510 pix_right     :0000000000000277 
7FD8A518 pix_width     :0000000000000270 
7FD8A520 pix_top       :0000000000000068 
7FD8A528 pix_bottom    :00000000000001D7 
7FD8A530 pix_height    :0000000000000170 
7FD8A538 border_pix_lef:0000000000000000 
7FD8A540 border_pix_rig:000000000000027F 
7FD8A548 border_pix_top:0000000000000060 
7FD8A550 border_pix_bot:00000000000001DF 
7FD8A558 scroll_x        :0000000000000000 
7FD8A560 scroll_y        :0000000000000000 
7FD8A568 scroll_z        :0000000000000000 
7FD8A570 win_max_refresh     :              60 
7FD8A578 +] snap
  7FD8A5A8 rip                 :000000000000C3C9 
7FD8A5B0 rflags              :0000000000000246 
7FD8A5B8 rsp                 :0000000198874D70 
7FD8A5C0 rsi                 :000000019887EC78 
7FD8A5C8 rax                 :0000000000000001 
7FD8A5D0 rcx                 :000000007FD8A438 
7FD8A5D8 rdx                 :0000000198888428 
7FD8A5E0 rbx                 :0000000000000000 
7FD8A5E8 rbp                 :0000000198874DB0 
7FD8A5F0 rdi                 :0000000198823428 
7FD8A5F8 r8                  :000000016BAB0140 
7FD8A600 r9                  :0000000198874CE0 
7FD8A608 r10                 :000000019944B300 
7FD8A610 r11                 :000000019887EC78 
7FD8A618 r12                 :0000000000000032 
7FD8A620 r13                 :0000000000000004 
7FD8A628 r14                 :000000016BAB72D8 
7FD8A630 r15                 :000000016BAB72E0 
7FD8A638 +] gs
  7FD8A640 +] fpu_mmx
  7FD8A648 time_slice_start    :0000042B4D39B5DC 
7FD8A650 total_time          :00000000010C4A06 
7FD8A658 swap_cnter          :000000000000042F 
7FD8A660 draw_it             :0000000000000000
7FD8A668 task_title          :               ClassRep(Fs,,1);

43 6C 61 73 73 52 65 70 28 22 43 54 61 73 6B 22 2C 46 73 2C 31 29 3B 3B 0A 00 
2A 00 00 00 00 00 ...
7FD8A6E8 task_name           :                            Unnamed Task
55 6E 6E 61 6D 65 64 20 54 61 73 6B 00 00 00 00 C8 00 00 00 6A 00 E8 25 ED FF 
FF 6A 00 E8 06 16 
7FD8A708 wallpaper_data      :                                        
00 D6 05 00 00 00 00 00 20 46 05 00 00 00 00 00 20 20 20 20 20 26 47 65 74 4B 
65 79 2B 30 78 30 ...
7FD8A788 title_src           :
04 
7FD8A789 text_attr           :+-
F1 
7FD8A78A border_attr         :+-
F1 
7FD8A78B border_src          :
01 
7FD8A78C win_z_num           :0004 
7FD8A78E pad                 :0000 
7FD8A790 +] stk
  7FD8A798 +] next_except
  7FD8A7A0 +] last_except
  7FD8A7A8 except_rbp          :0000000000000000 
7FD8A7B0 except_argc         :0000000000000000 
7FD8A7B8 except_argv         :0000000000000000
7FD8A7C0 catch_except        :
00 
7FD8A7C1 pad                 :
00 
7FD8A7C2 answers_displayed   :0001 
7FD8A7C4 answer_types        :                                        
00 00 00 00 
7FD8A7C8 answers             :0000000000000000 0000000000000000 
0000000000000000 0000000000000000 
7FD8A7E8 answer_times        :0.000000000000e0 0.000000000000e0 
0.000000000000e0 0.000000000000e0 
7FD8A808 bpt_lst             :0000000000000000
7FD8A810 -] next_ctrl
  7FD8A818 -] last_ctrl
  7FD8A820 -] cur_menu
  7FD8A828 next_settings       :0000000000000000
7FD8A830 -] next_ode
  7FD8A838 -] last_ode
  7FD8A840 last_ode_time       :0.000000000000e0 
7FD8A848 +] hash_table
  7FD8A850 +] srv_ctrl
  7FD8A878 +] next_lex
  7FD8A880 +] last_lex
  7FD8A888 win_old_left        :0000000000000001 
7FD8A890 win_old_right       :000000000000004E 
7FD8A898 win_old_top         :000000000000000D 
7FD8A8A0 win_old_bottom      :000000000000003A 
7FD8A8A8 task_end_cb         :0000000000000000
7FD8A8B0 song_task           :0000000000000000
7FD8A8B8 animate_task        :0000000000000000
7FD8A8C0 rnd_seed            :0000000000000000 
7FD8A8C8 task_num            :000000000000001E 
7FD8A8D0 user_num            :0000000000000003 
7FD8A8D8 fault_num           :0000000000000000 
7FD8A8E0 fault_err_code      :0000000000000000 
7FD8A8E8 dbg_task            :0000000000000000
7FD8A8F0 popup_task          :0000000000000000
7FD8A8F8 +] horz_scroll
  7FD8A918 +] vert_scroll
  7FD8A938 user_data0          :0000000000000000 
7FD8A940 user_data1          :0000000000000000 
7FD8A948 user_data2          :0000000000000000 
7FD8A950 user_data3          :0000000000000000 
7FD8A958 pad                 :

0.002664s ans0=0x00000000=0
D:/Accts/TS/TAD>

------------------------------------------

----09/13/13 14:59:35----

God says...
cupidity hereon Ghost discussed dissipation dangers severely beneath whit AD 
judge Deity subtile knocketh acceptably preventedst stored must dispensest 
compare create base cherished dotages graceful possesses gloried third dug 
Epicurus Blessed expects mount Jacob feeding unsought clay subject createth 
commandments unbelievers esteeming rush Alas Julian borrow sorrow obtained
You 
His Priest angels deaf dining as mysteriously liveth adorning meditations 
killeth accompany neighbours ascended mass blush difficulties 

----09/13/13 15:35:51----

Someone at WWW.OSDEV.ORG is pretending not to understand that it is 
ring-0-only by choice.  Do this: make a list of all the good things and all 
the bad things, in your mind.  You are either dishonest or the biggest retard 
ever.  "A motorcycle should have side airbags."


----09/13/13 16:06:30----

These are all the symbols that come with it.  They are loaded into the Adam 
task's hash table and all sons of Adam inherit them, without need for 
including headers:

Source Code By Sym

----09/13/13 16:55:41----

I did not follow a single standard.  My compiler has an interrupt keyword to 
be used on functions.  I use the arg-pop variant of RET.

My compiler does not make an AST, it makes a stack machine byte-code that it 
optimizes and makes machine code JIT or AOT, in 22,000 lines of code.  Yer 
going to get yourself humiliated if you accuse me of plagarism.  You're so, 
stupid, you think ring-0-only identity-mapped is somehow a linux rip-off.

----09/13/13 17:08:06----

Linux is inspired by 1970's mainframes.  They are set-up for multi-user with
2 
meg shared by 100 users.  They put things in pipes, doing a little at a time, 
and they have virtual memory.  They have a language good for admins.

TempleOS is inspired by a C64.  It is to be used for the same sorts of
things, 
but it is modern.  It loads and processes whole files.  Actual disk virtual 
memory, by the way, is really retarded these days because if it ever actually 
does swap, it's unacceptablly slow!  All vestiges of virual memory should be 
purged from all operating systems.

Linux will let you play two video games at once.  TempleOS doesn't see that
as 
important.  Sharing-locks?  Don't be a retard.

C/C++ translation is very close to direct-to-assembly instructions.  GCC 
wastes compiler time on optimizations in case you give it dumb C/C++ code to 
compile because they are arrogant fools and suffer from piling ever-more-shit 
into it, like Intel and like Microsoft.

Linux and Windows do SMP.  That is not good for real-time flight simulators 
without GPU.  TempleOS does master/slave.  All applications run on core 0 and 
simply control, explicity and specifically, each of the other cores.  The 
scheduler never moves tasks between cores.  Theirs runs two applications 
faster; TempleOS runs one application faster.  In TempleOS, all tasks on all 
cores have the same address map -- all tasks can access all memory at all 
times because it's always identity-mapped with not ring protections.

Because it is ring-0-only and never changes address maps, it can do a blazing 
4,000,000 task changes in one second per core.  This is how I do multicored 
locks for I/O.

while (LBts(&my_lock_var,0))
  Yield;

...

LBtr(&my_lock_var,0);

lock-bit-test-and-set is an atomic, x86, multicore-safe-locked instruction.

This is how I poll disk drives:

while (!InU8(STATUS))
  Yield;

That's known as cooperative multitasking.  I have preemption.

----09/13/13 18:55:56----

A really stupid person will argue with the answer book in school over and 
over.  The people at WWW.OSDEV.ORG have argued for ten years, as though, my 
operating system is so flawed it doesn't boot.  I guess they think I do 
photoshop videos?  And, I am doing a grand deception... for some reason?

I identity-map so that virtual and physical addresses are the same.  The BIOS 
physical address map is my virtual memory map.  Mine is ring-0-only, so there 
is no kernel/user split.

Therefore, I don't have any upper FFFFFFFF70000000- addresses.  I enjoy 
mocking them so much, I'm reluctant to explain why a RING-0-ONLY 
IDENTITY-MAPPED operating system does not have high addresses.  I like just 
mocking them.

----09/13/13 20:34:40----

I identity-map 128 Gig of space with 2 Meg pages, not 4K pages.

[C:/Kernel/Mem1b.CPP.Z,1].

It only takes 128 Gig / 2 Meg * 8 bytes = 512K of page tables.  The first 2 
Meg is 4K pages so I can mark 0xA0000-0xB0000 as write-through.

Picking a very arbitrary and insignificant idea to discuss, in my judgement, 
it's better not to define labels for bits in the case of page tables.  Nobody 
needs to mess with page tables -- leave them identity-mapped.  If you do, raw 
numbers aren't that bad for page table bits.  Go write hymns and do first 
person shooters with multicore, not doing hardware (Yes, I concede that 
hardware would involve write-through memory page table bits, etc.)

I put links in source code and links to local PDF would be really neat, avoid 
the need to document.  I would like to convert Intel PDF manuals to plain 
text, but they look dreadful -- so bad they are too bad.

----09/13/13 20:42:41----

I wrote my own boot-loaders. [C:/Doc/Boot.TXT.Z,1]

My Kernel starts in real mode, calls BIOS to fetch info and change to VGA, 
then changes to long mode.  [C:/Kernel/KStart.CPP.Z,1].

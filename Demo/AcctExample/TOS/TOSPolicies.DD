                              TOS Staff Policies

* Motto: Run toward bugs, not away from bugs.

* Be Metallica.  Use short, sharp, powerful words, as though a song.

* Be careful /Demo/AcctExample doesn't get extra files.  When you run 
TOSRegen(), it will copy home files to /Demo/AcctExample.

* Be careful remote/Wb site doesn't get extra files.  If you delete or rename 
a file, also delete the remote/Wb file from the site.

+] PreRegen()
  
Linux: Export Bookmarks to ~/TAD/Home/Sup1/Sup1Blog/Bookmarks.html
Linux: >vm_in
Linux: VMware Machine: "TOS"
{
  TempleOS: >TOSPreRegen;
  TempleOS: Update Budget
}

+] NewRelease(Bool full=FALSE)
  
if (full)
  ]PreRegen()

Linux: VMware Machine:"TOS"
{
  TempleOS: >TOSRegen(full);
}
Linux: >vm_out

if (full) {
  Linux: Burn ~/TAD to memory stick.

  On other machine {
    Linux: Copy ~/TAD from memory stick.

    VMware: VMware NewMachine:"TOS", Install TempleOSStaff.ISO
    { //2048 Meg RAM or 57344 Meg RAM
      TempleOS: [C:/Adam/Opt/Utils/TOS.HC.Z,3] TOSStaffIns(); in VMware.
      TempleOS: >TOSRegen;
      TempleOS: >#include "::/Misc/OSTestSuite"
      TempleOS: >Del("~/Demo*");
    }

    Linux: >emu_staff_new
    Linux: >emu8core or >emu24core
    {
      TempleOS: [C:/Adam/Opt/Utils/TOS.HC.Z,3] TOSStaffIns(); in QEMU.
      TempleOS: >TOSRegen;
    }
  }
}

Linux: CrossFTP sync ~/TAD/Site1/Wb to remote/Wb

if (full) {
  FileZilla
    Upload ~/TAD/Site1/index.html to remote/index.html
    Upload ~/TAD/Site1/TempleOS.html to remote/TempleOS.html
}

In WebHost FileMgr {
  Del {
    remote/TempleOSCD.ISO
    remote/TempleOSSup1.ISO.C
    remote/TempleOSWeb.ISO.C
    remote/TempleOSUltra.ISO
  }
  Copy up one level to remote root {
    remote/Wb/TempleOSCD.ISO
    remote/Wb/TempleOSSup1.ISO.C
    remote/Wb/TempleOSWeb.ISO.C
    remote/Wb/TempleOSUltra.ISO
  }
}

+] NewVersion(Bool full=FALSE)
  
Increment minor version number.
  >[C:/Home/HomeWrappers.HC.Z,13] R("3.12","3.13","-i-l");  //Approve by hand.

Add version release notice in [C:/Doc/ChgLog.DD.Z,1].

]NewRelease(TRUE);

Submit to www.betanews.com.
Send email to MajorGeeks.
if (full) {
  Submit to www.upload.com.
  Upload to SourceForge.
}

+] NewYearlyVersion()
  
Increment major version number.
  >[C:/Home/HomeWrappers.HC.Z,13] R("3.13","4.00","-i-l");  //Approve by hand.

Add version release notice in [C:/Doc/ChgLog.DD.Z,1].

[C:/Adam/DevInfo.HC.Z,1] Update ::/Misc/PCIDevices.DD

Remove 6 months from bottom of [C:/Doc/ChgLog.DD.Z,1].

]NewVersion(TRUE);

* If you change the compiler language syntax, immediately make a 
]NewRelease(TRUE).


                           TOS Staff Indoctrination

Make a list of all the ways you make a project scalable.  With TempleOS, we 
scale down, not up, so do we do the opposite of all of them.

How would you improve this [C:/Kernel/Compress.HC.Z,1] LZW Compression?  We
have a 100,000 line of code 
limit, so it's a trick, thought provoking, question introducing you to our
way 
of thinking.

We hope to define objective metrics so we can simply ask the world to reduce 
the lines of code and be perfectly objective.

We hope for an objective metric for the compiler, such as how fast it
compiles 
itself (having been compiled by itself).  It's a little less elegant, but we 
actually compile kernel and compiler together all the time with
[C:/Demo/AcctExample/TOS/TOSDistro.HC.Z,1] TOSBootHDIns('
C').  We have the freedom to change the [C:/Doc/HolyC.DD.Z,1] HolyC language,
like how I made 
type-casting post-fix.  We need some more limitations on the problem because 
we don't want a ridiculous language.

Consider these games as the basis of the vector space we wish to span:

[C:/Demo/Games/BattleLines.HC.Z,1] /Demo/Games/BattleLines.HC
[C:/Demo/Games/BigGuns.HC.Z,1] /Demo/Games/BigGuns.HC
[C:/Demo/Games/BlackDiamond.HC.Z,1] /Demo/Games/BlackDiamond.HC
[C:/Demo/Games/BomberGolf.HC.Z,1] /Demo/Games/BomberGolf.HC
[C:/Demo/Games/CastleFrankenstein.HC.Z,1] /Demo/Games/CastleFrankenstein.HC
[C:/Demo/Games/CharDemo.HC.Z,1] /Demo/Games/CharDemo.HC
[C:/Demo/Games/CircleTrace.HC.Z,1] /Demo/Games/CircleTrace.HC
[C:/Demo/Games/Collision.HC.Z,1] /Demo/Games/Collision.HC
[C:/Demo/Games/Digits.HC.Z,1] /Demo/Games/Digits.HC
[C:/Demo/Games/DunGen.HC.Z,1] /Demo/Games/DunGen.HC
[C:/Demo/Games/ElephantWalk.HC.Z,1] /Demo/Games/ElephantWalk.HC
[C:/Demo/Games/FlapBat.HC.Z,1] /Demo/Games/FlapBat.HC
[C:/Demo/Games/FlatTops.HC.Z,1] /Demo/Games/FlatTops.HC
[C:/Demo/Games/Halogen.HC.Z,1] /Demo/Games/Halogen.HC
[C:/Demo/Games/MassSpring.HC.Z,1] /Demo/Games/MassSpring.HC
[C:/Demo/Games/Maze.HC.Z,1] /Demo/Games/Maze.HC
[C:/Demo/Games/RainDrops.HC.Z,1] /Demo/Games/RainDrops.HC
[C:/Demo/Games/RawHide.HC.Z,1] /Demo/Games/RawHide.HC
[C:/Demo/Games/Rocket.HC.Z,1] /Demo/Games/Rocket.HC
[C:/Demo/Games/RocketScience.HC.Z,1] /Demo/Games/RocketScience.HC
[C:/Demo/Games/Squirt.HC.Z,1] /Demo/Games/Squirt.HC
[C:/Demo/Games/Talons.HC.Z,1] /Demo/Games/Talons.HC
[C:/Demo/Games/TheDead.HC.Z,1] /Demo/Games/TheDead.HC
[C:/Demo/Games/TicTacToe.HC.Z,1] /Demo/Games/TicTacToe.HC
[C:/Demo/Games/TreeCheckers.HC.Z,1] /Demo/Games/TreeCheckers.HC
[C:/Demo/Games/Varoom.HC.Z,1] /Demo/Games/Varoom.HC
[C:/Demo/Games/Wenceslas.HC.Z,1] /Demo/Games/Wenceslas.HC
[C:/Demo/Games/Whap.HC.Z,1] /Demo/Games/Whap.HC
[C:/Demo/Games/Zing.HC.Z,1] /Demo/Games/Zing.HC
[C:/Demo/Games/ZoneOut.HC.Z,1] /Demo/Games/ZoneOut.HC

Unlike Linux and Windows, we do not want to handle all usage models.  On the 
contrary, we want to cherry-pick the hell out of our target usage so we 
maximize the elegance and simple beauty while delivering something good for 
Hymns.

If we can define the vector space we hope to span, precisely, then we can 
leave the operating system on autopilot for future generations.  They simply 
make the best possible solution to the vector space.

Knuth other literate coding homos are wrong -- if you have a well define way 
of doing things, it usually doesn't matter as long as it is consistent and 
easy to remember, so you don't vasillate.  Try to do things in the way the 
computer naturally wants to do them.  Don't be an arrogant French buffoon.  
Top-down is ridiculous because you have to make headers for every function.  
Bottom-up is how a computer wants to do it.  In the past, there was a 
big-endian/little-endian battle.  Little endian is obviously the way the 
computer naturally wants to operate.

Do not bloat a compiler with theoretical optimizations that bad programmers 
might require.  We would rather teach them.  As a matter of fact, there is a 
very straight forward way to convert the C language to machine code.

When I solicit line-of-code reducing optimizations, I plan to make it 100% 
objective, if possible, and chuckle at the fun, hard-to-understand hacks.

If you have ideas on how to make TempleOS more like Linux, I'm not
interested. 
 However, if you have ideas to make it more like the 8-bit computer
generation 
operating systems or like DOS, I am interested.  We want the creative spirit 
of the 8-bit generation of computers.


                               TOS Linux SetUp

My Linux home directory is	/home/tad
I place all my files in		/home/tad/TAD
I place my scripts in		/home/tad/TAD/Bin
/home/tad/TAD/Bin is in my path.
I place my icons in		/home/tad/TAD/Desktop
I copy D:/Home in and out of	/home/tad/TAD/Home

When I make a back-up, I copy	/home/tad/TAD to /home/tad/Archives/TAD170131

http://www.templeos.org		/home/tad/TAD/Site1
				/home/tad/TAD/Site1Stale

Every month, I transfer my blog directory from Site1 to Site1Stale and remove 
it from TempleOS.


* "Linux" is a trademark owned by Linus Torvalds.
* "Windows" is a trademark owned by MicroSoft Corp.

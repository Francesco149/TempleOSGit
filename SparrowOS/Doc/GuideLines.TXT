                                  ACCT FILES

You can add and remove accts by making or removing directories in the ::/Sparr
owOS/Accts directory.  An empty account directory should be valid because it 
will get default files from the parent directory.

See [HOME/PersonalMenu.TXT.Z,1] for a personal menu which can be viewed at
the cmd 
line with the <CTRL-M> key or by clicking "MENU" in the upper left border
area 
of a window.

See [HOME/PersonalNotes.TXT.Z,1] for a personal note file which can be viewed
with 
the <CTRL-SHIFT-M> key.

See [HOME/DoItOnce.CPP.Z,1] for a file which is invoked at the start-up of
the 
first user.

See [HOME/Adam3.CPP.Z,1] for the user files that get loaded into the adam
task at 
start-up.  These are only loaded once.

[HOME/Registry.CPP.Z,1] can be edited by hand or deleted to rst to defaults.  
Takes affect next boot.



                             APPLICATION POLICIES

* Place applications in their own /SparrowOS/Apps subdirectory.

* Make a file called Load.CPP.Z to load the application.

* Make a file called Run.CPP.Z to load and run the application, preferable by 
#includeing the Load.CPP.Z file.

* Place user data in a subdirectory of HOME, preferably naming the 
subdirectory the same as the /SparrowOS/Apps subdirectory.  Or, place data in 
the Registry.CPP.Z file.  See [::/SparrowOS/Demo/RegistryDemo.CPP.Z,1]
::/SparrowOS/Demo/RegistryDemo.CPP.Z.

* Make a file called Install.CPP.Z or Install.AUT.Z to create the HOME 
subdirectory and do similar stuff.

 

                          OS PROGRAMMING GUIDELINES:

* Virtual mem is not used (It is identity mapped in EM64T mode).  The stk
does 
not grow, so allocate enough when the task (process) is
[C:/SparrowOS/OSMain/Task1a.CPP.Z,203] Spawned and use the 
heap for most things.  (The "heap" refers to
[C:/SparrowOS/OSMain/Memory.CPP.Z,952] MAlloc() and
[C:/SparrowOS/OSMain/Memory.CPP.Z,946] Free().)

* See [::/SparrowOS/Doc/Glossary.TXT.Z,1] Naming convention.

* There are two modes of compiling [::/SparrowOS/Doc/Glossary.TXT.Z,1] Static
Compiled Mode and [::/SparrowOS/Doc/Glossary.TXT.Z,1] JIT Mode.  Actual 
compilation is done in both--nothing is "interpreted".

* [::/SparrowOS/Doc/Differences.TXT.Z,1] Differences from C/C++

* [::/SparrowOS/Doc/SysPgmGuide.TXT.Z,1] System Programming Guidelines

                               Hash sym tables:

* See [::/SparrowOS/Adam/Hash2a.CPP.Z,1] ::/SparrowOS/Adam/Hash2a.CPP.Z for
examples of how the hash tables are 
set-up.  Basically, syms are placed into hash tables and child process hash 
tables are chained to parents.  This provides scopes for vars and functions.

* adam_task->hash_table holds the C/C++ syms loaded in on start-up.

* Fs->hash_table holds user C+ syms and if a sym is not found, it checks 
parents.  When a duplicate sym is added to the table, it overshadows the 
previous sym unless you have done [C:/SparrowOS/Compiler/Directives.CPP.Z,6]
OptOn([C:/SparrowOS/OSMain/Adam1a.HPP.Z,1480] OPTf_REPLACE_SYMS).  When
developing 
software, typically you include the file at the cmd prompt, make changes and 
reinclude it.  Old syms are overshadowed but they are still there.  
Periodically, kill the TASK and start fresh when mem is low.  If you wish
your 
applications to free themselves instead of staying in mem, spawn or
[C:/SparrowOS/Adam/Doc/DocPopUp.CPP.Z,374] PopUp() a 
task to run the application and kill it when it's done.

* To display the contents of a hash table, use the
[C:/SparrowOS/Adam/Hash2a.CPP.Z,137] HashRep() routine or the 
varients.  [C:/SparrowOS/Adam/Hash2a.CPP.Z,426] HashDepthRep() gives a
histogram  of how long the chains are, in 
case you wish to make hash table sizes bigger.

                         Assembly Language Concerns:

* FS must always point to the [C:/SparrowOS/OSMain/Adam1a.HPP.Z,3151] CTask.

* GS must always point to the [C:/SparrowOS/OSMain/Adam1a.HPP.Z,3781] CCPU.

* Don't change the segment registers unless interrupts are off.

* When interacting with compiled code, preserve RBP, RSI, RDI, R10-R15
because 
the compiler uses these for register vars.  You are free to clobber RAX, RBX, 
RCX, RDX, R8 and R9.

* I recommend using the standard stk frame for functions because
[C:/SparrowOS/OSMain/Dbg1a.CPP.Z,50] Caller() is 
used to display the call stk, such as for the wallpaper.
	ENTER	nnnn
...
	LEAVE
	RET

* The args are removed from the stack with RET1 statements.

	RET1	16	//remove two args

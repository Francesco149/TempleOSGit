                                     TIPS

* Turn-off or reboot (<CTRL-ALT-DEL>) at any time, except during disk writes.
 
Writes are not cached. 

* 64-bit values are most efficient for the compiler.

* If you make changes to SparrowOS files in your HOME directory, generally
you 
reboot to make them take effect.  (You don't compile anything.)  You should 
have two SparrowOS partitions on your hard drive because a syntax error in a 
start-up file will make the partition unbootable.  Boot to the second 
partition or boot to a standard SparrowOS CD-ROM and use
[C:/SparrowOS/OSMain/Dsk/DskAddDev.CPP.Z,183] Mount() to mount your 
hard drive.

* I copy my files to a mirrored identical partition, periodically with 
[C:/SparrowOS/Adam/Dsk/Dsk2a.CPP.Z,149] CopyTree() commands in scripts.  I do
merge commands with a menu entry like 
this:
M(\"D:/SparrowOS/*\",\"E:/SparrowOS/*\",\"+r+d\"); to check my changes.

* <CTRL-M> at the cmd line to access your personal menu.  Place macros there 
with <CTRL-L>, or icon-like sprites with <CTRL-R>.  Use the Pop-Up option on 
macros to [C:/SparrowOS/OSMain/Task1a.CPP.Z,226] Spawn() a task to run a
file.  It dies when it is finished.  This 
returns mem to the system.  Be sure to press <CTRL-S> to save your macro/menu 
area after making changes.

* You can adjust the num of answers displayed by setting
Fs->answers_displayed 
to a num from 0-3 in your [C:/SparrowOS/Accts/TS/TAD/Adam3fSys.CPP.Z,1]
UserStartUp routine.

* You can use ans0,ans1, etc. in cmd line expressions.  They hold results
from 
the last cmd line operations.  You can use the cmd prompt as a calculator by 
just entering expressions like 1+2*3;.  F64 results can be accessed with
ansf0 
or ansf1.

* Use the PullDown menu at the top of the screen to learn commands, like for 
games.

* You can adjust the mouse movement rate by setting global vars in your 
start-up file.  See [HOME/Adam3aLocalize.CPP.Z,1] mouse scale.

* If your mouse wheel doesn't work, you might try an actual PS/2 mouse.  My 
new machine does not have PS/2 ports.

* You can set your local time zone by setting the
[C:/SparrowOS/OSMain/OSGlbls.CPP.Z,43] local_time_offset global var 
in a start-up file.  It's units are [C:/SparrowOS/OSMain/Adam1a.HPP.Z,490]
CDATE_FREQ.  See [HOME/Adam3aLocalize.CPP.Z,1] local time.

* Use [C:/SparrowOS/Adam/Doc/DocRecalc.CPP.Z,1745] DocCurAttr() in
[C:/SparrowOS/Accts/TS/TAD/Adam3fSys.CPP.Z,1] UserStartUp() to set terminal
window colors.

* See Key Map
`KeyMap;View;
`
 for a list of defined keys.  Define your own keys in
[C:/SparrowOS/Accts/TS/TAD/Adam3dKeyPlugIns.CPP.Z,53] MyPutKey(). 
 See [::/SparrowOS/Doc/KeyBoard.TXT.Z,1] ::/SparrowOS/Doc/KeyBoard.TXT.Z.

* <CTRL-SHIFT-L> in the editor to autoindent a C+ function or renumber an asm 
routine's local labels.  If it does not have #exe config stuff, select 
"recompile."  Otherwise, don't recompile and it will use the compiler info 
collected when it was most recently compiled.  **<CTRL-SHIFT-L> can be used
to 
test if a file will compile.**

* While developing applications, keeping everything in one source file allows 
you to use the <CTRL-SHIFT-L> compile check/autoindent feature.  
Alternatively, you can #include the files in a project a file depends on 
before entering the editor and <CTRL-SHIFT-L> it.

* You can use filter_lines in the editor text search form (<CTRL-F>) to 
temporarily display just lines near each match.  A value of filter lines set 
to 5 will display lines within 5 lines of matches.  Then, you can do another 
find to a different string and achieve a AND search.  When finished, press <ES
C>.
 
* You can recompile and reinstall the kernel with
[C:/SparrowOS/Adam/Boot/InsBoot.CPP.Z,165] InstallBoot().  You'll 
probably want to make a function for recompiling that uses the
[C:/SparrowOS/OSMain/TaskCmd.CPP.Z,354] Auto() function 
to answer the cfg questions.  See my technique
[::/SparrowOS/Demo/AcctExample/TSAdam.CPP.Z,1] Cfg Strs
[::/SparrowOS/Demo/AcctExample/TSDistribute.CPP.Z,1] Update Funs.

* You can disable WORDSTAT commenting-out [HOME/Adam3fSys.CPP.Z,1] WSInit()
in [HOME/Adam3fSys.CPP.Z,1] HOME/Adam3fSys.CPP.Z.

* You can rst MultiCore CPU's if they get hung with
[C:/SparrowOS/OSMain/MultiProc.CPP.Z,395] MPStart().  HD Audio will 
get screwed-up, however.

* Boolean expressions **not** in if statements don't have short circuit logic
and 
are compiled inefficiently.

* You can use [C:/SparrowOS/OSMain/Adam1b.HPP.Z,43]
progress1-[C:/SparrowOS/OSMain/Adam1b.HPP.Z,52] progress4 in your programs
for whatever you like.  
They're just global vars that are shown on the wallpaper.  The original
intent 
was to indicate how far along operations were.  There's no coordination, so 
different apps might interfere.  I use them most for debugging--just values 
easily viewed.  See [::/SparrowOS/Demo/Progress.CPP.Z,1]
::/SparrowOS/Demo/Progress.CPP.Z.

* You can save the cmd line doc as text with <CTRL-A>.  For a bitmap screen 
capture, use [C:/SparrowOS/Adam/FileBMP.CPP.Z,205] BMPFileCaptureScreen(). 
You might want to make a hot key.  See 
[::/SparrowOS/Demo/AcctExample/TSAdam.CPP.Z,1] BMPFileCaptureScreen.

* Use [C:/SparrowOS/Adam/Doc/DocNew.CPP.Z,698] DocMax() to adjust the size of
the cmd line buf.  It counts [C:/SparrowOS/OSMain/Adam1a.HPP.Z,1396] CDoc 
entries, not lines.

* Many data structures have a user_data member.  Those are available for you 
to store a data item, for convenience. 
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,2864] CTask,
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,1219] CDocEntry and
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,2331] CDirEntry have 
them.  You shouldn't encounter conflicts with SparrowOS using them.

* You can reduce mem usage by making a smaller disk cache when you recompile 
the kernel; disabling WORDSTAT; Specifying smaller stk sizes when doing
[C:/SparrowOS/OSMain/Task1a.CPP.Z,226] Spawn(
), changing [C:/SparrowOS/OSMain/Adam1a.HPP.Z,2585] DFT_STK, and using
[C:/SparrowOS/Adam/Doc/DocNew.CPP.Z,698] DocMax() to reduce the cmd line
buffer size.

* Filenames ending in ".Z" will be automatically compressed and uncompressed 
when read or written.  The compression method is not supported by other 
operating systems.  You can store files uncompressed by
[C:/SparrowOS/Adam/Dsk/Dsk2a.CPP.Z,120] Move()ing them to a 
filename not ending in ".Z".  See [::/SparrowOS/Doc/TSZ.TXT.Z,1]
::/SparrowOS/Doc/TSZ.TXT.Z if you want to 
uncompress while in WINDOWS.

* [C:/SparrowOS/Adam/Merge.CPP.Z,41] MergeChk() can be used to see what's
changed.  The +d flag will show 
differences of files which have changed and allow you to merge code.  (The +r 
flag will recurse.)

* There is a utility [C:/SparrowOS/Adam/LinkChk.CPP.Z,70] LinkChk() which
will check for broken links in 
documentation.

* You can use [C:/SparrowOS/Compiler/Directives.CPP.Z,6]
OptOn([C:/SparrowOS/OSMain/Adam1a.HPP.Z,1468] OPTf_WARN_PAREN) to find
unnecessary parentheses in code.

* You can use [C:/SparrowOS/Compiler/Directives.CPP.Z,6]
OptOn([C:/SparrowOS/OSMain/Adam1a.HPP.Z,1469] OPTf_WARN_DUP_TYPES) to find
unnecessary local var type 
statements.

* [C:/SparrowOS/Compiler/Directives.CPP.Z,1]
OptEqu([C:/SparrowOS/OSMain/Adam1a.HPP.Z,1462] OPTf_ECHO,ON) can be placed in
[::/SparrowOS/OSMain/Adam1.CPP.Z,1] Adam1.CPP.Z to echo start-up scripts.

* Use [C:/SparrowOS/Adam/Doc/DocMain.CPP.Z,50] Plain() to edit a plain text
file.  You'll need this if your file has $'
s.  Use the [::/SparrowOS/Misc/Dollar.CPP.Z,1] ::/SparrowOS/Misc/Dollar.CPP.Z
utility to strip dollar signs in 
text files.

* Use [C:/SparrowOS/OSMain/Misc1a.CPP.Z,273] Silent() to disable screen text
output.

* Use [C:/SparrowOS/OSMain/Misc1a.CPP.Z,282] IOSnd() to disable noise from
disk access.

* Grab-scroll any window at any time with {CTRL-LEFT-DRAG}.  Null 
grab-scrolling with {CTRL-RIGHT}.

* Use <CTRL-ALT-Z> to zoom-in and <CTRL-ALT-SHIFT-Z> to zoom-out.  You can 
scroll by moving to the edge of the window.  Set
[C:/SparrowOS/Adam/Gr/GrScreen.CPP.Z,252] gr_continuous_scroll to TRUE 
if you want. 

* Use <CTRL-ALT-G> and <CTRL-ALT-SHIFT-G> to display a grid on the screen.

* Use <CTRL-ALT-A> to enter an extended ASCII char.

* There are handy functions--F(),R(),FD() and RD() which are defined in 
[HOME/Adam3eWrappers.CPP.Z,1] HOME/Adam3eWrappers.CPP.Z.  You're encouraged
to change them, since they're in 
acct files.  They will perform find-and-replace operations accross multiple 
files.  The +l flag is particularly useful since it limits to whole labels.  
The +lf and +lb flags limit to whole labels, just front or back.  You are 
encouraged to add or modify handy wrapper functions to make cmd line 
operations easier.

* When using [C:/SparrowOS/Adam/Grep.CPP.Z,165] Grep() while modifying code,
work from the bottom-up so that line 
numbers are correct.  If you work top-down, then inserting or deleting lines 
causes the lower file links will be incorrect.

* You can save files after making changes, anytime you are within the editor, 
like when viewing help/macro files.  <CTRL-A> saves as, <CTRL-S> saves with 
the same name in the scrolling title bar.  Hitting <ESC> will exit and save.  
(<SHIFT-ESC> will abort).  You can save the cmd line window to a file, too, 
since you're actually in the editor when you're at the cmd line.

* When using <CTRL-L> to insert links in documents, you can usually leave the 
Tag Text blank and it will be filled-in automatically based on other entries.

* There is a feature of the precompiler that allows code to be executed in
the 
middle of compilation and data inserted into the compilation stream.  Click 
here for an example: [::/SparrowOS/OSMain/OSEnd.CPP.Z,1] #exe {.

* If you output to the cmd line and wish to allow users to scroll around and 
view data, you can use [C:/SparrowOS/Adam/Doc/DocPopUp.CPP.Z,176] View().

* Use [C:/SparrowOS/Adam/Doc/DocPopUp.CPP.Z,176] View() in Pop-up macros to
linger until the user presses <ESC> or <SHIFT
-ESC>.

* You can access the word under the cursor at
[C:/SparrowOS/Adam/WordStat/WordStat.CPP.Z,36] ws_cur_word, but you should 
probably turn-off preemption or interrupts momentarily to copy it.

* You can reactivate WORDSTAT after closing it by pressing CTRL-FUN KEY.

* If you use consistent var names for items of different classes, you'll 
usually be able to use WORDSTAT's autocomplete for member vars.  I always use 
lx for [C:/SparrowOS/OSMain/Adam1a.HPP.Z,2012] CLex ptrs; doc for
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,1396] CDoc ptrs; doc_e or doc_ce for
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,1219] CDocEntry ptrs, etc.


* [C:/SparrowOS/OSMain/Adam1b.HPP.Z,94] Preempt() is used to keep a task from
being interrupted and swapped-out.  It 
has a similar effect to turning-off interrupts.  Each task has it's own 
preemption ctrl.  A task with preemption turned-off can voluntarily
[C:/SparrowOS/OSMain/Scheduler.CPP.Z,371] Yield() 
with preemption off.

* You can set a color for different drives with
[C:/SparrowOS/Adam/Dsk/Dsk2a.CPP.Z,314] SetDrvTextAttr().  Place calls 
to this in [HOME/Adam3aLocalize.CPP.Z,1] HOME/Adam3aLocalize.CPP.Z.

* <CTRL-SHIFT-T> to toggle to/from plain text just the
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,1396] CDoc cmd under the 
cursor.  See [::/SparrowOS/Demo/Doc/TextDemo.CPP.Z,1]
::/SparrowOS/Demo/Doc/TextDemo.CPP.Z.
 
* If you toggle to plain text when you are working with graphics in a 
document, you can add duplicate entries for sprites by entering a SP cmd with 
the same num.

* If you toggle to plain text when working with graphics, you can add a str
to 
the $SP$ entry to keep track of it.  Try $SP,"<2>",2$ where '2' is the sprite 
num.

* I use spaces-to-tab operations on all my src files to keep them small.  You 
have to be careful, though, because spaces in strings will be converted.  I 
use <SHIFT-SPACE> ' ' in such cases.  See [C:/SparrowOS/Adam/S2T.CPP.Z,61]
S2T() for spaces-to-tabs.

* You can edit an existing sprite by putting the cursor on it and pressing <CT
RL-R>.

* When editing a sprite, you can cut and paste the elements in the text list 
window.

* I recommend keeping CSprite in vect format until you are done creating
them, 
so you can edit the ctrl points.  Then, convert them to bitmaps, so the flood 
fills work well.  If you are doing interpolation, however, they must be vect.

* [C:/SparrowOS/Adam/Gr/GrPrimatives.CPP.Z,236] GrFloodFill() is slow. 
[C:/SparrowOS/Adam/Gr/GrBitMap.CPP.Z,860] GrRect() is fast.

* You can customize the wallpaper.  See 
[::/SparrowOS/Demo/Graphics/MyWallPaper.CPP.Z,1]
::/SparrowOS/Demo/Graphics/MyWallPaper.CPP.Z.

* You can adjust the screen refresh rate (software).  It is automatically 
adjusted based on load.  The range is [C:/SparrowOS/Adam/Window.CPP.Z,19]
win_min_refresh - Fs->win_max_refresh.

* Your RAM disks will not be reformated when you reboot if the memory
location 
has not changed and it finds the disk intacted.

* try{} catch{} in a function will cause all vars to be non-register.

* Using a sub-int array, i.u8[3], for example, will force a var non-register.

* You can delete the HOME/Registry.CPP.Z file.  The policy is that deleting
it 
will restore defaults.  It should plain text, if you want to edit it.  Be 
careful of tree indentations.

* Study [::/SparrowOS/Adam/MemRep.CPP.Z,1] ::/SparrowOS/Adam/MemRep.CPP.Z and
[C:/SparrowOS/Adam/WallPaper.CPP.Z,19] WallPaper() to learn how the system 
resources are put together.

* The editor's select-text mechanism allows for disjoint portions of selected 
text.  This is a feature, not a bug -- you can cut-and-paste disjoint text.

* [C:/SparrowOS/OSMain/OSGlbls.CPP.Z,46] time_stamp_freq is continuously
calibrated, so be careful because 
expressions involving it might decrease.  Take a snap-shot, like this: timeout
=[C:/SparrowOS/OSMain/Adam1b.HPP.Z,198]
GetTimeStamp+[C:/SparrowOS/OSMain/OSGlbls.CPP.Z,46] time_stamp_freq x
seconds; and compare against [C:/SparrowOS/OSMain/Adam1b.HPP.Z,198]
GetTimeStamp().

* Use [C:/SparrowOS/Adam/HeapLog.CPP.Z,121] HeapLog() and
[C:/SparrowOS/Adam/HeapLog.CPP.Z,80] HeapLogRep() to find leaks.  Don't be
confused by [C:/SparrowOS/OSMain/Adam1a.HPP.Z,1396] CDoc 
allocations.  Those are generated when text is written to the cmd line buffer.

* For advanced heap debugging, play with
[C:/SparrowOS/OSMain/Adam1a.HPP.Z,2536] _CFG_HEAP_DBG.  You're on your own.

* You can use [C:/SparrowOS/Adam/Doc/DocFile.CPP.Z,430] Type() to display
.BMP or .GRA files.

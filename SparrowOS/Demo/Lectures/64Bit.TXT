                             64-Bit Assembly Quiz

1) In 64-bit mode, how many bytes are always pushed?

	PUSH	12
	PUSH	EAX

2) How are these instructions different.  Which one is better?

	PUSH	RAX
	PUSH	EAX

3) What happens to the upper 32-bits?

	XOR	EAX,EAX
	MOV	EAX,0x12345678
	MOV	EAX,0x80000000

4) How do you set FS or GS values?

5) If FS points to current task record, what's wrong with this instruction?

	MOV	RAX,U64 FS:[TSS_SOME_MEMBER]

6) Which instruction takes more bytes?

	MOV	RAX,U64 [R8]
	MOV	RAX,U64 [R13]

7) Are these the same number of bytes?

	MOV	RAX,1234
	MOV	R8,1234
	MOV	EAX,1234

8) True or False

  a) You can access the lowest byte of RAX.

  b) You can access the lowest byte of ESI.

  c) You can access the second-to-lowest byte of RAX.

  d) You can access the second-to-lowest byte of ESI.

9) How do you call a subroutine at 0x10,0000,0000 from code at 0x00,0010,0000?

10) How much faster is a REL32 call instruction compared to a software 
interrupt or SYSCALL?

11) How long does an IN or OUT instruction take on a 1GHz machine and on a 
3GHz machine?

12) How do you push all 16 registers?

13) Should you put the registers in a TSS?

14) You can have 4K or 4Meg pages in 32-bit mode.  You can have 4K or what 
size pages in 64-bit mode?

15) On a fresh CPU with an empty TLB, how many memory accesses (page tables) 
does it take to access one virtual address?

----

SparrowOS identity-maps everything, all the time, so the usual convention of 
upper memory being for kernel does not apply.  It uses physical addresses, 
basically.  It puts all code in the lowest 2-Gig memory range so that it can 
use the CALL REL32 instruction, the fastest.  It never changes privilege 
levels or messes with page tables, once it is up-and-running.

                             Welcome to TempleOS

[C:/Doc/TrivialSolutions.TXT.Z,1] Trivial Solutions's TempleOS is a x86_64,
multi-cored, multi-tasking, 
ring-0-only, single-address_mapped (identity), operating system for 
recreational programming:

  * Professionals doing hobby projects
* Teenagers doing projects
* Non-professional, older-persons projects

Simplicity is a goal to [C:/Doc/Strategy.TXT.Z,1] keep the line count down,
so it's easy to tinker with. 
 As it turns-out, simplicity makes it faster in some ways, too.  It never 
switches privilege levels, never changes address maps, tends to load whole 
contiguous files and other, similar things which boost speed.  It's only 
121,463 lines of code including the kernel, the 64-bit compiler, the graphics 
library and all the tools.  More importantly, it's designed to keep the
user's 
line count down -- you can do a "hello world" application in one line of code 
and can put graphics on the screen with a three line program!

It's a kayak, not a Titanic -- it will crash if you do something wrong.  You 
quickly reboot, however.  DOS and the 8-bit home computers of the 80's worked 
fine without memory protection and most computers in the world -- the
embedded 
ones -- operate without protection.  The resulting simplicity of no 
protections is why TempleOS has value.  In facts, that's the point of 
TempleOS.  See the [C:/Doc/Charter.TXT.Z,1] TempleOS Charter.

Conventional thinking is "failure is not an option" for general purpose 
operating systems.  Since this OS is used in addition to Windows or Linux, 
however, failure is an option -- just use Windows if you can't do something.

Two things to know about TempleOS are that _tasks_ have
[C:/Kernel/Mem1b.CPP.Z,373] MAlloc/[C:/Kernel/Mem1b.CPP.Z,369] Free heap
memory, 
not applications, and tasks have compiler symbol tables that persist at a 
scope like environment variables in other operating systems, and the symbols 
can include functions.

In other operating systems, I hated learning one language for command line 
scripts and another for programming.  With TempleOS, the command line feeds 
right into the [C:/Doc/HolyC.TXT.Z,1] HolyC compiler, line by line, and it
places code into memory it 
[C:/Kernel/Mem1b.CPP.Z,373] MAlloc()s.  The compiler is paused at the command
line, waiting for input.  
Naturally, you #include a program to load it into memory and, usually, start 
it.  During the boot process, many files get [C:/Kernel/Adam1.CPP.Z,1]
compiled before you have access 
to the command line.  (Don't worry, booting takes only a couple of seconds.)  
All the header declarations for the operating system are compiled and are 
available for use in your programs without needing to #include them.  
Everything is truly compiled to native x86_64 machine code, nothing is interpr
eted and there is no byte code.

Statements at the global scope -- outside the scope of functions -- execute 
immediately.  There is no main() function.  Instead, you give meaningful
names 
to what would be main() functions and you invoke them by calling them with a 
statement in the global scope, usually at the bottom of your file.

I started with C syntax, but didn't like the command line for a directory 
listing looking like this:

>Dir("*.*",FALSE);

So, I added default args from C++ and it looked like this:

>Dir();

I didn't like that, so I made parentheses optional on calls with no args and 
it, now, looks like this:

>Dir;

The syntax change created an ambiguity when specifying function addresses. 
To 
resolve it, I  made a '&' required in front of function names when specifying 
an address of a function, which is better anyway.

Once I was no longer using standard C/C++ syntax, I decided to change 
everything I didn't like and call it [C:/Doc/HolyC.TXT.Z,1] HolyC.  Here are
the new 
[C:/Doc/HolyC.TXT.Z,1] operator precedence rules.  It's Biblical!  See
[C:/Misc/Bible.TXT.Z,81941] Luke,5:37.

There are no object files in TempleOS and, normally, you don't make
executable 
files either, but you can.  That's known as "Ahead-Of-Time" compilation.  
Instead, you "Just-In-Time" compile.

Tasks have no priority and are never removed from the queue.  Instead, they 
often poll whatever they are waiting on and swap-out.  (Swapping tasks takes 
half a microsecond and does not involve disk activity or memory maps.)  See 
[C:/Kernel/Sched.CPP.Z,1] Scheduler.  Polling keeps it simple.  It's might be
a problem if you had lots 
of tasks busy, which rarely happens on a home computer.  The order of the 
tasks in the queue determines front-to-back window order.  See 
[C:/Doc/MultiTasking.TXT.Z,1] TempleOS MultiTasking.

The FAT32 filesystem is supported to makes exchanging files with a dual
booted 
other operating system easy and there is the simple, 64-bit TempleOS
[C:/Doc/RedSea.TXT.Z,1] RedSea 
filesystem.  The [C:/Doc/RedSea.TXT.Z,1] RedSea has allocation bitmap for
clusters and all files are 
stored contiguously.  You can't grow files.

TempleOS is geared toward reading and writing whole files.  Since whole files 
are processed, compression is possible.  Filenames ending in ".Z" are 
automatically compressed or uncompressed when stored and fetched.  TempleOS 
does support direct block random access into files, however --
[C:/Kernel/Dsk/DskCFile.CPP.Z,129] FRBlks() and 
[C:/Kernel/Dsk/DskCFile.CPP.Z,181] FWBlks().

If a file is not found, ".Z" is added or removed and a search is done, again.
 
There is no PATH, but parent directories are searched when a file is not 
found.  This feature is especially useful for default account files.

It's fun being able to turn-off interrupts with the asm instruction, CLI, and 
on with STI.  TempleOS runs all programs in kernel mode, ring 0, so no 
instructions are off-limits.  Turning-off and on preemption with
[C:/Kernel/Adam1b.HPP.Z,227] Preempt() is 
a less drastic measure that is usually sufficient.  A newly
[C:/Kernel/Task1a.CPP.Z,221] Spawn()ed task 
begins with preemption off.

The graphic resolution is poor, 640x480 16 color, but God said that and
that's 
all I feel comfortable with without GPU acceleration supported.  A 1600x1200x2
4 bit screen takes 37 times more memory, implying 37 times the CPU power.  
Also, a fixed size keeps it simple with everybody machine having the same 
appearance.  Look on the bright-side -- you won't spend as much time
twiddling 
pixels for your game art and you'll have tons of CPU power available, 
especially with multicore systems.

TempleOS is for hobbyist programmers on single user (at a time) home 
computers, not mainframes or servers, but it is preemptive multitasking.  The 
focus task is all-important so symmetrical multiprocessing is almost 
pointless.  Why does it matter running two apps at the same time twice as
fast 
when you really want to run one faster?  You could say TempleOS does 
master/slave multiprocessing.  The anticipated use for multicore is primarily 
putting graphics on the screen.  Hardware graphics acceleration is not used, 
so this is possible.  See [C:/Doc/MultiCore.TXT.Z,1] TempleOS MultiCore.

There is no distinction between the terms task, process or thread.  All have
a 
task record, [C:/Kernel/Adam1a.HPP.Z,3213] CTask, pointed to by the FS
segment reg and are accessed with Fs-
> while Gs-> points to a [C:/Kernel/Adam1a.HPP.Z,3338] CCPU for the current
CPU core.  Each task can have 
just one window, but a task can have children with windows.  (The segment
regs 
are just used as extra regs -- there is nothing segmented about TempleOS' 
memory.)

In TempleOS, Adam refers to a task that is the father of all tasks.  He's 
never supposed to die.  Since tasks inherit the symbols of parents, 
system-wide stuff is associated with Adam.  His heap is like kernel memory in 
other operating systems.  Since Adam is immortal, it's safe to allocate 
objects, not tied to any mortal task, from Adam's heap.  He stays in a server 
mode, taking requests, so you can ask him to #include something, placing that 
code system-wide.  A funny story is that originally I called it the root task 
and even had a /Root directory ;-)  Adam executes [C:/Kernel/Adam1.CPP.Z,1]
at boot 
time.

For easy back-ups, place everything you author in your HOME directory and 
subdirectories.  Then, use [C:/Adam/Dsk/Dsk2a.CPP.Z,135] CopyTree().  That
should make upgrading easy, too.  
To make an account use [C:/Kernel/Dsk/Dsk1c.CPP.Z,82] MkDir() to create a
directory under /Accts.  It will be 
HOME if you boot to it.  Recompile with [C:/Adam/Boot/InsBoot.CPP.Z,135]
MakeOSPrtBootInstall() and make it 
boot your acct.  Customizable start-up scripts go in your HOME directory. 
The 
default start-up scripts are in /Accts, the parent of all accounts.  Copy the 
start-up files you wish to customize into HOME and modify them.  See 
[C:/Doc/GuideLines.TXT.Z,1] Acct Files.  You can make your own distro that
includes everything and is a 
bootable live CD with [C:/Misc/MakeDistro.CPP.Z,1].

Typically, your usage pattern through the day will be repeatedly left or
right 
clicking on filenames in a cmd line [C:/Kernel/Dsk/Dsk1b.CPP.Z,234] Dir()
listing.  You left-click files to 
edit them and right-click to #include them.  To begin a project, type
[C:/Adam/DolDoc/DocMain.CPP.Z,3] Ed("file
name");, supplying a filename.  You can also run programs with <F5> when in 
the editor.  <ESC> to save and exit the file.  You'll need to do a new
[C:/Kernel/Dsk/Dsk1b.CPP.Z,234] Dir() 
cmd, periodically, so make a macro on your PersonalMenu.  Access your 
PersonalMenu by pressing <CTRL-m>, cursoring until you are on top of it and 
pressing <SPACE>.

<CTRL-t> toggles plain text mode, showing format commands, a little like 
viewing html code.
<CTRL-l> inserts a nongraphic widget.
<CTRL-r> inserts a graphic resource or edits the graphic under the cursor.
<CTRL-d> brings-up the file manager.  It's pretty crappy.  I find I don't
need 
it very often, believe it or not.
<CTRL-b> toggles window border.

<ALT-m> maximizes a window.
<ALT-SHIFT-w> closes WordStat.
<ALT-w> brings back WordStat.
<ALT-v> vertically tiles windows.
<ALT-h> horizontally tiles windows.
The ALT keys are defined in [C:/Accts/TAD/Adam3cKeyPlugIns.CPP,1].  You can
customize 
them.

<CTRL-ALT-e> creates a new terminal window.  <CTRL-ALT-x> kills a window.  
You'll do these periodically.

[C:/Adam/Utils/Grep.CPP.Z,143] Grep() is your best friend.  There's a wrapper
function called [C:/Accts/TAD/Adam3dWrappers.CPP.Z,8] F() in your HOM
E/Adam3dWrappers.CPP.Z file.  Feel free to make wrapper functions for 
functions you use often and customize the args.  By the way,
[C:/Adam/Utils/Grep.CPP.Z,143] Grep() or
[C:/Accts/TAD/Adam3dWrappers.CPP.Z,13] R() can 
be used to replace strings across multiple files.  You can access
[C:/Adam/Utils/Grep.CPP.Z,143] Grep() using 
<CTRL-SHIFT-f>.

As you browse code, use the WordStat window to look-up functions, etc.  <CTRL-
SHIFT-F1> (or whatever number) to follow a sym to it's source.  You can
browse 
deeper and deeper.  You go back with <SHIFT-ESC>.

Use the [C:/Doc/HelpIndex.TXT.Z,1] Help & Index or [C:/Doc/DemoIndex.TXT.Z,1]
Demo Index to find-out what exists.  Press <F1> for 
help or use the links on your menu (<CTRL-m>).  Also, look in the /Demo or /Ap
ps directories for inspiration.


Take Tour
`SpawnUser("Cd(\"::/Misc/Tour\");;AutoFile(\"Tour\");
");`



* "Windows" is a trademark of MicroSoft Corp.

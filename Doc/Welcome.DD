                             Welcome to TempleOS

TempleOS is a x86_64, multi-cored, non-preemptive multi-tasking, ring-0-only, 
single-address_mapped (identity-mapped), operating system for recreational 
programming.  Paging is almost not used.

The people whom can most benefit are:
  * Professionals doing hobby projects
* Teenagers doing projects
* Non-professional, older-persons projects

Simplicity is a goal to [C:/Doc/Strategy.DD.Z,1] keep the line count down, so
it's easy to tinker with. 
 As it turns-out, simplicity makes it faster in some ways, too.  It never 
switches privilege levels, never changes address maps, tends to load whole 
contiguous files and other, similar things which boost speed.  It's only 
80,850 lines of code including the kernel, the 64-bit compiler, the graphics 
library and all the tools.  More importantly, it's designed to keep the
user's 
line count down -- you can do a [C:/Doc/HelloWorld.DD.Z,1] Hello World
application in one line of code 
and can put graphics on the scrn with a three line program!

It's a kayak, not a Titanic -- it will crash if you do something wrong.  You 
quickly reboot, however.  DOS and the 8-bit home computers of the 80's worked 
fine without memory protection and most computers in the world -- the
embedded 
ones -- operate without protection.  The resulting simplicity of no 
protections is why TempleOS has value.  In facts, that's the point of 
TempleOS.  See the [C:/Doc/Charter.DD.Z,1] TempleOS Charter.

Conventional thinking is "failure is not an option" for general purpose 
operating systems.  Since this OS is used in addition to Windows or Linux, 
however, failure is an option -- just use Windows or Linux if you can't do 
something.  I cherry-pick what it will and won't do, to make it maximally 
beautiful.  The following applications more or less form a basis that spans 
the range of use that TempleOS is intended for:

[C:/Demo/Games/BattleLines.HC.Z,1] /Demo/Games/BattleLines.HC
[C:/Demo/Games/BigGuns.HC.Z,1] /Demo/Games/BigGuns.HC
[C:/Demo/Games/BlackDiamond.HC.Z,1] /Demo/Games/BlackDiamond.HC
[C:/Demo/Games/BomberGolf.HC.Z,1] /Demo/Games/BomberGolf.HC
[C:/Demo/Games/CastleFrankenstein.HC.Z,1] /Demo/Games/CastleFrankenstein.HC
[C:/Demo/Games/CharDemo.HC.Z,1] /Demo/Games/CharDemo.HC
[C:/Demo/Games/CircleTrace.HC.Z,1] /Demo/Games/CircleTrace.HC
[C:/Demo/Games/Collision.HC.Z,1] /Demo/Games/Collision.HC
[C:/Demo/Games/Digits.HC.Z,1] /Demo/Games/Digits.HC
[C:/Demo/Games/DunGen.HC.Z,1] /Demo/Games/DunGen.HC
[C:/Demo/Games/Talons.HC.Z,1] /Demo/Games/Talons.HC
[C:/Demo/Games/ElephantWalk.HC.Z,1] /Demo/Games/ElephantWalk.HC
[C:/Demo/Games/FlapBat.HC.Z,1] /Demo/Games/FlapBat.HC
[C:/Demo/Games/FlatTops.HC.Z,1] /Demo/Games/FlatTops.HC
[C:/Demo/Games/Halogen.HC.Z,1] /Demo/Games/Halogen.HC
[C:/Demo/Games/MassSpring.HC.Z,1] /Demo/Games/MassSpring.HC
[C:/Demo/Games/Maze.HC.Z,1] /Demo/Games/Maze.HC
[C:/Demo/Games/RainDrops.HC.Z,1] /Demo/Games/RainDrops.HC
[C:/Demo/Games/RawHide.HC.Z,1] /Demo/Games/RawHide.HC
[C:/Demo/Games/Rocket.HC.Z,1] /Demo/Games/Rocket.HC
[C:/Demo/Games/RocketScience.HC.Z,1] /Demo/Games/RocketScience.HC
[C:/Demo/Games/Squirt.HC.Z,1] /Demo/Games/Squirt.HC
[C:/Demo/Games/TheDead.HC.Z,1] /Demo/Games/TheDead.HC
[C:/Demo/Games/TicTacToe.HC.Z,1] /Demo/Games/TicTacToe.HC
[C:/Demo/Games/TreeCheckers.HC.Z,1] /Demo/Games/TreeCheckers.HC
[C:/Demo/Games/Varoom.HC.Z,1] /Demo/Games/Varoom.HC
[C:/Demo/Games/Wenceslas.HC.Z,1] /Demo/Games/Wenceslas.HC
[C:/Demo/Games/Whap.HC.Z,1] /Demo/Games/Whap.HC
[C:/Demo/Games/Zing.HC.Z,1] /Demo/Games/Zing.HC
[C:/Demo/Games/ZoneOut.HC.Z,1] /Demo/Games/ZoneOut.HC
[C:/Apps/Psalmody/Examples/childish.HC.Z,1]
/Apps/Psalmody/Examples/childish.HC
[C:/Apps/Psalmody/Examples/night.HC.Z,1] /Apps/Psalmody/Examples/night.HC
[C:/Apps/Psalmody/Examples/prosper.HC.Z,1] /Apps/Psalmody/Examples/prosper.HC

Two things to know about TempleOS are that _tasks_ have
[C:/Kernel/Mem/MAllocFree.HC.Z,387]
MAlloc/[C:/Kernel/Mem/MAllocFree.HC.Z,383] Free heap memory, 
not applications, and tasks have compiler symbol tables that persist at a 
scope like environment variables in other operating systems, and the symbols 
can include functions.

For other operating systems, I hated learning one language for command line 
scripts and another for programming.  With TempleOS, the command line feeds 
right into the [C:/Doc/HolyC.DD.Z,1] HolyC compiler, line by line, and it
places code into memory it 
[C:/Kernel/Mem/MAllocFree.HC.Z,387] MAlloc()s.  The compiler is paused at the
command line, waiting for input.  
Naturally, you #include a program to load it into memory and, usually, start 
it.

During the boot process, many files get [C:/StartOS.HC.Z,1] compiled before
you have access to the 
command line.  (Don't worry, booting takes only two seconds.)  All the header 
declarations for the operating system are compiled and are available for use 
in your programs without needing to #include them.  Everything is truly 
compiled to native x86_64 machine code, nothing is interpreted and there is
no 
byte code.

Statements at the global scope -- outside the scope of functions -- execute 
immediately.  There is no main() function.  Instead, you give meaningful
names 
to what would be main() functions and you invoke them by calling them with a 
statement in the global scope, usually at the bottom of your file.

I started with C syntax, but didn't like the command line for a directory 
listing looking like this:

>Dir("*.*",FALSE);

So, I added default args from C++ and it looked like this:

>Dir();

I didn't like that, so I made parentheses optional on calls with no args and 
it, now, looks like this:

>Dir;

The syntax change created an ambiguity when specifying function addresses, 
like for calling [C:/Kernel/QSort.HC.Z,85] QSort().  To resolve it, I  made a
'&' required in front of 
function names when specifying an address of a function, which is better 
anyway.

Once I was no longer using standard C/C++ syntax, I decided to change 
everything I didn't like and call it [C:/Doc/HolyC.DD.Z,1] HolyC.  Here are
the new 
[C:/Doc/HolyC.DD.Z,1] operator precedence rules.  It's Biblical!  See
[C:/Misc/Bible.TXT.Z,81941] Luke,5:37.

There are no object files in TempleOS and, normally, you don't make
executable 
files either, but you can.  That's known as [C:/Doc/Glossary.DD.Z,1]
Ahead-of-Time compilation.  
Instead, you [C:/Doc/Glossary.DD.Z,1] Just in Time compile.

Tasks have no priority and are never removed from the queue.  Instead, they 
often poll whatever they are waiting on and swap-out.  (Swapping tasks takes 
half a microsecond and does not involve disk activity or memory maps.)  See 
[C:/Kernel/Sched.HC.Z,1] Scheduler.  Polling keeps it simple.  It might be a
problem if you had lots of 
tasks busy, which rarely happens on a home computer.  The order of the tasks 
in the queue determines front-to-back window order.

The FAT32 filesystem is supported to makes exchanging files with a dual
booted 
other operating system easy and there is the simple, 64-bit TempleOS
[C:/Doc/RedSea.DD.Z,1] RedSea 
filesystem.  The [C:/Doc/RedSea.DD.Z,1] RedSea has allocation bitmap for clus
and all files are 
stored contiguously.  You can't grow files.

TempleOS is geared toward reading and writing whole files.  Since whole files 
are processed, compression is possible.  Filenames ending in ".Z" are 
automatically compressed or uncompressed when stored and fetched.  TempleOS 
does support direct block random access into files, however --
[C:/Kernel/BlkDev/DskCFile.HC.Z,129] FBlkRead() and 
[C:/Kernel/BlkDev/DskCFile.HC.Z,181] FBlkWrite().

If a file is not found, ".Z" is added or removed and a search is done, again.
 
There is no PATH, but parent directories are searched when a file is not 
found.  This feature is especially useful for default account files.

The graphic resolution is poor, 640x480 16 color, but God said it was a 
covenant like circumcision.  Also, that's all I feel comfortable with without 
GPU acceleration supported.  A 1600x1200x24 bit scrn takes 37 times more 
memory, implying 37 times the CPU power.  Also, a fixed size keeps it simple 
with everybody machine having the same appearance.  Look on the bright-side
-- 
you won't spend as much time twiddling pixels for your game art and you'll 
have tons of CPU power available, especially with multicore systems.

TempleOS is for hobbyist programmers on single user (at a time) home 
computers, not mainframes or servers.  The focus task is all-important so 
symmetrical multiprocessing is almost pointless.  Why does it matter running 
two apps at the same time twice as fast when you really want to run one 
faster?  You could say TempleOS does master/slave multiprocessing.  The 
anticipated use for multicore is primarily putting graphics on the scrn.  
Hardware graphics acceleration is not used, so this is possible.  See 
[C:/Doc/MultiCore.DD.Z,1] TempleOS MultiCore.

There is no distinction between the terms task, process or thread.  All have
a 
task record, [C:/Kernel/KernelA.HH.Z,3271] CTask, pointed to by the FS
segment reg and are accessed with Fs-
> while Gs-> points to a [C:/Kernel/KernelA.HH.Z,3391] CCPU for the current
CPU core.  Each task can have 
just one window, but a task can have children with windows.  (The segment
regs 
are just used as extra regs -- there is nothing segmented about TempleOS' 
memory.)  It is approximately the case that TempleOS is multi-threading, 
single-processing.

In TempleOS, [C:/Doc/Glossary.DD.Z,1] Adam Task refers to the father of all
tasks.  He's never supposed 
to die.  Since tasks inherit the symbols of parents, system-wide stuff is 
associated with Adam.  His heap is like kernel memory in other operating 
systems.  Since Adam is immortal, it's safe to alloc objects, not tied to any 
mortal task, from Adam's heap.  He stays in a server mode, taking requests,
so 
you can ask him to #include something, placing that code system-wide.  A
funny 
story is that originally I called it the root task and even had a /Root 
directory :-)  Adam executes [C:/StartOS.HC.Z,1] at boot time.

For easy back-ups, place everything you author in your /Home directory and 
subdirectories.  Then, use [C:/Adam/ABlkDev/ADskA.HC.Z,122] CopyTree().  That
should make upgrading easy, too.  
Customizable start-up scripts go in your /Home directory.  The default 
start-up scripts are in the root directory.  Copy the start-up files you wish 
to customize into /Home and modify them.  See [C:/Doc/GuideLines.DD.Z,1] Home
Files.  You can make your 
own distro that includes everything and is a bootable live CD with 
[C:/Misc/DoDistro.HC.Z,1].

Typically, your usage pattern through the day will be repeatedly left or
right 
clicking on filenames in a cmd line [C:/Kernel/BlkDev/DskDirB.HC.Z,102] Dir()
listing.  You left-click files to 
edit them and right-click to #include them.  To begin a project, type
[C:/Adam/DolDoc/DocEd.HC.Z,204] Ed("file
name");, supplying a filename.  You can also run programs with <F5> when in 
the editor. <ESC> to save and exit the file.  You'll need to do a new
[C:/Kernel/BlkDev/DskDirB.HC.Z,102] Dir() 
cmd, periodically, so make a macro on your PersonalMenu.  Access your 
PersonalMenu by pressing <CTRL-m>, cursoring until you are on top of it and 
pressing <SPACE>.

<CTRL-t> toggles plain text mode, showing format commands, a little like 
viewing html code.
<CTRL-l> inserts a text widgets.
<CTRL-r> inserts or edit a graphic sprite resource at cursor location.
<CTRL-d> brings-up the file manager.  It's pretty crappy.  I find I don't
need 
it very often, believe it or not.
<CTRL-b> toggles window border.

<ALT-m> maximizes a window.
<ALT-SHIFT-a> closes AutoComplete.
<ALT-a> brings back AutoComplete.
<ALT-v> vertically tiles windows.
<ALT-h> horizontally tiles windows.
The ALT keys are defined in [C:/Home/HomeKeyPlugIns.HC,1].  You can customize
them.

<CTRL-ALT-t> new terminal window.
<CTRL-ALT-n> switches to the next window.
<CTRL-ALT-x> kills a window.

[C:/Adam/Opt/Utils/Find.HC.Z,145] Find() is your best friend.  There's a
wrapper function called [C:/Home/HomeWrappers.HC.Z,8] F() in your ~/H
omeWrappers.HC.Z file.  Feel free to make wrapper functions for functions you 
use often and customize the args.  By the way,
[C:/Adam/Opt/Utils/Find.HC.Z,145] Find() or [C:/Home/HomeWrappers.HC.Z,13]
R() can be used to 
replace strings across multiple files.  You can access
[C:/Adam/Opt/Utils/Find.HC.Z,145] Find() using <CTRL-SHIF
T-f>.

As you browse code, use the AutoComplete window to look-up functions, etc.  <C
TRL-SHIFT-F1> (or whatever number) to follow a sym to it's source.  You can 
browse deeper and deeper.  You go back with <SHIFT-ESC>.

Use the [C:/Doc/HelpIndex.DD.Z,1] Help & Index or [C:/Doc/DemoIndex.DD.Z,1]
Demo Index to find-out what exists.  Press <F1> for 
help or use the links on your menu (<CTRL-m>).  Also, look in the /Demo or /Ap
ps directories for inspiration.

Software is distributed as [C:/Doc/RedSea.DD.Z,1] RedSea ISO files.  Burn a
CD/DVD, or set your 
CD/DVD in QEMU, VMware or VirtualBox to the ISO file.  Then, access the 'T' 
drive.  Or, [C:/Adam/ABlkDev/Mount.HC.Z,138] Mount() the ISO.C file and
access the 'M' drive in TempleOS.  It 
must be a contiguous ISO.C file, so rename it under TempleOS to ISO.C.

Ideally, do not install applications such as games onto your hard drive 
because we wish to keep hard drive usage low, so the whole 'C' drive can be 
copied quickly to 'D'.  Also, the [C:/Adam/ABlkDev/FileMgr.HC.Z,579]
FileMgr() <CTRL-d> starts too slowly when 
there are lots of hard drive files, but that is how we want it.

3rd party libraries are banned, since they circumvent the 100,000 line of
code 
limit in the [C:/Doc/Charter.DD.Z,1] TempleOS Charter.  All applications must
only depend on the core 
TempleOS files and whatever they bring along in the ISO.  This is similar to 
how Commodore 64 applications only depended on the ROM.

Create a [C:/Doc/RedSea.DD.Z,1] RedSea ISO file with
[C:/Adam/Opt/Boot/DskISORedSea.HC.Z,136] RedSeaISO().  Send an email to 
tdavis@templeos.org if you want me to post a link to your TempleOS code in
the 
App Store.

Take Tour
`User("Cd(\"::/Misc/Tour\");;InFile(\"Tour\");
");`



* "Linux" is a trademark owned by Linus Torvalds.
* "Windows" is a trademark owned by MicroSoft Corp.
* "Commodore 64" is a trademark owned by Polabe Holding NV.
* "QEMU" is a trademark owned by Fabrice Bellard.
* "VMware" is a trademark owned by VMware, Inc.
* "VirtualBox" is a trademark owned by Oracle.

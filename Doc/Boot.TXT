                                 Booting A PC

TempleOS only supports traditional BIOS booting, not the newer technique, UEFI
.  This describes BIOS booting.

When you turn-on (better term is "power-up"!) a computer or do a hardware 
reset, it starts in the BIOS.  Sometimes, you must change the BIOS boot order 
to boot stuff.

The BIOS loads a boot sector from CD-ROM or hard disk or whatever.  The boot 
sector runs in 16-bit mode and often loads-in a second file that's bigger if 
it can't be done by just one sector.  It's a safe bet that boot sectors are 
hand-coded assembly language  Most boot sectors use the BIOS to load-in the 
rest.

Not only do boot sectors have a size limit, 512 bytes or 2048 bytes for 
CD-ROM, the files they load have to fit within 640K because they run in
16-bit 
mode.  This means they usually can't just load the whole operating system and 
start it running.  I guess some boot loaders, like [C:/Doc/Grub.TXT.Z,1]
Grub, have a capability of 
switching modes before handing-off control to the operating system.  Anyway, 
the operating system must load the rest of itself.  My
[C:/Kernel/KStart.CPP.Z,1] Kernel module is what 
the boot sector loads and I try to put a minimum in it so that it will always 
fit in 640K.  It switches to 32-bit mode, then, to 64-bit mode allowing
access 
to more memory.  It loads in the rest of TempleOS.

All the boot related stuff for TempleOS is in the /Adam/Boot directory.

[C:/Adam/Boot/InsBoot.CPP.Z,1] InsBoot.CPP	Installs and patches boot sectors
[C:/Adam/Boot/BootCD.CPP.Z,1] BootCD.CPP	CD-ROM Boot sector
[C:/Adam/Boot/BootMHD.CPP.Z,1] BootMHD.CPP	Master HD boot record
[C:/Adam/Boot/BootMHD2.CPP.Z,1] BootMHD2.CPP	Stage 2 master boot loader
[C:/Adam/Boot/BootHD.CPP.Z,1] BootHD.CPP	HD partition boot record

BootCD is the CD-ROM boot sector.  If you are curious on the layout of
ISO9660 
CD-ROMs, see [C:/Adam/Boot/DskCDDVD.CPP.Z,1] DiskCDDVD.CPP.  To make a custom
bootable CD-ROM, look here 
[C:/Misc/MakeDistro.CPP.Z,1] Bootable CD.

BootMHD is the master boot record for a hard drive.  This goes on block zero.
 
It loads-in BootMHD2 which is stored as a file on a partition, kinda risky
and 
unusual -- most other master boot loaders place stage 2 in a gap that's not
in 
any particular partition.   BootMHD2 displays a menu and will boot a 
partition.  Each partition has it's own partition boot record, the first
block 
of the partition.  BootHD is the boot record for a TempleOS partition.

My boot records don't access directories because that would make them too big 
for one block and would make them depend on a file system layout.  Instead, 
they get patched with the LBA, logical block addresses, to load other stuff.  
To update with a new TempleOS kernel, you must create a binary file and patch 
the boot loader so it knows the LBA blocks to load.  Therefore, you usually 
recompile the kernel and update the boot sector at the same time.  
[C:/Adam/Boot/InsBoot.CPP.Z,130] MakeOSDrvBootInstall() does this. 
[C:/Adam/Boot/InsBoot.CPP.Z,253] MasterBootIntall() will install a master 
boot loader.

With TempleOS , the Kernel module loads the Compiler module so it can process 
start-up scripts and works with srource code from then on.  
[C:/Kernel/Adam1.CPP.Z,1] is the starting start-up script.  It processes
(compiles 
into memory) the stuff in the /Adam directory and ends by #includeing the 
[C:/Accts/TAD/Adam3.CPP,1] file.

It is possible to reboot without doing a hardware rst.  This is faster.  You 
might do this when working on Kernel or your start-up scripts when you want 
them to take effect.  See [C:/Adam/Boot/InsBoot.CPP.Z,58] RAMReboot().

 <1> (image)























































                                 Booting A PC

TempleOS only supports traditional BIOS booting, not the newer technique, UEFI
.  This describes BIOS booting.

When you turn-on (better term is "power-up"!) a computer or do a hardware 
reset, it starts in the BIOS.  Sometimes, you must change the BIOS boot order 
to boot stuff.

The BIOS loads a boot sector from CD/DVD or hard disk or whatever.  The boot 
sector runs in 16-bit mode and often loads-in a second file that's bigger if 
it can't be done by just one sector.  It's a safe bet that boot sectors are 
hand-coded assembly language  Most boot sectors use the BIOS to load-in the 
rest.

Not only do boot sectors have a size limit, 512 bytes or 2048 bytes for 
CD/DVD, the files they load have to fit within 640K because they run in
16-bit 
mode.  This means they usually can't just load the whole operating system and 
start it running.  I guess some boot loaders, like [C:/Doc/Grub.TXT.Z,1]
Grub, have a capability of 
switching modes before handing-off control to the operating system.  Anyway, 
the operating system must load the rest of itself.  My
[C:/Kernel/KStart.CPP.Z,1] Kernel module is what 
the boot sector loads and I try to put a minimum in it so that it will always 
fit in 640K.  It switches to 32-bit mode, then, to 64-bit mode allowing
access 
to more memory.  It loads in the rest of TempleOS.

All the boot related stuff for TempleOS is in the /Adam/Opt/Boot directory.

[C:/Adam/Opt/Boot/BootHDIns.CPP.Z,1] Boot.CPP	Installs and patches boot
sectors
[C:/Adam/Opt/Boot/BootDVD.CPP.Z,1] BootDVD.CPP	CD/DVD Boot sector
[C:/Adam/Opt/Boot/BootMHD.CPP.Z,1] BootMHD.CPP	Master HD boot record
[C:/Adam/Opt/Boot/BootMHD2.CPP.Z,1] BootMHD2.CPP	Stage 2 master boot loader
[C:/Adam/Opt/Boot/BootHD.CPP.Z,1] BootHD.CPP	HD partition boot record

BootDVD is the CD/DVD boot sector.  If you are curious on the layout of ISO966
0 CD/DVDs, see [C:/Adam/Opt/Boot/DskISO9660.CPP.Z,1] DskISO9660.CPP.  To make
a custom bootable CD/DVD, look here 
[C:/Misc/DoDistro.CPP.Z,1] Bootable CD.

BootMHD is the master boot record for a hard drive.  This goes on block zero.
 
It loads-in BootMHD2 which is stored as a file on a partition, kinda risky
and 
unusual -- most other master boot loaders place stage 2 in a gap that's not
in 
any particular partition.   BootMHD2 displays a menu and will boot a 
partition.  Each partition has it's own partition boot record, the first
block 
of the partition.  BootHD is the boot record for a TempleOS partition.

My boot records don't access directories because that would make them too big 
for one block and would make them depend on a file system layout.  Instead, 
they get patched with the LBA, logical block addresses, to load other stuff.  
To update with a new TempleOS kernel, you must create a binary file and patch 
the boot loader so it knows the LBA blocks to load.  Therefore, you usually 
recompile the kernel and update the boot sector at the same time. 
[C:/Adam/Opt/Boot/BootHDIns.CPP.Z,18] BootHDIns() 
does this.  [C:/Adam/Opt/Boot/BootMHDIns.CPP.Z,69] BootMHDIns() will install
a master boot loader.

With TempleOS , the Kernel module loads the Compiler module so it can process 
start-up scripts and works with source code from then on. 
[C:/StartOS.CPP.Z,1] is 
the starting start-up script.  It processes (compiles into memory) the stuff 
in the /Adam and /Home directories.

It is possible to reboot without doing a hardware rst.  This is faster.  You 
might do this when working on Kernel or your start-up scripts when you want 
them to take effect.  See [C:/Adam/Opt/Boot/BootRAM.CPP.Z,33] BootRAM().

 <1> (image)










































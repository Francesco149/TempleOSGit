                          Mysterious TempleOS Items

* TempleOS runs in VGA 640x480 16 color graphics mode, not text mode.  It 
changes to this mode with a [C:/Kernel/KStart.CPP.Z,1] BIOS call while in
real-mode before it switches to 
64-bit mode.  The text is [C:/Adam/Gr/GrScreen.CPP.Z,276] drawn manually.  If
graphics mode fails, it 
falls-back on text mode.  You can force text mode with an
[C:/Kernel/KCfg.CPP.Z,1] Kernel config 
option.

* TempleOS identity-maps all memory, all the time.  There is no "high half" 
memory space.  TempleOS is ring-0-only, so everything is kernel, even user 
programs.  There is a special task called "Adam" and he doesn't die, so his 
heap never gets freed.  That's as close to "kernel memory" as it gets.

* TempleOS puts all code in the lowest 2 Gig, so that REL32 addressing can be 
used.  TempleOS is 64-bit, but I just thought 2 Gig was enough for code.  It 
actually puts global variables there, too, but you can turn that off with 
[C:/Kernel/Adam1a.HPP.Z,1474] OPTf_GLBLS_ON_DATA_HEAP. 
[C:/Kernel/Mem1b.CPP.Z,376] MAlloc() can allocate any memory, of course.

* TempleOS doesn't use software interrupts or SYSCALL instructions because it 
never needs to change out of ring-0, even running user programs.  Calls are 
always CALL REL32 instructions.

* The stack does not grow.  In theory, memory gets fragmented, too.

* There is no PATH.  You do not enter filenames at the command-line and
expect 
them to run.  You enter C-like code.  [C:/Doc/CmdLine.TXT.Z,1] Get Started
Here.

* If you use [C:/Doc/Grub.TXT.Z,1] Grub, you "chain-load" like Windows.  You
can use the TempleOS 
boot-loader.  [C:/Adam/Boot/BootMHD.CPP.Z,1] Master-Boot-Loader-Stage1,
[C:/Adam/Boot/BootMHD2.CPP.Z,1] Master-Boot-Loader-Stage2, 
[C:/Adam/Boot/BootHD.CPP.Z,1] Partition-Boot-Loader,
[C:/Adam/Boot/BootCD.CPP.Z,1] CD-DVD-Boot-Loader.

* The boot-loaders must be patched by you running
[C:/Adam/Boot/InsBoot.CPP.Z,141] MakeOSPrtBootInstall() or 
[C:/Adam/Boot/InsBoot.CPP.Z,263] MasterBootIntall().  Those will write the
block address into the boot-loader 
because the boot-loaders do not navigate file systems to find the
[C:/Kernel/KStart.CPP.Z,1] Stage2 if 
you relocate it.

* TempleOS is 64-bit.  Like all PC operating systems, the boot-loader starts 
in 16-bit real-mode.  TempleOS calls a few BIOS info routines, switches to 
VGA-640x480x4bit, switches to 32-bit, then, 64-bit mode.  There is an odd 
thing called a PCI BIOS which is 32-bit used for PCI config space access.  
TempleOS calls [C:/Kernel/BIOS32.CPP.Z,1] that a couple times.  It must
temporarily drop-out-of 64-bit 
mode for that and stop multi-tasking.

* PUSH EAX : All stack operations in 64-bit mode are 64-bits.

* XOR EAX,EAX : Operations on 32-bit regs clear the high 32-bits.

* MOV RAX,FS:[RAX] : FS can be set with a WRMSR, but displacement is RIP 
relative, so it's tricky to use.  FS is used for the current
[C:/Kernel/Adam1a.HPP.Z,2879] CTask, GS for 
[C:/Kernel/Adam1a.HPP.Z,3488] CCPU.

* TempleOS uses JIT file compression on a file-by-file basis.  Files are 
[C:/Kernel/Compress.CPP.Z,1] compressed, not encrypted.

* TempleOS has a dictionary that is shipped compressed.  When you boot the 
first time it is uncompressed.  TempleOS has a Windows utility for 
uncompressing.  That utility needs Microsoft DLL files.  TempleOS does not
use 
any libraries, modules or code from other sources -- I wrote it all from 
scratch and it is self-contained.

* There are no OBJ or EXE files.  There are only two files compiled 
ahead-of-time -- Kernel.BIN.C and Compiler.BIN.Z.  You can delete them and 
recompile with [C:/Adam/Boot/InsBoot.CPP.Z,141] MakeOSPrtBootInstall(). 
TempleOS is 120,796 lines.  Roughly 
50,000 is compiled AOT and 50,000 during boot JIT.  The rest is JIT demos and 
applications.

* The main difference between TempleOS and other systems is that the heap and 
compiler sym table are associated with tasks, not applications.

* There are sym(hash) tables maintained by each task.  They are similar in 
scope to environment variables.  When a symbol is not found, the parent
task's 
symbol table is checked.  All process chain back to the Adam process.  Adam 
has the symbols from headers you normally #include in other operating
systems, 
so you do not need to #include any headers in TempleOS.

* The compiler only creates pos independent code.  You can't create code
which 
is loaded at a fixed, specified location.  The code is pos independent by 
virtue of the fact that abs addresses get patched.

* Binary executable files have export syms which are loaded into the sym 
tables.  The operating system Kernel has such an export table.  In addition, 
some map files are processed to provide more information on syms -- src file 
links.  This is how the [C:/Kernel/PSect.CPP.Z,285] Man()/WORDSTAT feature
can find src lines.

* #assert might print a message at COMPILE time, not run time.

* The word "public" does very little except allow the
[C:/Doc/HelpIndex.TXT.Z,1] help_index and [C:/Adam/Hash2a.CPP.Z,90] Who() 
program varients to exclude meaningless syms.  If you wish a full report of 
public and nonpublic syms Click Here
`DocMax(1000000);Who;View;
`
.

* When compilation takes place, the structures used by the compiler stick 
around.  Data on classes can be accessed by code.  See
[C:/Adam/Dbg2a.CPP.Z,134] ClassRep().

* Filenames ending in ".Z" are automatically compressed and uncompressed when 
writing to disk.  File size in directory listing is the compressed size.  See 
[C:/Doc/TSZ.TXT.Z,1] for uncompressing from WINDOWS.

* Some memory objects are allocated when needed and will decrease the 
available memory displayed.  A task keeps mem objects smaller than a couple 
blocks in it's own separate heap when freed and these are not counted in the 
available system free memory, though they are free.  They get returned to the 
system when the task is killed.  To get a sense of this, compile the
operating 
system and see the amount of mem used.  Then, compile it again and far less 
will be allocated.  This is because it is reusing the small chunks.  See 
[Memory,1] Memory.  Click Here
`MemRep;View;`
 for a [C:/Adam/Utils/MemRep.CPP.Z,198] MemRep.

* The cursor location is stored as an ASCII 5 in files.  ASCII 31 is SHIFT-SPA
CE, a character which does not get converted to tabs by space-to-tabs,
[C:/Adam/Utils/S2T.CPP.Z,48] S2T().  
The ASCII 28 is SHIFT-ESC. 

* Binary data is stored beyond the terminating NULL in text files.  Map files 
store debug src lines and other files store sprites.

* Sprites can be stored as vect graphics so they might take shockingly little 
room.  They can be converted to bitmaps.

* If you change code in the /Adam, /Adam or your HOME directory, you don't 
need to recompile, you just need to reboot because those directories get 
recompiled when you boot.  It uses JIT compilation.  There is no ".BIN" file 
for JIT compilation.

* If not found, ".Z" is added or removed and a search is done again.  If a 
file is still not found, the parent directories are searched for a file of
the 
same name.

* TempleOS supports FAT32 and [C:/Doc/RedSea.TXT.Z,1] RedSea file systems. 
The [C:/Doc/RedSea.TXT.Z,1] RedSea partitions will 
appear as FAT32 to other operating systems, but will not work.  Do not access 
the native TempleOS partitions from other operating systems.  This was to
fool 
a bootloader when I tricked it to use it's recovery partition feature.

* The CPU usage during disk operation expands to 99%.  It polls while 
swapping-out.  You can do other, non-disk activity during disk operations 
because it swaps-out a lot and task swaps take only half a microsecond, 
probably a hundred times faster than a typical OS.  See 
[C:/Demo/Lectures/Spinning.CPP.Z,1] Cooperative Multitasking.  It does not
break-up disk operations into small 
pieces for sharing, however, so the disk is lock onto that one task.


* "Windows" is a trademark of MicroSoft Corp.

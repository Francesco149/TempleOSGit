                                   Glossery

+] Abbreviations
  Abs	Absolute
AC	AutoComplete
Acct	Account
ACD	AutoComplete Dictionary
Addr	Address
AOT	Ahead-of-Time
AP	Application Processor(CPU#>0)
Arg	Argument
Asm	Assemble or Assembly
Attr	Attribute
Aux	Auxilliary
BG	Backround
Bin	Binary
Blk	Block
BSP	Boot-strap Processor(CPU#0)
Buf	Buffer
Bwd	Backward
CB	Call-Back, Code Block
Cfg	Config
Chg	Change
Chk	Check
Const	Consant
Cmd	Command
Cmp	Compiler
Cnt	Count
Ctrl	Control.  The ctrl key is indicated with "^" in documentation.
Cur	Current
Cvt	Convert
Dbg	Debug
Dbl	Double
DC	Device Context
Del	Delete
Desc	Descriptor, Description
Dev	Device
Dft	Default
Dir	Directory, Direction
Doc	Document
Drv	Drive
Dsk	Disk
Dst	Destination
Ed	Edit, Editor
Elem	Element
Evt	Event
Exe	Execute
Ext	Extern, Extended
Feat	Feature
FG	Foreground
Fmt	Format
Fwd	Forward
FPS	Frames per Second, First Person Shooter
fp_	Function ptr
Fun	Function
Gen	Generate
Glbl	Global
Gr	Graphic
IDE	Integrated Drive Electronics, Integrated Development Environment
Ident	Identifier, Identity
IDT	Interrupt Descriptor Table
Init	Initialize
Ins	Insert
Int	Interrupt
ip_	Input Pointer.  See [C:/Kernel/KbdMouse/InputPointer.CPP.Z,1]
  InputPointer.CPP.
Irq	Interrupt (Request)
JIT	Just-in-Time
Kbd	Keyboard
KD	Keyboard Device
Len	Length
Let	Letter
Lex	Lexical Analyser
Loc	Location, Lines of Code
Log	Logarithm, Logical
Lst	List
Man	Manual
Mem	Memory
Mgd	Managed
Mgr	Manager
Mon	Month
MP	MultiProcessor
Msg	Message
Num	Number
Obj	Object
Occ	Occurrence
ODE	Ordinary Differential Equation
Paren	Parenthesis
Pix	Pixel
Pkg	Package
Poly	Polygon
Pos	Position
Prec	Precedence
Pri	Primary
Prod	Product, Production
Prof	Profile, Profiler
Prt	Partition
PSect	Program Section
Pt	Point
Ptr	Pointer
Que	Queue
Ref	Reference
Reg	Register, Registry, Regular
Rem	Remove
Rep	Report, Repeat
Rqst	Request
Rst	Reset
Rot	Rotation
Rx	Receive
Sched	Sceduler
Sec	Second, Secondary
Sect	Sector
Seq	Sequence
Snd	Sound
Src	Source
Srv	Servant
Stat	Status, Statistic
Std	Standard
Stk	Stack
Str	String
Sym	Symbol
Sys	System
Term	Terminal
Tri	Triangle
Tx	Transmit
Uasm	Unassemble
Val	Value
Var	Variable
Vect	Vector
Vol	Volume
Win	Window
Wiz	Wizard
+] Task/Process/Thread
  There is no distinction between task, process or thread.  The Fs segment
  reg is kept pointing to the current task's [C:/Kernel/Adam1a.HPP.Z,3216]
  CTask.  There is only one window per task, and only core#0 tasks can have
  windows.  Each task has a code and data heap so memory is returned when it
  dies.  Each task has a [Hash,1] hash symbol table.
+] Adam Task
  This is Adam, as in Adam and Eve, the parent of all tasks and immortal. 
  This task is created at start-up and appears in the small window at the top
  beneath the user windows.  On it's heap are all memory objects which you
  don't want destroyed by a task's death.  When created, Adam runs the file
  [C:/Kernel/Adam1.CPP.Z,1]  Normally, Adam1.CPP.Z ends by #include
  [C:/Adam/Adam2.CPP.Z,1] where the remainder of the operating system is
  #included.  When start-up is finished, the adam task enters a server mode
  where it accepts requests from other tasks.  The [C:/Kernel/SrvCmd.CPP.Z,417]
  Adam("") routine will make Adam compile and run text src code.  #include
  statements can be sent to [C:/Kernel/SrvCmd.CPP.Z,417] Adam(""), creating
  system-wide code and data which don't disappear when any particular task ends.
+] Seth Task
  Seth is Adam and Eve's child.  Each CPU core has a special task which is
  immortal and which is special.  The Adam task on CPU#0 is also it's Seth task.
+] Code and Data Heaps
  TempleOS uses the asm CALL instruction, exclusively, and that instruction
  is limited to calling routines +/-2 Gig from the current code location.  To
  prevent out-of-range issues, I decided to separate code and data, placing all
  code within the lowest 2 Gig of memory, addresses 00000000-7FFFFFFF.  The
  compiler and [C:/Kernel/Hash1b.CPP.Z,423] Load()er allocate memory from the
  code heap to store code and glbl vars, unless the compiler option
  [C:/Kernel/Adam1a.HPP.Z,1469] OPTf_GLBLS_ON_DATA_HEAP is used.  When programs
  call [C:/Kernel/Mem1b.CPP.Z,373] MAlloc() is from the data heap, which in not
  limited in size, except by physical RAM memory.  You can allocate from any
  heap in any task at any time on any core, even making
  [C:/Kernel/Mem1a.CPP.Z,191] independent heaps.
+] Parent, Child and PopUp Tasks
  Often a task will [C:/Kernel/Task1a.CPP.Z,216] Spawn() or
  [C:/Kernel/SrvCmd.CPP.Z,384] PopUp() a task as a helper.  The helper is known
  as a child Task, though you can [C:/Kernel/Task1a.CPP.Z,216] Spawn a task and
  assign it a different parent... like Adam.  Links are kept as to who's who's
  child, so when one task is [C:/Kernel/Task1a.CPP.Z,28] Kill()ed the child
  helper tasks die, too.  You can get a report of current system tasks with
  [C:/Adam/Utils2a.CPP.Z,317] TaskRep().  There is just one window per task, so
  child tasks are needed for pop-ups.
+] HolyC
  [C:/Doc/HolyC.TXT.Z,1] HolyC is more than C and less than C++.  It has the
  default args of C++ and uses class in place of struct.  It uses
  U0,U8,U16,U32,I64 and I0,I8,I16,I32,I64 for signed and unsigned integers.  It
  has different [C:/Doc/HolyC.TXT.Z,1] operator precedence.  It has PASCAL-like
  function calls with no parens, but requires an & when referring to function
  addresses.
+] AOT Compile Mode
  Ahead-of-Time compiling is conventional compilation mode.  Do not use AOT,
  use JIT compiling.

In AOT mode, .PRJ files are compiled to .BIN files, skipping .OBJ files. 
  After compiling, .BIN files are [C:/Kernel/Hash1b.CPP.Z,423] Load()ed.

There is no main() routine.  Instead, statements outside functions are
  automatically executed upon loading.  There is no way to unload except by
  killing the task.  To invoke AOT Compiled Mode,
  [C:/Compiler/CmpMain.CPP.Z,432] Cmp() is used.  The Kernel module and
  compiler are made in AOT compiled mode.  See [C:/Adam/Boot/InsBoot.CPP.Z,130]
  MakeOSDrvBootInstall()  which calls [C:/Adam/Boot/InsBoot.CPP.Z,117]
  MakeAll() where Kernel.BIN.C and Compiler.BIN.Z are created.
+] JIT Compile Mode
  In just-in-time mode, the compiler places code and data in memory allocated
  from the heap, incrementally, making them immediately ready for in-place
  execution.  This mode is used during cmd line operations.  When you #include
  a file, it is compiled function by function and code ends-up all over in the
  memory, at least in the first 2Gig of memory.  The
  [C:/Compiler/CmpMain.CPP.Z,627] ExeFile() routine is the same as #include but
  can be used in programs.  [C:/Compiler/CmpMain.CPP.Z,618] ExePrint() routine
  will compile and run a string.
+] Compiler Intermediate Code
  The compiler generates instructions one step before making actual assembly
  (machine) language instructions.  This code is reverse polish stack machine
  in nature and can be viewed with [C:/Compiler/ICLCC.CPP.Z,21] OTrace().  The
  compiler does not interpret code, except in the process of optimization to
  make the final machine code.  Assembly language output can be viewed when
  code is compiled with the [C:/Compiler/ICLCC.CPP.Z,33] CTrace(), or,
  afterward, with [C:/Compiler/Unassembler.CPP.Z,636] U() or
  [C:/Adam/Dbg2a.CPP.Z,249] Uf("").
+] Drive/Partition
  There is no distinction between drive or partition.  They are specified
  with a single letter from A-Z.

':' is the boot drive.

For commands taking a drive letter as an argument, char 0 is the current
  drive.
[AutoFile,1] AutoFile
[Bit,1] Bt, Bts, Btr, Btc, BEqu
[Define,1] Define
[C:/Doc/DolDocOverview.TXT.Z,1] DolDoc
[C:/Adam/DolDoc/Doc.CPP.Z,32] Editor Link Types
[C:/Doc/FileUtils.TXT.Z,1] files_find_mask
[Hash,1] Hash Table
[C:/Doc/RedSea.TXT.Z,1] RedSea File System
[Graphics/Sprite,1] Sprite
+] CLI, STI, PUSHFD, POPFD
  These are x86 assembly instructions.
CLI disable interrupts.
STI enable interrupts.
PUSHFD pushes the CPU flags.
POPFD pops the CPU flags.
+] Filename Extention Types
  *.???.Z
  These files are automatically compressed or uncompresses files when read or
  written.
*.???.C
  Contiguous files--NOT compressed.
*.TXT.Z;*.TXT;*.LOG.Z;*.LOG
  Text Files
*.CPP.Z;*.CPP
  HolyC src files.  The default HolyC compiler type is .CPP.Z.
*.PRJ.Z;*.PRJ
  HolyC src files to be compiled AOT.
*.HPP.Z;*.HPP
  HolyC src header files.
*.MAP.Z;*.MAP
  Compiler "map" files
*.BIN.Z;*.BIN.C;*.BIN
  Binary executable files, created by [C:/Compiler/CmpMain.CPP.Z,432] Cmp()
  and read by [C:/Kernel/Hash1b.CPP.Z,423] Load().
*.DAT.Z;*.DAT
  Data files
*.ISO
  CD-ROM image file--ISO9660.
*.AUT.Z;*.AUT
  AutoFile Basically a HolyC program who's stdout goes to the input of a task
  when [C:/Kernel/SrvCmd.CPP.Z,487] AutoFile() is called.
*.GRA.Z;*.GRA
  Graphics file

[C:/Kernel/Adam1a.HPP.Z,2194] FILEMASK_TXT
[C:/Kernel/Adam1a.HPP.Z,2193] FILEMASK_SRC
[C:/Kernel/Adam1a.HPP.Z,2192] FILEMASK_AOT
[C:/Kernel/Adam1a.HPP.Z,2191] FILEMASK_JIT
[C:/Kernel/Adam1a.HPP.Z,2195] FILEMASK_GRA
+] Naming Convention
  Since there are no namespaces and I don't plan to implement name spaces, I
  highly recommend putting a 2-3 character module code prefix on syms. e.g. WS,
  Doc, Lex

ALL_CAPS
  Assembly Language labels are capitalized with underscores between words. 
  So are #define's.

_ALL_CAPS
  Asm routines which are [C:/Doc/HolyC.TXT.Z,1] HolyC callible should have a
  leading underscore.

MixedCaps
  [C:/Doc/HolyC.TXT.Z,1] HolyC Functions and class names are MixedCaps.

lower_case
  Local function vars and glbl vars are lower case.  Class member names are
  also lower_case.

_lower_case
  Function args which are outputs (passed as ptrs) have leading underscores. 
  Also, args which have identically named local variable counterparts have
  leading underscores. 

DOCf_????
  Flags bit nums instead of bit values are designated with a lower case f.

DOCG_????
  Flag groups are designated with "G".

result is reserved for local variables that hold the function return val.

* I used C++ like naming.  I place New, Del, Init, Rst, ect. on the end of a
  function name instead of at the beginning.  RstMusicSettings should be
  MusicSettingsRst.
+] Fs
  The CPU FS segment reg.  This reg points to the current task's
  [C:/Kernel/Adam1a.HPP.Z,3216] CTask.
+] Gs
  The CPU GS segment reg.  This reg points to the current core's
  [C:/Kernel/Adam1a.HPP.Z,3341] CCPU.
+] Heap
  Programs can dynamically request chunks of memory allocated from a heap
  using [C:/Kernel/Mem1b.CPP.Z,373] MAlloc().  They must
  [C:/Kernel/Mem1b.CPP.Z,369] Free() it when finished.  Ptrs are used to refer
  to the chunk.  The heap is dynamically allocated mem.
+] Root
  The base of a binary tree or the head of a queue is the root.  (I don't
  like the word head.)
+] Join
  When two parts of a program have a common low-level routine, that routine
  is often labeled SomethingJoin.
+] user_data
  Many operating system structures have space set aside for you to store
  values.  You are on your own managing these with multiple applications and
  libraries.
+] Multicore BSP/AP Processors
  The boot-strap processor is core#0, has the Adam task, and it is the
  master.  The application processors have Seth tasks and are the slave
  processors.  Only the BSP core#0 processor's tasks can have windows.  More or
  less, applications are launched exclusively from the BSP processor.  It is
  the master.  The only way slave cores get used is if the application
  explicitly [C:/Kernel/Task1a.CPP.Z,216] Spawns() a task on them or
  [C:/Kernel/MultiProc.CPP.Z,232] JobQue() a job on them.


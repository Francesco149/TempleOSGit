                              Debugging Overview

* You can enter the debugger with [C:/Kernel/KDbg.HC.Z,649] Dbg() or
<CTRL-ALT-d>.  You might enter the 
debugger through a fault.  Enter [C:/Kernel/KDbg.HC.Z,444] G() or
[C:/Kernel/KDbg.HC.Z,469] G2() to continue execution.  Place a 
call to [C:/Kernel/KDbg.HC.Z,649] Dbg() in your code at fatal error points to
enter the debugger.  If 
you see a stk dump, record the label+offset and unassemble,
[C:/Compiler/UAsm.HC.Z,653] U(). [C:/Compiler/UAsm.HC.Z,653]
U([C:/Kernel/KernelA.HH.Z,3419] _RIP); 

* [C:/Compiler/UAsm.HC.Z,653] U(&FunName+offset) to unassemble mem or
[C:/Adam/ADbg.HC.Z,254] Uf("FunName") to unassemble a 
function. [C:/Compiler/UAsm.HC.Z,653] U([C:/Kernel/KernelA.HH.Z,3419]
_RIP-16);

* While debugging, you specify addresses of assembly routines with just the 
label, as in _MALLOC+0x20.  You specify [C:/Doc/HolyC.DD.Z,1] HolyC function
names with & before 
functions as in &Print+0x10.

* I use [C:/Kernel/KernelB.HH.Z,209] progress1-[C:/Kernel/KernelB.HH.Z,227]
progress4 for debugging because they show on the wallpaper.  
They're just global int vars.

* You can use [C:/Kernel/Job.HC.Z,423] AdamLog() to send text to the
[C:/Doc/Glossary.DD.Z,1] Adam Task window.  It works like 
[C:/Kernel/StrPrint.HC.Z,890] Print().  I never use that.  Instead, I use
[C:/Kernel/KDbg.HC.Z,217] RawPrint().

* [C:/Kernel/KDbg.HC.Z,172] D(), [C:/Adam/DolDoc/DocPutS.HC.Z,325] DocD(),
[C:/Kernel/KDbg.HC.Z,234] RawD() to do 16 column hex dump mem with numbering
from zero.  
With [C:/Adam/DolDoc/DocPutS.HC.Z,325] DocD the values are updated
continually and you can alter mem by editing.

* [C:/Kernel/KDbg.HC.Z,204] Dm(), [C:/Adam/DolDoc/DocPutS.HC.Z,312] DocDm(),
[C:/Kernel/KDbg.HC.Z,250] RawDm() to do 16 column hex dump mem with addresses
showing.

* [C:/Kernel/KDbg.HC.Z,209] Da() to do one column address dump (for stk,
etc.) with symbolic addresses.

* [C:/Kernel/KDbg.HC.Z,328] Dr() dumps regs.  You can display and modify regs
in the debugger with 
var-like labels, _RAX, _RBX, etc.

* [C:/Adam/ADbg.HC.Z,161] ClassRep() and the dynamic version
[C:/Adam/ADbg.HC.Z,183] ClassRepD() can be used to dump 
structures.

* [C:/Adam/Opt/Utils/Profiler.HC.Z,27] Prof() and
[C:/Adam/Opt/Utils/Profiler.HC.Z,57] ProfRep() provide code profiling.  See 
[C:/Demo/InFile/InProfile.IN,1] (This is an [C:/Doc/Glossary.DD.Z,1] InFile.)

* Use [C:/Kernel/KDbg.HC.Z,217] RawPrint() to print debug info bypassing the
window framework.  You pass 
these routines a count in milliseconds for how long it should be displayed.  
You can use [C:/Kernel/KMisc.HC.Z,271] Raw(TRUE) to make all output bypass
the window framework.  The Win
Mgr runs on Core0 and will overwrite raw text from other cores when it
updates 
the scrn.

* Use [C:/Kernel/KMisc.HC.Z,261] SysDbg() to set a flag which you can read
with [C:/Kernel/KMisc.HC.Z,266] IsSysDbg() when you wish 
to trigger some debug activity.  It's just a handy simple flag, nothing fancy.

* There are flags for various trace options that can help debugging when
there 
are compiler bugs.  Often, you place them in #exe{} blocks.
  
[C:/Compiler/CMisc.HC.Z,63] Echo() turns on or off raw data going into the
  lexical analyzer.

[C:/Compiler/CMisc.HC.Z,58] Trace() unassembles code generated from the HolyC
  compiler.

[C:/Compiler/CMisc.HC.Z,50] PassTrace() shows intermediate code coming-out
  after optimization.  The bits 
ctrl which passes are displayed.


* There is a heap check utility which can find leaks.  Use
[C:/Adam/Opt/Utils/HeapLog.HC.Z,73] HeapLog(), 
[C:/Adam/Opt/Utils/HeapLog.HC.Z,115] HeapLogAddrRep() and
[C:/Adam/Opt/Utils/HeapLog.HC.Z,146] HeapLogSizeRep().  It's a really simple
program which 
intercepts [C:/Kernel/Mem/MAllocFree.HC.Z,387] MAlloc() and
[C:/Kernel/Mem/MAllocFree.HC.Z,383] Free().  You can customize the code to
find other heap 
issues.

* You can define hndlr functions for <CTRL-ALT-letter> keys with
[C:/Kernel/KeyDev.HC.Z,178] CtrlAltCBSet(
).  They operate either in a interrupt environment or in the window mgr when 
it queues kbd msgs.  You can do [C:/Kernel/KMisc.HC.Z,271] Raw() output. 
<CTRL-ALT-letter> hndlrs take a 
scan_code as an arg.

* If you recompile Kernel with [C:/Adam/Opt/Boot/BootHDIns.HC.Z,18]
BootHDIns(), you can set the MemInit, option to 
initialize memory to a value at boot, the HeapInit option to cause mem
alloced 
off the heap to be initialized or VarInit option so both global and local
vars 
will be initialized to a value, but global AOT variables are always zero if 
not initialized.  Pick a non-zero value to discover uninitialized var bugs.  
You can set [C:/Kernel/KernelB.HH.Z,186] sys_var_init_flag, and
[C:/Kernel/KernelB.HH.Z,181] sys_heap_init_flag directly after booting.

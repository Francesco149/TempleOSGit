[C:/Kernel/KernelA.HH.Z,3640] CDC's have a 4x4 matrix for rotating, scaling,
skewing and shifting in 3 
dimensions.  To make the graphics routines use the transform, you must set
the 
[C:/Kernel/KernelA.HH.Z,3610] DCF_TRANSFORMATION flag.

The matrix consists of ints that have been scaled 32 bits
([C:/Adam/Gr/GrDC.HC.Z,4] GR_SCALE).  See 
[C:/Demo/Lectures/FixedPoint.HC.Z,1] to learn why.

See [C:/Adam/Gr/GrDC.HC.Z,24] Mat4x4IdentEqu(), [C:/Adam/Gr/GrDC.HC.Z,34]
Mat4x4IdentNew(), [C:/Adam/Gr/GrMath.HC.Z,102] Mat4x4Equ() and
[C:/Adam/Gr/GrMath.HC.Z,108] Mat4x4New().  See 
[C:/Adam/Gr/GrMath.HC.Z,113] Mat4x4RotX(), [C:/Adam/Gr/GrMath.HC.Z,127]
Mat4x4RotY(), [C:/Adam/Gr/GrMath.HC.Z,141] Mat4x4RotZ() and
[C:/Adam/Gr/GrMath.HC.Z,155] Mat4x4Scale() to rotate about 
axes and scale.  Combine them with [C:/Adam/Gr/GrMath.HC.Z,80]
Mat4x4MulMat4x4Equ()/[C:/Adam/Gr/GrMath.HC.Z,96] Mat4x4MulMat4x4New() 
and assign them to the [C:/Kernel/KernelA.HH.Z,3640] CDC.dc with
[C:/Adam/Gr/GrDC.HC.Z,47] DCMat4x4Set().  See 
[C:/Demo/Graphics/Box.HC.Z,1].

You can rotate single points using [C:/Adam/Gr/GrDC.HC.Z,6] Mat4x4MulXYZ().

The 4th dimension allows a neat trick where you can place pos shifts 
(translations), into the matrix and [C:/Adam/Gr/GrMath.HC.Z,80]
Mat4x4MulMat4x4Equ/[C:/Adam/Gr/GrMath.HC.Z,96] Mat4x4MulMat4x4New them 
to combine rotation/shift operations.  Normally, you can't combine pos shift 
operations.  See [C:/Adam/Gr/GrMath.HC.Z,176] Mat4x4TranslationEqu() and
[C:/Demo/Graphics/Transform.HC.Z,1].

Finally, [C:/Kernel/KernelA.HH.Z,3640] CDC's have an x, y and z which is an
additional shift (translation).

The transformation is implemented as a callback on the
[C:/Kernel/KernelA.HH.Z,3640] CDC's transform() 
member.  The default transform() callback is [C:/Adam/Gr/GrDC.HC.Z,15]
DCTransform().  See 
[C:/Demo/Games/Talons.HC.Z,1] or [C:/Demo/Games/CastleFrankenstein.HC.Z,1] to
see how to 
change the transform() callback for foreshortening.

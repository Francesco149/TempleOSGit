                                     Tips

* Turn-off or reboot (<CTRL-ALT-DEL>) at any time, except during disk writes.
 
Writes are not cached. 

* Use [C:/Kernel/KMathB.HC.Z,147] Seed() and the cmd line to switch
[C:/Kernel/KMathB.HC.Z,137] Rand() to non-timer mode and replay 
games you like.

* 64-bit values are most efficient for the compiler.

* See Key Map
`KeyMap;View;
`
 for a list of defined keys.  Define your own keys in
[C:/Home/HomeKeyPlugIns.HC.Z,11] MyPutKey(). 
 See [Keyboard Devices/System,1] Keyboard Devices.

* <ALT-m> maximizes a window.  <ALT-SHIFT-w> closes AutoComplete.  <ALT-w> 
brings back AutoComplete.  <ALT-v> vertically tiles windows.  <ALT-h> 
horizontally tiles windows.  The ALT keys are defined in
[C:/Home/HomeKeyPlugIns.HC,1].  
You can customize them.

* If you make changes to TempleOS files in your /Home directory, generally
you 
reboot to make them take effect.  (You don't compile anything.)  You should 
have two TempleOS partitions on your hard drive because a syntax error in a 
start-up file will make the partition unbootable.  Boot to the second 
partition or boot to a standard TempleOS CD/DVD and use
[C:/Adam/ABlkDev/Mount.HC.Z,138] Mount() to mount your 
hard drive.

* I copy my files to a mirrored ident partition, periodically with
[C:/Adam/ABlkDev/ADskA.HC.Z,122] CopyTree() 
commands in scripts.  I do merge commands with a menu entry like this:
Merge(\"C:/*\",\"D:/*\",\"+r+d\"); to check my changes.

* <CTRL-m> at the cmd line to access your PersonalMenu.  Place macros there 
with <CTRL-l>, or icon-like sprites with <CTRL-r>.  Use the Pop-Up option on 
macros to [C:/Kernel/KTask.HC.Z,242] Spawn() a task to run a file.  It dies
when it is finished.  This 
returns mem to the system.  Be sure to press <CTRL-s> to save your macro/menu 
area after making changes.

* You can use ans in cmd line expressions.  It holds the res the last cmd
line 
operation.  You can use the cmd prompt as a calculator by just entering 
expressions like 1+2*3;.  F64 ress can be accessed with ansf.

* Use the PullDown menu at the top of the scrn to learn commands, or for 
finding the keyboard controls to games.

* You can adjust the mouse movement rate by setting global vars in your 
start-up file.  See [C:/Home/HomeLocalize.HC,1] mouse scale.

* You can set your local time zone by setting the [C:/Kernel/KGlbls.HC.Z,14]
local_time_offset global var 
in a start-up file.  It's units are [C:/Kernel/KernelA.HH.Z,571] CDATE_FREQ. 
See [C:/Home/HomeLocalize.HC,1] local time.

* <CTRL-SHIFT-L> in the editor to reindent a [C:/Doc/HolyC.DD.Z,1] HolyC
function or renumber an asm 
routine's local labels.

* You can use filter_lines in the editor text search form (<CTRL-f>) to 
temporarily display just lines near each match.  A value of filter lines set 
to 5 will display lines within 5 lines of matches.  Then, you can do another 
find to a different string and achieve a AND search.  When finished, press <ES
C>.
 
* You can recompile and reinstall the kernel with
[C:/Adam/Opt/Boot/BootHDIns.HC.Z,18] BootHDIns().  You'll 
probably want to make a function for recompiling that uses the
[C:/Kernel/Job.HC.Z,482] In() function 
to answer the cfg questions.  See my technique
[C:/Demo/AcctExample/TOS/TOSCfg.HC.Z,1] Cfg Strs,
[C:/Demo/AcctExample/TOS/TOSDistro.HC.Z,1] Update Funs.

* [C:/Kernel/Mem/MemPhysical.HC.Z,169]
Scale2Mem(min,max,limit=2*1024*1024*1024) can be used for cfg questions when 
recompiling.  The [C:/Adam/Opt/Boot/BootHDIns.HC.Z,18] BootHDIns() cfg
prompts accept expressions, not just 
numbers.  The dft disk cache is Scale2Mem(0x80000,0x8000000).

* You can permanently disable AutoComplete commenting-out
[D:/Home/HomeSys.HC,1] ACInit() in 
[D:/Home/HomeSys.HC,1] ~/HomeSys.HC.

* Boolean expressions **not** in if stmts don't have short circuit logic and
are 
compiled inefficiently.

* You can use [C:/Kernel/KernelB.HH.Z,209]
progress1-[C:/Kernel/KernelB.HH.Z,227] progress4 in your programs for
whatever you like.  
They're just global vars that are shown on the wallpaper.  The original
intent 
was to indicate how far along operations were.  There's no coordination, so 
different apps might interfere.  I use them most for debugging--just values 
easily viewed.  See [C:/Demo/Progress.HC.Z,1].

* Use [C:/Adam/DolDoc/DocRecalcLib.HC.Z,176] DocMax() to adjust the size of
the cmd line buf.  It counts [C:/Kernel/KernelA.HH.Z,1367] CDoc 
entries, not lines.

* Many data structures have a user_data member.  Those are available for you 
to store a data item, for convenience.  [C:/Kernel/KernelA.HH.Z,3312] CTask,
[C:/Kernel/KernelA.HH.Z,1191] CDocEntry and [C:/Kernel/KernelA.HH.Z,2561]
CDirEntry have 
them.  You shouldn't encounter conflicts with TempleOS using them.

* If, for some strange reason, you wanted to reduce mem usage, make a smaller 
disk cache when you recompile the kernel; disabling AutoComplete; Specify 
smaller stk sizes when doing [C:/Kernel/KTask.HC.Z,242] Spawn(), chang
[C:/Kernel/KernelA.HH.Z,2884] MEM_DFT_STK, and using
[C:/Adam/DolDoc/DocRecalcLib.HC.Z,176] DocMax() to 
reduce the cmd line buffer size.

* Filenames ending in ".Z" will be automatically compressed and uncompressed 
when read or written.  The compression method is not supported by other 
operating systems.  You can store files uncompressed by
[C:/Adam/ABlkDev/ADskA.HC.Z,94] Move()ing them to a 
filename not ending in ".Z".  See [C:/Doc/TOSZ.DD.Z,1] if you want to
uncompress 
while in Linux.

* [C:/Adam/Opt/Utils/Merge.HC.Z,37] Merge() can be used to see what's
changed.  The +d flag will show 
differences of files which have changed and allow you to merge code.  (The +r 
flag will recurse.)

* There is a utility [C:/Adam/Opt/Utils/LinkChk.HC.Z,47] LinkChk() which will
check for broken links in 
documentation.

* You can use [C:/Compiler/CMisc.HC.Z,1] Option([C:/Kernel/KernelA.HH.Z,1549]
OPTf_WARN_PAREN,ON) to find unnecessary parentheses in 
code.

* You can use [C:/Compiler/CMisc.HC.Z,1] Option([C:/Kernel/KernelA.HH.Z,1550]
OPTf_WARN_DUP_TYPES,ON) to find unnecessary local var 
type stmts.

* [C:/Compiler/CMisc.HC.Z,1] Option([C:/Kernel/KernelA.HH.Z,1546]
OPTf_ECHO,ON) can be placed in [C:/StartOS.HC.Z,1] StartOS.HC to echo
start-up scripts.

* Use [C:/Adam/DolDoc/DocEd.HC.Z,249] Plain() to edit a plain text file. 
You'll need this if your file has $'
s.  Use the [C:/Adam/Opt/Utils/ToDolDoc.HC.Z,3] ToDolDoc() utility to convert
plain text to DolDoc's by doubling $
's.

* Use [C:/Kernel/KMisc.HC.Z,251] Silent() to disable scrn text output.

* Grab-scroll any window at any time with {CTRL-LEFT-MOUSE-DRAG}.  Null 
grab-scrolling with {CTRL-RIGHT-MOUSE}.

* Use <CTRL-ALT-z> to zoom-in and <CTRL-ALT-SHIFT-Z> to zoom-out.  You can 
scroll by moving to the edge of the window.  Set [C:/Adam/Gr/GrGlbls.HC.Z,3]
gr.continuous_scroll to TRUE 
if you want. 

* Use <CTRL-ALT-g> and <CTRL-ALT-SHIFT-G> to display a grid on the scrn.

* Use <CTRL-ALT-a> to enter an extended ASCII char.

* Use <CTRL-ALT-f> to toggle between [C:/Kernel/FontStd.HC.Z,1] Std Font and
[C:/Kernel/FontCyrillic.HC.Z,1] Cyrillic Font.

* Use <CTRL-ALT-s> will capture the scrn as a sprite on the clip.  You can 
save the cmd line doc as text with <CTRL-a>.

* You can save a sprite as a .BMP file in <CTRL-r> on the Sprite BitMap Menu.

* You can eye-dropper colors in the <CTRL-r> sprite editor by pressing 'c'.  
Press 't' for transparent.

* There are handy functions--F(),R(),FD() and RD() which are defined in 
[C:/Home/HomeWrappers.HC,1].  You are encouraged to change them and add more.
 They will 
perform find-and-replace operations accross multiple files.  The +l flag is 
particularly useful since it limits to whole labels.  The +lb and +la flags 
limit to whole labels just before or after.  You are encouraged to add or 
modify handy wrapper functions to make cmd line operations easier.

* When using [C:/Adam/Opt/Utils/Find.HC.Z,145] Find() while modifying code,
work from the bottom-up so that line 
numbers are correct.  If you work top-down, then inserting or deleting lines 
causes the lower file links will be incorrect.

* You can save files after making changes, anytime you are within the editor, 
like when viewing help/macro files.  <CTRL-a> saves as, <CTRL-s> saves with 
the same name in the scrolling title bar.  Hitting <ESC> will exit and save.  
(<SHIFT-ESC> will abort).  You can save the cmd line window to a file, too, 
since you're actually in the editor when you're at the cmd line.

* When using <CTRL-l> to insert links in documents, you can usually leave the 
Tag Text blank and it will be filled-in automatically based on other entries.

* There is a feature of the precompiler that allows code to be executed in
the 
middle of compilation and data inserted into the compilation stream.  Click 
here for an example: [C:/Kernel/KMain.HC.Z,1] #exe {.

* If you output to the cmd line and wish to allow users to scroll around and 
view data, you can use [C:/Adam/DolDoc/DocEd.HC.Z,3] View().

* Use [C:/Adam/DolDoc/DocEd.HC.Z,3] View() in Pop-up macros to linger until
the user presses <ESC> or <SHIFT
-ESC>.

* You can access the word under the cursor at [C:/Kernel/KernelA.HH.Z,1496]
ac.cur_word.

* You can reactivate AutoComplete after closing it by pressing <CTRL-Fun Key> 
or <ALT-w> if you have it defined.

* <CTRL-SHIFT-T> to toggle to/from plain text just the
[C:/Kernel/KernelA.HH.Z,1367] CDoc cmd under the 
cursor.  See [C:/Demo/DolDoc/TextDemo.HC.Z,1].
 
* If you toggle to plain text when you are working with graphics in a 
document, you can add duplicate entries for sprites by entering a $SP...$ cmd 
with the same num.

* If you toggle to plain text when working with graphics, you can add a str
to 
the $SP...$ entry to keep track of it.  Try $SP,"<2>",BI=2$ where '2' is the 
sprite num.

* I use spaces-to-tab operations on all my src files to keep them small.  You 
have to be careful, though, because spaces in strings will be converted.  I 
use <SHIFT-SPACE> ' ' in such cases.  See
[C:/Adam/Opt/Utils/StrUtils.HC.Z,201] S2T() for spaces-to-tabs.

* You can edit an existing sprite by putting the cursor on it and pressing <CT
RL-r>.

* When editing a sprite, you can cut and paste the elements in the sidebar 
text list window.

* I recommend keeping CSprite in vect format until you are done creating
them, 
so you can edit the ctrl points.  Then, convert them to bitmaps, so the flood 
fills work well.  If you are doing interpolation, however, they must be vect.

* [C:/Adam/Gr/GrPrimatives.HC.Z,239] GrFloodFill() is slow. 
[C:/Adam/Gr/GrBitMap.HC.Z,954] GrRect() is fast.

* You can customize the wallpaper.  See
[C:/Demo/Graphics/WallPaperFish.HC.Z,1].

* Your RAM disks will not be reformated when you reboot if the memory
location 
has not changed and it finds the disk intacted.

* try{} catch{} in a function will cause all vars to be non-reg.

* Using a sub-int array, i.u8[3], for example, will force a local var to 
non-reg.

* You can delete the ~/Registry.HC.Z file.  The policy is that deleting it 
will restore defaults.  It is a text doc, if you want to edit it.  Be careful 
of tree indentations.

* Study [C:/Adam/Opt/Utils/MemRep.HC.Z,1] and [C:/Adam/WallPaper.HC.Z,18]
WallPaper() to learn how the system 
resources are put together.

* The editor's sel-text mechanism allows for disjoint portions of sel text.  
This is a feature, not a bug -- you can cut-and-paste disjoint text.

* [C:/Kernel/KernelA.HH.Z,557] cnts.time_stamp_freq is continuously
calibrated.  Be careful because 
expressions might decrease.  Take a snap-shot, like this:
timeout=[C:/Kernel/KernelB.HH.Z,292] GetTSC+
[C:/Kernel/KernelA.HH.Z,557] cnts.time_stamp_freq x seconds; and compare
against [C:/Kernel/KernelB.HH.Z,292] GetTSC().  I recommend 
just using [C:/Kernel/KMisc.HC.Z,122] tS or [C:/Kernel/KernelA.HH.Z,557]
cnts.jiffies.

* Use [C:/Adam/Opt/Utils/HeapLog.HC.Z,73] HeapLog(),
[C:/Adam/Opt/Utils/HeapLog.HC.Z,115] HeapLogAddrRep() and
[C:/Adam/Opt/Utils/HeapLog.HC.Z,146] HeapLogSizeRep() to find leaks.  Don't 
be confused by [C:/Kernel/KernelA.HH.Z,1367] CDoc allocations.  Those are
generated when text is written to 
the cmd line buffer.

* For advanced heap debugging, play with [C:/Kernel/KernelA.HH.Z,2814]
_CFG_HEAP_DBG.  You're on your own.

* You can use [C:/Adam/DolDoc/DocFile.HC.Z,332] Type() to display .BMP or .GR
files.

* Use [C:/Kernel/FunSeg.HC.Z,346] Man() to jump to short sym name src code.

* Use [C:/Kernel/EdLite.HC.Z,337] Fix() to edit and fix the last compiler err.

* You can use <CTRL-SHIFT-L> to do a check for compile errors.

* You can use [C:/Adam/Opt/Utils/DocUtils.HC.Z,148] DocOpt() to optimize
links. (Mostly just removes .Z)

* [C:/Adam/Opt/Utils/Diff.HC.Z,320] ZipRep() can highlight src files with
lots of redundancy.

* With start/end, common trailing code is fast.  Common leading code is slow.

* The first line of the Psalmody
`#include "::/Apps/Psalmody/Run"
`
 [C:/Doc/HolyC.DD.Z,1] HolyC song files is a comment with a category 
recognized by [C:/Apps/Psalmody/JukeBox.HC.Z,1] JukeBox().  The categories
are "no nothing", "has words", "has 
graphics", or "special".  The third character in the song comment is a digit 
rating number, shown in [C:/Apps/Psalmody/JukeBox.HC.Z,1] JukeBox().  You can
set the song rating in [C:/Apps/Psalmody/JukeBox.HC.Z,1] JukeBox() 
by pressing 0-9.  You can press <DEL> to delete songs.


* "Linux" is a trademark owned by Linus Torvalds.

                             Directory Structure

/Home All your user data should be placed in here to ease backing-up your 
data.  When you install an application it will create a subdirectory of your /
Home directory for storage.

/Apps Applications are placed in subdirectories of /Apps.  Applications
should 
have a file called Install.CPP.Z which will install the app for the current 
user acct.  The file, Load.CPP.Z will load the application into mem.  The 
file, Run.CPP.Z, will usually load and execute the app.  To add an app to
your 
PersonalMenu, use <CTRL-l>, insert a macro with the PopUp option checked and 
invoke the Run.CPP.Z file.

/Demo Here you can find lots of sample code to do various things.

/Doc Here you can find documentation.

/Kernel The core of the operating system is found here.  Since priviledge 
levels are not used, calling it a kernel is deceptive.  It is AOT compiled by 
[C:/Adam/Boot/BootIns.CPP.Z,24] MakeOSDrvBootInstall().  It is loaded by the
boot loader and must fit in 640K.

/Compiler The compiler module src code is found here.  The compiler is AOT 
compiled to produce a binary file which is loaded at boot.  It, too, is AOT 
compiled by [C:/Adam/Boot/BootIns.CPP.Z,24] MakeOSDrvBootInstall().

/Adam The non-kernel part of the operating system is found here.  It is JIT 
compiled during boot.



                                ::/Home Files

An empty ::/Home directory should be valid because it will get default files 
from the root directory. 

[C:/Home/PersonalMenu.TXT,1] a menu viewed with the <CTRL-m> key or by
clicking "M
ENU" in the upper left border area of a window.

[C:/Home/PersonalNotes.TXT,1] a personal note file viewed with the
<CTRL-SHIFT-M> 
key.

::/Home/Adam* Copy Adam* files from the root into ::/Home and customize them.
 
These files are invoked when the adam task starts-up.

[C:/Home/DoOnce.CPP,1] a file invoked at the start-up of the first user.  
Customize this!

[C:/Home/Registry.CPP.Z,1] can be edited by hand or deleted to reset to
defaults.  
Takes affect next boot.



                             Application Policies

* Place applications in their own /Apps subdirectory.

* Make a file called Load.CPP.Z to load the application.

* Make a file called Run.CPP.Z to load and run the application, preferable by 
#includeing the Load.CPP.Z file.

* Place user data in a subdirectory of /Home, preferably naming the 
subdirectory the same as the /Apps subdirectory.  Or, place data in the Regist
ry.CPP.Z file.  See [C:/Demo/RegistryDemo.CPP.Z,1].

* If the app needs files in the /Home directory, make an /Apps file called Ins
tall.CPP.Z or Install.AUT.Z to create the /Home subdirectory.

 

                            Programming Guidelines

* Virtual mem/Paging is not used -- it is identity mapped in x86_64 mode. 
The 
stk does not grow, so alloc enough when the task (process) is
[C:/Kernel/Task.CPP.Z,207] Spawned and use 
the heap for most things.  (The heap refers to [C:/Kernel/MemB.CPP.Z,373]
MAlloc() and [C:/Kernel/MemB.CPP.Z,369] Free().)

* See [C:/Doc/Glossary.TXT.Z,1] Naming Convention and
[C:/Doc/Glossary.TXT.Z,1] Abbreviations.

* There are two modes of compiling, [C:/Doc/Glossary.TXT.Z,1] AOT Compile
Mode and [C:/Doc/Glossary.TXT.Z,1] JIT Compile Mode.  
Compilation is done in both -- neither is "interpreted".  Use
[C:/Doc/Glossary.TXT.Z,1] JIT Mode.

* [C:/Doc/HolyC.TXT.Z,1] HolyC

* Use I64 instead of smaller int sizes because the compiler converts 
everything to 64-bit.  Don't use unsigned unless it actually breaks.  A
policy 
of signed keeps it simple so you don't have to agonize over choices.

* In-order, short circuit logic is used, in fact required.

* Avoid boolean expression assignments.  Boolean assignments don't have short 
circuit logic and are not compiled efficiently.  The Bool type is just an 
alias for a 1 byte signed int -- nothing forces it to 1 or 0.  There is a 
[C:/Kernel/KernelB.HPP.Z,88] ToBool() function that will for to 1 ot 0,
however.

* If you use floats in your interrupt routine, save and restore the fpu state 
with [C:/Kernel/KernelB.HPP.Z,102] Fxsave() and [C:/Kernel/KernelB.HPP.Z,101]
Fxrstor().  The timer interrupt does this.  The keyboard and 
mouse don't use floats.

* Bracketing code with PUSHFD CLI and POPFD will protect against simultaneous 
accesses from tasks on _one_ core.  To protect against multiple cores, you
need 
a locked semaphore.  I think semiphores need to be in their own cache line, 
but I'm not sure.  I use lock bits in a lot of places not aligned.

* [C:/Kernel/KMisc.CPP.Z,238] SysDbg() and [C:/Kernel/KMisc.CPP.Z,243]
IsSysDbg() are really handy when working on the compiler or 
kernel.  It's just a bit you can set and test.

* I don't use U0 * because the size is zero for ptr arithmetic.

* Use [C:/Kernel/KernelA.HPP.Z,3413] CH_SHIFT_SPACE for spaces in quotes in
source code because I run 
[C:/Adam/Utils/S2T.CPP.Z,1] Spaces-to-Tabs on source code.



                               Hash Sym Tables

* See [C:/Adam/AHash.CPP.Z,1] for examples of how the hash tables are set-up.
 
Basically, syms are placed into hash tables and child process hash tables are 
chained to parents.  This provides scopes for vars and functions.

* adam_task->hash_table holds the [C:/Doc/HolyC.TXT.Z,1] HolyC syms loaded in
on start-up.

* Fs->hash_table holds user HolyC syms and if a sym is not found, it checks 
parents.  When a duplicate sym is added to the table, it overshadows the 
previous sym.  When developing software, typically you include the file at
the 
cmd prompt, make changes and reinclude it.  Old syms are overshadowed but
they 
are still there.  Periodically, kill the TASK and start fresh when mem is
low. 
 If you wish your applications to free themselves instead of staying in mem, 
spawn or [C:/Kernel/SrvCmd.CPP.Z,384] PopUp() a task to run the application
and kill it when it's done.

* To display the contents of a hash table, use the [C:/Adam/AHash.CPP.Z,143]
Who() routine or the 
varients.  [C:/Adam/AHash.CPP.Z,373] HashDepthRep() gives a histogram  of how
long the chains are, in 
case you wish to make hash table sizes bigger.



                              Assembly Language

* FS must always point to the cur [C:/Kernel/KernelA.HPP.Z,3212] CTask.

* GS must always point to the cur [C:/Kernel/KernelA.HPP.Z,3337] CCPU.

* Don't change the segment regs unless interrupts are off.  It's hard to do, 
anyway.  [C:/Kernel/KUtils.CPP.Z,447] SET_FS_BASE and
[C:/Kernel/KUtils.CPP.Z,435] SET_GS_BASE.

* When interacting with [C:/Doc/HolyC.TXT.Z,1] HolyC compiled code, preserve
RBP, RSI, RDI, R10-R15 
because the compiler uses these for reg vars.  You are free to clobber RAX, 
RBX, RCX, RDX, R8 and R9.  See [C:/Kernel/KernelA.HPP.Z,1695] Compiler Reg
Masks, [C:/Kernel/KernelA.HPP.Z,1671] PUSH_C_REGS and
[C:/Kernel/KernelA.HPP.Z,1672] POP_C_REGS

* I recommend using the standard stk frame for functions because
[C:/Kernel/KDbg.CPP.Z,59] Caller() is 
used to display the call stk, such as for the wallpaper.
	PUSH	RBP
	MOV	RBP,RSP
	SUB	RSP,nnnn
...
	LEAVE
	RET

* The args are removed from the stack with RET1 statements.

	RET1	16	//remove two args

* No args are passed in regs.

* RAX holds function return values, of course.

The editor mostly stays in a [C:/Kernel/KbdMouse/Message.CPP.Z,146]
GetKey()/[C:/Kernel/KeyDev.CPP.Z,1] PutKey() loop.  The putkey portion is 
where keys are acted-upon.  TempleOS has a chain of putkey handlers in a 
[Circular Queue,1] Circular Queue with priorities.  The highest priority
handlers can choose to 
terminate handling, otherwise, the keys get sent on down the chain.

[C:/Kernel/KeyDev.CPP.Z,67] KeyDevAdd() defines a putkey device with a
priority.  "Device" might be a 
misnomer.  Currently, the following are defined:

Priority    Handler
---------- ---------
0x20000000 [C:/Home/AdamKeyPlugIns.CPP.Z,11] MyPutKey() user handler
0x40000000 [C:/Kernel/KeyDev.CPP.Z,113] KDInputFilterPutKey() for
[C:/Kernel/SrvCmd.CPP.Z,496] Auto(), [C:/Kernel/SrvCmd.CPP.Z,478] AutoStr(),
and [C:/Kernel/SrvCmd.CPP.Z,488] AutoFile() 
handling.
0x60000000 [C:/Kernel/KeyDev.CPP.Z,93] KDRawPutKey() nonwindowed direct to
video mem debug output. 
0x80000000 [C:/Adam/DolDoc/DocEdB.CPP.Z,675] KDDocPutKey() standard document
cmds

Since handling individual keys is slow, TempleOS supports PutS() as well.  If 
no puts handler is defined, individual keys are sent.

[C:/Kernel/KernelA.HPP.Z,1323] CDoc.user_put_key and
[C:/Kernel/KernelA.HPP.Z,1323] CDoc.user_put_s are call back routines which
offer some 
neat tricks.  See [C:/Apps/Psalmody/JukeBox.CPP.Z,1].  There is a var
[C:/Kernel/KernelA.HPP.Z,1323] CDoc.user_put_
data which gets passed to them.

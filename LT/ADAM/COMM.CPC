#define UART_THR		0
#define UART_RDR		0
#define UART_BRDL		0
#define UART_IER		1
#define UART_BRDH		1
#define UART_IIR		2
#define UART_LCR		3
#define UART_MCR		4
#define UART_LSR		5
#define UART_MSR		6


U4 comm_base[5];
comm_base[1]=0x3F8;
comm_base[2]=0x2F8;
comm_base[3]=0x3E8;
comm_base[4]=0x2E8;

U1Fifo *comm_fifos[5];
MemSet(comm_fifos,0,5*sizeof(U4));

public void CommOpen8N1(U8 port=1,U8 baud=115200)
{
  U8 old_flags=GetFlags,base=comm_base[port];
  Cli;
  if (comm_fifos[port])
    DelU1Fifo(comm_fifos[port]);
  comm_fifos[port]=NewU1Fifo(256);
  OutP(base+UART_LCR,0);     //Set for IER
  OutP(base+UART_IER,0);
  OutP(base+UART_LCR,0x80);  //Enable baud rate control
  OutP(base+UART_BRDL,(0x180/(baud/300)) & 0xFF); //LSB
  OutP(base+UART_BRDH,(0x180/(baud/300)) / 256);  //MSB
  OutP(base+UART_LCR,3);     // 8-none-1

  InP(base+UART_RDR);  //read garbage
  InP(base+UART_LSR);

  OutP(base+UART_MCR,4);
  OutP(base+UART_IER,0);     //DIsable all IRQ
  OutP(base+UART_MCR,0xA);	 //out2 and rts
  OutP(base+UART_IER,1);	 //Enable RX IRQ
  SetFlags(old_flags);
}

public void CommClose(U8 port)
{
  U8 base=comm_base[port];
  OutP(base+UART_LCR,0);     //Set for IER
  OutP(base+UART_IER,0);
  if (comm_fifos[port])  //Uncertain:Might get RX IRQ
    DelU1Fifo(comm_fifos[port]);
}

public void CommPutChar(U8 port,U1 b)
{
  U8 base=comm_base[port];
  while (!(InP(base+UART_LSR) & 0x20))
    SwapInNext;
  OutP(base+UART_THR,b);
  while (!(InP(base+UART_LSR) & 0x20))
    SwapInNext;
}


public void CommPrintF(U8 port,I1 *src,...)
{
  I1 *buf=SPrintFJoin(NULL,src,argc,argv),*ptr=buf;
  while (*ptr)
    CommPutChar(port,*ptr++);
  Free(buf);
}

public void CommPrintBlk(U8 port,U1 *buf,U8 cnt,BoolU4 hex=FALSE)
{
  U8 base=comm_base[port];
  U1 b;
  I1 hexbuf[3];
  while (cnt--) {
    b=*buf++;
    if (hex) {
      SPrintF(hexbuf,"%02X",b);
      while (!(InP(base+UART_LSR) & 0x20))
	SwapInNext;
      OutP(base+UART_THR,hexbuf[0]);
      while (!(InP(base+UART_LSR) & 0x20))
	SwapInNext;
      OutP(base+UART_THR,hexbuf[1]);
    } else {
      while (!(InP(base+UART_LSR) & 0x20))
	SwapInNext;
      OutP(base+UART_THR,b);
    }
  }
  while (!(InP(base+UART_LSR) & 0x20))
    SwapInNext;
}

public void CommSendFile(U8 port,I1 *filename,
  BoolU4 hex=FALSE,BoolU4 raw=FALSE)
{
  U8 size;
  U1 *buf;
  buf=ReadFile(filename,&size,NULL,raw);
  if (buf) {
    CommPrintBlk(port,buf,size,hex);
    Free(buf);
  }
}


void Irq03Handler()
{
  U8 base=comm_base[2];
  if ((InP(base+UART_IIR) & 0x07)==4)	//RX IRQ
    U1FifoInsert(comm_fifos[2],InP(base+UART_RDR));

  base=comm_base[4];
  if ((InP(base+UART_IIR) & 0x07)==4)	//RX IRQ
    U1FifoInsert(comm_fifos[4],InP(base+UART_RDR));
}

void Irq04Handler()
{
  U8 base=comm_base[1];
  if ((InP(base+UART_IIR) & 0x07)==4)	//RX IRQ
    U1FifoInsert(comm_fifos[1],InP(base+UART_RDR));

  base=comm_base[3];
  if ((InP(base+UART_IIR) & 0x07)==4)	//RX IRQ
    U1FifoInsert(comm_fifos[3],InP(base+UART_RDR));
}

public I8 CommGetChar(U8 port)
{
  I8 ch=0;
  while (!U1FifoRemove(comm_fifos[port],&ch))
    SwapInNext;
  return ch&0xFF;
}

public BoolU4 CommScanChar(U8 port,U8 *ch)
{
  U8 ch1;
  if (U1FifoPeek(comm_fifos[port],&ch1)) {
    U1FifoRemove(comm_fifos[port],&ch1);
    *ch=ch1&0xFF;
    return TRUE;
  } else
    return FALSE;
}

ext[EXT_IRQ03]=&Irq03Handler;
ext[EXT_IRQ04]=&Irq04Handler;




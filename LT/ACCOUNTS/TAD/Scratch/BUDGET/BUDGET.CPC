/******* This application is under construction ******/


#define MAX_BUDGET_COLS	16

class SavedBudgetEntry
{
  BYTE	type,flags;
  WORD	date;
  DWORD credit_account_index;
  DWORD debit_account_index;
  DWORD desc_index;
  DWORD amount;
};

class BudgetEntry
{
  BudgetEntry *next,*last;
  LtfEntry *ll;
  BYTE	type,flags;
  WORD	date;
  WORD	credit_account;
  WORD	debit_account;
  SysHashEntry *desc;
  DWORD amount;
  DWORD cols[MAX_BUDGET_COLS];
};

BudgetEntry bgt_header,*cur_bgt_entry;
SysHashTable *bgt_hash=NewHashTable(2048);
int bgt_num_active_cols;

class BudgetAccnt
{
  DWORD bal,num;
  SysHashEntry *name;
  BYTE attr;
  DWORD Balance(BudgetAccnt *a);
};

#define MAX_BUDGET_ACCOUNT	1024

BudgetAccnt bgt_accounts[MAX_BUDGET_ACCOUNT];
int num_bgt_accounts=0;

DWORD BgtBal(int num)
{
  return bgt_accounts[num].Balance(num);
}

DWORD BgtStdBalance(int num)
{
  return bgt_accounts[i].bal;
}

SysHashEntry *FindBgtString(char *st)
{
  SysHashEntry *temph1,*temph=FindHashEntry(st,bgt_hash,HTT_ALL);
  if (temph) return temph;
  temph=MAllocZ(sizeof(SysHashEntry));
  temph->string=NewString(st);
  temph1=FindHashBucket(st,bgt_hash);
  temph->next=*temph1;
  *temph1=temph;
}

int BgtDefineAccnt(char *name,DWORD attr,DWORD bal_routine=NULL)
{
  int i=num_bgt_accounts++;
  bgt_accounts[i].num=i;
  bgt_accounts[i].name=FindBgtString(name);
  bgt_accounts[i].attr=attr;
  if (bal_routine)
    bgt_accounts[i].Balance=bal_routine;
  else
    bgt_accounts[i].Balance=&BgtStdBalance;
}

#include "ACCOUNTS.CPZ" /* TODO:Make multiuser executefile*/

void ReadBgtData()
{
  DWORD size,*d,i,cnt;
  BYTE type,*buf=ReadFile("BUDGET.DTZ",&size),*ptr;
  BudgetEntry *tempb;
  SavedBudgetEntry *temps;
  SysHashEntry *temph,*temph1,**index_array;

  ptr=buf;
  d=ptr; ptr=ptr+sizeof(DWORD);
  cnt=*d;
  index_array=cnt*sizeof(DWORD);
  for (i=0;i<cnt;i++) {
    temph=MAllocZ(sizeof(SysHashEntry));
    index_array[i]=temph;
    temph->user0=i;
    temph->string=NewString(ptr);
    temph1=FindHashBucket(ptr,bgt_hash);
    ptr=ptr+StrLen(ptr)+1;
    temph->next=*temph1;
    *temph1=temph;
  }

  bgt_header.next=&bgt_header;
  bgt_header.last=&bgt_header;
  while (*ptr) {
    tempb=MAlloc(sizeof(BudgetEntry));
    temps=ptr; ptr=ptr+sizeof(SavedBudgetEntry);
    tempb->type=temps->type;
    tempb->flags=temps->flags;
    tempb->date=temps->date;
    tempb->amount=temps->amount;
    tempb->debit_account=index_array[temps->debit_account_index];
    tempb->credit_account=index_array[temps->credit_account_index];
    tempb->desc=index_array[temps->desc_index];
    InsQue(tempb,bgt_header.last);
  }
  Free(buf);
  Free(index_array);
}


/******* File Format ********/
//DWORD string_cnt (so index_array can be allocated on read)
//char st1[],st2[]... strings stored packed with terminating zeros
//SavedBudgetEntry e1,e2... terminated with a zero entry

void WriteBgtData()
{
  DWORD i,cnt,size,num,*d;
  BYTE *buf,*ptr;
  BudgetEntry *tempb;
  SavedBudgetEntry temps;
  SysHashEntry *temph;

  size=sizeof(DWORD);
  num=0;
  for (i=0;i<=bgt_hash->mask;i++) {
    temph=bgt_hash->body[i];
    while (temph) {
      temph->user0=num++;
      size=size+StrLen(temph->string)+1;
      temph=temph->next;
    }
  }

  tempb=bgt_header.next;
  while (tempb!=&bgt_header) {
    size=size+sizeof(SavedBudgetEntry);
    tempb=tempb->next;
  }
  buf=MAlloc(size);
  ptr=buf;
  d=ptr; ptr=ptr+sizeof(DWORD);
  *d=num;
 
  for (i=0;i<=bgt_hash->mask;i++) {
    temph=bgt_hash->body[i];
    while (temph) {
      MemCpy(ptr,temph->string,StrLen(temph->string)+1);
      ptr=ptr+StrLen(temph->string)+1;
      temph=temph->next;
    }
  }

  tempb=bgt_header.next;
  while (tempb!=&bgt_header) {
    temps->type=tempb->type;
    temps->flags=tempb->flags;
    temps->date=tempb->date;
    temph=bgt_accounts[tempb->debit_account].name;
    temps->debit_account_index=temph->user0;
    temph=bgt_accounts[tempb->credit_account].name;
    temps->credit_account_index=temph->user0;
    temph=tempb->desc;
    temps->desc_index=temph->user0;
    MemCpy(ptr,temps,sizeof(SavedBudgetEntry));
    ptr=ptr+sizeof(SavedBudgetEntry);
    tempb=tempb->next;
  }
  *ptr++=0;
  WriteFile("BUDGET.DTZ",buf,size);
  Free(buf);
}

char *FormatBgtEntry(BudgetEntry *b)
{
 
}

void BgtMain()
{
  Ltf *l=LtfNew;
  LtfEntry *ll;
  BudgetEntry *tempb;
  ReadBgtData;
  tempb=bgt_header.next;
  while (tempb!=&bgt_header) {
    tempb=tempb->next;
  }
 
}
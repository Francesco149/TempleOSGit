I1 *my_hard_drives="DEF";

#define CD_ISO_FILE		"D:/TEMP/LTCD.ISO"
#define CD_SONG_ISO_FILE	"D:/TEMP/LTSongs.ISO"

#define TAD5_LONG_CONFIG	"1b18192\rc330t440z5D:/TEMP/CD\rY1500000\r\r\rTAD\r/LT;/TEXT/BRIEF\r\r"
#define TAD4_LONG_CONFIG	"2b18192\rc330t440s441z5D:/TEMP/CD\rY1500000\r\r\rTAD\r/LT;/TEXT/BRIEF\r\r"
#define TAD5_MID_CONFIG		"1b18192\rc330t440z5D:/TEMP/CD\rY1500000\r\r\rTAD\r/LT\r\r"
#define TAD4_MID_CONFIG		"2b18192\rc330t440s441z5D:/TEMP/CD\rY1500000\r\r\rTAD\r/LT\r\r"
#define TAD5_SHORT_CONFIG	"1b18192\rc330t440z5D:/TEMP/CD\rY1500000\r\r\rTAD\r\r\r"
#define TAD4_SHORT_CONFIG	"2b18192\rc330t440s441z5D:/TEMP/CD\rY1500000\r\r\rTAD\r\r\r"
#define PROD_FLOPPY_CONFIG	"1b18192\ra220\ra\r/LT\r\r"
#define PROD_CDROM_CONFIG	"1b18192\rt45\rt\r/LT\r\r"
#define SONGS_CDROM_CONFIG	"1b18192\rt45\rtTAD\r\r\r"
#define INHOUSE_CDROM_CONFIG	"1b18192\rc330t440\rtTAD\r/LT\r\r"


void MyWriteCDImage()
{
  WriteCDImage('T',CD_ISO_FILE);
}

void MyWriteSongCDImage()
{
  WriteCDImage('T',CD_SONG_ISO_FILE);
}

void ShowBootFileDate(I1 drive)
{
  LTDirEntry de;
  I1 *name=MSPrintF("%c:/BOOT.BIC",drive);
  if (FindFile(name,&de)) {
    cout name," ";
    PrintF("%D %T\r\n",de.datetime.date,de.datetime.time);
  } else
    coutln name;
  Free(name);
}

void ShowBootFiles()
{
  I1 *ptr=my_hard_drives;
  coutln "\r\nA:";
  while (*ptr)
    ShowBootFileDate(*ptr++);
}

I1 SelectMyDrive()
{
  I1 result=0;
  ShowBootFiles;
  cout "Drive:";
  result=ToUpper(GetChar);
  coutln;
  return result;
}

void CompileDrive(I1 drive=0)
{
  LTDate start=BootTime;
  if (computer_id==CID_TAD5)
    Auto(TAD5_LONG_CONFIG);
  else
    Auto(TAD4_LONG_CONFIG);
  InstallBoot(drive);
  PrintF("Compile Time:%h17Ts\r\n",BootTime-start);
}

void BootDrive(I1 drive=0)
{
  Drive(drive);
  Fs->user_aux1=drive;
  if (computer_id==CID_TAD5)
    Auto(TAD5_MID_CONFIG);
  else
    Auto(TAD4_MID_CONFIG);
  BootLT;
}

void QuickBoot(I1 drive=0)
{
  Drive(drive);
  Fs->user_aux1=drive;
  if (computer_id==CID_TAD5)
    Auto(TAD5_SHORT_CONFIG);
  else
    Auto(TAD4_SHORT_CONFIG);
  BootLT;
}

void TouchUpSource(I1 src, I1 *flags)
{
  Drive(src);
  Touch("/LT/ACCOUNTS/USER.CPZ",flags);
  Touch("/LT/ACCOUNTS/USER.MUZ",flags);
  Touch("/LT/ACCOUNTS/SERVANT.CPZ",flags);
  Touch("/LT/ACCOUNTS/SYSTEM.CPZ",flags);
  Touch("/LT/ACCOUNTS/FAULT.CPZ",flags);

  Touch("/LT/ACCOUNTS/TOUR/USER.CPZ",flags);
  Touch("/LT/ACCOUNTS/INSTALL/USER.CPZ",flags);
  Touch("/LT/ACCOUNTS/UPGRADE/USER.CPZ",flags);

  Touch("/LT/ACCOUNTS/TAD/USER.CPZ",flags);
  Touch("/LT/ACCOUNTS/TAD/USER.MUZ",flags);
  Touch("/LT/ADAM/EDIT.MUZ",flags);
  Touch("/LT/DOC/CtrlL.MUZ",flags);
}

void UpdateDrive(I1 src,I1 dst)
{
  I1 buf_s[128],buf_d[128];
  TouchUpSource(src,"+T");
  if (src==dst) return;
  SPrintF(buf_s,"%c:/LT",src);
  SPrintF(buf_d,"%c:/LT",dst);
  DelTree(buf_d);
  CopyTree(buf_s,buf_d);
}

void UpdateAndCompile(I1 src,I1 dst)
{
  UpdateDrive(src,dst);
  CompileDrive(dst);
}

void PromptUpdateDrive()
{
  I1 src,dst;
  coutln "\r\nSource Drive:";
  src=SelectMyDrive;
  coutln "\r\nDestination Drive:";
  dst=SelectMyDrive;
  UpdateAndCompile(src,dst);
  ShowBootFiles;
  Drive(src);
}

void PromptUpdateDrive2()
{
  I1 src,dst;
  coutln "\r\nUpdate Source Drive:";
  src=SelectMyDrive;
  coutln "\r\nUpdate Destination Drive:";
  dst=SelectMyDrive;
  UpdateDrive(src,dst);
  ShowBootFiles;
  Drive(src);
}

void MyMerge()
{
  I1 src,dst,buf_s[128],buf_d[128];
  coutln "\r\nMerge Source Drive:";
  src=SelectMyDrive;
  coutln "\r\nMerge Destination Drive:";
  dst=SelectMyDrive;
  SPrintF(buf_s,"%c:/LT/*",src);
  SPrintF(buf_d,"%c:/LT/*",dst);
  MergeChk(buf_d,buf_s,"+r+d");
  Drive(dst);
}

void MyCopyDrive()
{
  I1 src,dst,buf_s[128],buf_d[128];
  cout "$FG RED$\r\nCopy Source Drive:\r\n$FG$";
  src=SelectMyDrive;
  cout "$FG RED$\r\nCopy Destination Drive:\r\n$FG$";
  dst=SelectMyDrive;
  Format(dst,TRUE,FALSE,PT_LT);
  SPrintF(buf_s,"%c:/LT",src);
  SPrintF(buf_d,"%c:/LT",dst);
  CopyTree(buf_s,buf_d);
  SPrintF(buf_s,"%c:/TAD",src);
  SPrintF(buf_d,"%c:/TAD",dst);
  CopyTree(buf_s,buf_d);
  SPrintF(buf_s,"%c:/0000BOOT",src);
  SPrintF(buf_d,"%c:/0000BOOT",dst);
  CopyTree(buf_s,buf_d);
  SPrintF(buf_d,"%c:/TEMP",dst);
  MkDir(buf_d);
  Drive(dst);
  CompileDrive(dst);
}

void DistributeDToFloppy(I1 drive)
{
  LTPartition *p=DriveToPartition(drive);
  TouchUpSource('D',"+T");
  Cd("D:/LT");
  S2T(SOURCE_FILE_MASK,"+r");
  MapDrive('A',local_partitions+sizeof(LTPartition)*(ToUpper(drive)-'A'));
  if (p->bdev->type!=LTBDT_RAM)
    Format('A',TRUE,FALSE,PT_LT);
  else
    Format('A',FALSE,FALSE,PT_LT);
  Drive('A');
  CopyTree("D:/LT","/LT");
  MkDir("/0000BOOT");
  Del("/LT/ADAM/JOY.DTZ");
  DelTree("/LT/ACCOUNTS/TAD");
  Auto(PROD_FLOPPY_CONFIG);
  InstallBoot('A');
  if (p->bdev->type==LTBDT_RAM)
    ReadFloppyImage('A',"D:/TEMP/LTFLOPPY.DVC");

  MapDrive('A',local_partitions);
  MapDrive(drive,local_partitions+sizeof(LTPartition)*(ToUpper(drive)-'A'));
}

void DistributeDToCD()
{
  Cd("D:/LT");
  S2T(SOURCE_FILE_MASK,"+r");
  Auto(PROD_CDROM_CONFIG);
  InstallBoot('D','T');
  Format('Z',TRUE,FALSE);
  Drive('Z');
  DelTree("/LT");
  CopyTree("D:/LT","/LT");
  Del("/LT/ADAM/JOY.DTZ");
  DelTree("/0000BOOT");
  DelTree("/LT/ACCOUNTS/TAD");
  CopyTree("D:/0000BOOT","/0000BOOT");
  CreateCDFile(CD_ISO_FILE,'Z',CD_BOOT);
  Drive('D');
}

void DistributeSongs()
{
  Cd("D:/LT");
  S2T(SOURCE_FILE_MASK,"+r");
  Auto(SONGS_CDROM_CONFIG);
  InstallBoot('D','T');
  Format('Z',TRUE,FALSE);
  Drive('Z');
  DelTree("/LT");
  CopyTree("D:/LT","/LT");
  Del("/LT/ADAM/JOY.DTZ");
  DelTree("/0000BOOT");
  Copy("/LT/ACCOUNTS/TAD/SongUSER.CPZ",
       "/LT/ACCOUNTS/TAD/USER.CPZ");
  CopyTree("D:/0000BOOT","/0000BOOT");
  CreateCDFile(CD_SONG_ISO_FILE,'Z',CD_BOOT);
  Drive('D');
}

void DistributeDToMyCD()
{
//  DistributeDToFloppy('B');
  DistributeDToCD;
  DistributeSongs;
  Cd("D:/LT");
  S2T(SOURCE_FILE_MASK,"+r");
  Auto(INHOUSE_CDROM_CONFIG);
  InstallBoot('D','T');
  Format('Z',TRUE,FALSE);
  Drive('Z');
  DelTree("/LT");
  CopyTree("D:/LT","/LT");
  DelTree("/WINDOWS");
  CopyTree("D:/WINDOWS","/WINDOWS");
  DelTree("/TEXT");
  CopyTree("D:/TEXT","/TEXT");
  DelTree("/TEMP");
  MkDir("/TEMP");
  MkDir("/TEMP/ScreenShots");
  Copy("D:/TEMP/ScreenShots/*","/TEMP/ScreenShots");
//  Copy("D:/TEMP/LTFLOPPY.DVC","/TEMP/LTFLOPPY.IMG");
  Copy(CD_ISO_FILE,"/TEMP/LTCD.ISO");
  Copy(CD_SONG_ISO_FILE,"/TEMP/LTSongs.ISO");
  Del("/LT/ADAM/JOY.DTZ");
  DelTree("/0000BOOT");
  CopyTree("D:/0000BOOT","/0000BOOT");
  CreateCDFile(CD_ISO_FILE,'Z',CD_BOOT);
  Drive('D');
}

void InstallFromCDToD()
{
  Format('D');
  CopyTree("T:/LT","D:/LT");
  CopyTree("T:/WINDOWS","D:/WINDOWS");
  CopyTree("T:/TEXT","D:/TEXT");
  CopyTree("T:/TEMP","D:/TEMP");
  MkDir("D:/0000BOOT");
  CompileDrive('D');
}

U8 Rep_From,Rep_To;

I1 *Version(I1 *pattern,U8 num)
{
  if (num)
    return MSPrintF("%s%d",pattern,num);
  else
    return NewString(pattern);
}

void Rep(I1 *pattern)
{
  I1 *st,*st2;

  st=Version(pattern,Rep_From);
  st2=Version(pattern,Rep_To);
  PrintF("$BK,1$$FG,LTBLUE$%s$FG$$BK,0$\r\n",pattern);
  Grep(st,TEXT_FILE_MASK,"+r+l+a",st2);
  Free(st);
  Free(st2);
}

void CvtCmp(U8 r_from,U8 r_to)
{
  Rep_From=r_from;
  Rep_To=r_to;
  Rep("LexNew");
  Rep("LexDel");
  Rep("SetSourceFileInfo");
  Rep("LexPutToken");
  Rep("LexGetChar");
  Rep("LexSkipEol");
  Rep("DelExpression");
  Rep("EvalExpression");
  Rep("LexPush");
  Rep("LexPop");
  Rep("LexSubStackPtr");
  Rep("FindMember");
  Rep("Lex");
  Rep("LexExtendString");
  Rep("LexPutLine");
  Rep("LexLineNum");
  Rep("PutLexError");
  Rep("PutLexWarning");
  Rep("DelHashTable");
  Rep("GetExpression");
  Rep("Expression");
  Rep("ExePutS");
  Rep("ExePrintF");
  Rep("CompileFile");
  Rep("ExecuteCmdLine");
  Rep("ExecuteString");
  Rep("ExecuteFile");
  Rep("asm_hash");
  Rep("CatchAll");
  Rep("InitCompiler");
}

void LoadCmp()
{
  CompileFile("CMP.ASZ");
  Load("CMP");
  ExecuteFile("CMP.HPZ");
}

void OffLineCmp()
{
  CvtCmp(0,5);
}

void OnLineCmp()
{
  CvtCmp(5,0);
}


void SwapOutCmp()
{
  DelTree("/LT/COMPILE2");
  CopyTree("/LT/COMPILE","/LT/COMPILE2");
  Cd("/LT/COMPILE2");
  OffLineCmp;
}

void SwapInCmp()
{
  if (Cd("/LT/COMPILE2")) {
    OnLineCmp;
    DelTree("/LT/COMPILE");
    CopyTree("/LT/COMPILE2","/LT/COMPILE");
    DelTree("/LT/COMPILE2");
  }
}

#define CID_TAD4	4
#define CID_TAD5	5

I8 IdComputer()
{
  LTPartition *p=NULL;
  try {
    p=DriveToPartition('E');
  } catch
    Fs->catch_except=TRUE;
  return (p) ? CID_TAD4:CID_TAD5;
}

I8 computer_id=IdComputer;

U8 offering_check_time=BootTime-61*LTDATE_FREQ;
public BoolU4 OfferingCheck()
{
  BoolU4 result=TRUE;
  if (BootTime-offering_check_time>60*LTDATE_FREQ) {
    result=PopUpNoYes(
      "Have you done a good offering to God, like\r\n"
      "insights gained through mediation or a hymn\r\n"
      "or a hymn lyric or creating a Moses comic?\r\n");
    offering_check_time=BootTime;
  }
  return result;
}

public U2 GodWORD(I1 *msg=NULL)
{
  I1 *st;
  OfferingCheck;
  st=MAlloc(StrLen(msg)+256);
  StrCpy(st,msg);
  StrCat(st,"\r\nPress OKAY to generate a random number.\r\n"
	    "Keyboard works best.");
  PopUpOk(st);
  Free(st);
  if (mouse_evt_time>keyboard_evt_time)
    return mouse_evt_time;
  else
    return keyboard_evt_time;
}

public U4 GodDWORD(I1 *msg=NULL)
{
  U8 result=0;
  result.u2[0]=GodWORD(msg);
  result.u2[1]=GodWORD(msg);
  return result;
}

WsFilemaskEntry *qu_filemask_list=NULL;
U8 qu_total_file_size=0;

void QuAddFileList(LTDirEntry *tempm1)
{
  while (tempm1) {
    coutln tempm1->full_name,":",tempm1->expanded_size;
    if (tempm1->attr & LT_ATTR_DIR) {
      if (tempm1->sub)
	QuAddFileList(tempm1->sub);
    } else
      qu_total_file_size=qu_total_file_size+
	tempm1->expanded_size;
    tempm1=tempm1->next;
  }
}

void QuAdd(I1 *wild=TEXT_FILE_MASK)
{
  WsFilemaskEntry *tempfm=AMAlloc(sizeof(WsFilemaskEntry));
  tempfm->next=qu_filemask_list;
  qu_filemask_list=tempfm;
  tempfm->mask=ANewString(wild);
  tempfm->flist=NULL;
}

void QuTraverseFilelist()
{
  WsFilemaskEntry *tempfm;
  U8 my_flags=(1<<FUf_RECURSE);
  tempfm=qu_filemask_list;
  while (tempfm) {
    tempfm->flist=FindFiles(tempfm->mask,&my_flags);
    QuAddFileList(tempfm->flist);
    tempfm=tempfm->next;
  }
}

public void QuInit(I1 *mask)
{
  I1 *buf,buf2[512];
  qu_total_file_size=0;
  qu_filemask_list=NULL;

  buf=NewString(mask);
  do {
    RemoveFirstSeg(buf,";",buf2);
    if (*buf2) {
      StrCat(buf2,"/" TEXT_FILE_MASK);
      QuAdd(buf2);
    }
  } while (*buf2);
  Free(buf);

  QuTraverseFilelist;
}

QuInit("/TEXT");


Cd("/LT/UTILS");;
#include "DBG"
#include "BOOTINS"
#include "DIFF"
#include "GREP"
#include "S2T"
#include "HASHUTIL"
#include "IDE"
#include "BMP"
LoadMapFile("::/LT/OSMain/OS.MPZ");  //Enable Man()
LoadMapFile("::/LT/COMPILE/CMP.MPZ");	//Enable Man()
LoadMapFile("::/LT/ADAM/ADAMASM.MPZ");	//Enable Man()

Cd("/LT/APPS");;
#include "TIMECLK"


Cd("/LT/ACCOUNTS/TAD");;
#include "ComicMenu"
#include "MkSong"
#include "SongMenu"
#include "DISTRIB"
#include "PLUGINS"

if (is_CDROM)
  CopyTree("::/LT","B:/LT");
else {
  CommOpen8N1;
  Del("::/TEMP/ScreenShots/S*.BMP");
}

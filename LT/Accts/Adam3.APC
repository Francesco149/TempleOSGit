//Change anything you want in this
//account file or others.

//Set Time Zone
local_time_offset=0*60*60*LTDATE_FREQ;

//adjust these to set mouse move scale
mxx_scale=0.5;
myy_scale=0.5;
mzz_scale=1.0; //wheel

//don't change these
mxx_prescale=mxx/mxx_scale;
myy_prescale=myy/myy_scale;
mzz_prescale=mzz/mzz_scale;

class RenameSymbolStruct
{
  I1 find[256]	  fmtstr "$DA -P ,255 \"Find   :%s\"$\r\n";
  I1 replace[256] fmtstr "$DA -P ,255 \"Replace:%s\"$\r\n";
};

void RenameCurSymbol()
{
  I1 *buf;
  RenameSymbolStruct r;
  BoolU4 old_preempt=Preempt(OFF);
  StrCpy(r.find,ws_cur_word);
  StrCpy(r.replace,ws_cur_word);
  Preempt(old_preempt);
  if (PopUpDoForm(&r,"RenameSymbolStruct")) {
    buf=MSPrintF("R(\"%s\",\"%s\",\"+r+l+a\");",r.find,r.replace);
    PopUp(buf,Fs);
    Free(buf);
  }
}

void RenameFile()
{
  I1 *buf;
  RenameSymbolStruct r;
  BoolU4 old_preempt=Preempt(OFF);
  StrCpy(r.find,ws_cur_word);
  StrCpy(r.replace,ws_cur_word);
  Preempt(old_preempt);
  if (PopUpDoForm(&r,"RenameSymbolStruct")) {
    buf=MSPrintF("R(\"%s\",\"%s\",\"+r+l+a\");",r.find,r.replace);
    PopUp(buf,Fs);
    Free(buf);
  }
  Move(r.find,r.replace);
}

void FillinTime()
{
  LTDate ltdt;
  ltdt=GetCurTimeLTDate;
  PrintF("$IV 1$----%D %T----$IV 0$\r",ltdt,ltdt);
}


BoolU8 MyPutKey(I8 ch,U8 sc)
{  //ch=ASCII; sc=scancode

//You can customize keys.  This routine
//is called before the main editor
//key handler [LtfPutKeyExt] LtfPutKeyExt().
//You can intercept any key.

//Return TRUE if you completely
//handled the key.

  nounusedwarn ch;
  U8 sc2=sc.u1[0];

  if (sc2>=SC_F1 && sc2<=SC_F10 &&
       (sc & SCF_ALT) &&
      !(sc & SCF_CTRL)) {
    if (sc2==SC_F1) {
      if ((sc & SCF_SHIFT))
	PutS("$FG LTPURPLE$");
      else
	PutS("$FG PURPLE$");
    } else if (sc2==SC_F2) {
      if ((sc & SCF_SHIFT))
	PutS("$FG LTRED$");
      else
	PutS("$FG,RED$");
    } else if (sc2==SC_F3) {
      if ((sc & SCF_SHIFT))
	PutS("$FG LTGREEN$");
      else
	PutS("$FG,GREEN$");
    } else if (sc2==SC_F4) {
      if ((sc & SCF_SHIFT))
	PutS("$FG LTBLUE$");
      else
	PutS("$FG$");
    } else if (sc2==SC_F6) {
      if (!(sc & SCF_SHIFT))
	PopUp("WsInit(\"/LT\");");
    } else if (sc2==SC_F7) {
      if ((sc & SCF_SHIFT))
	LtfSafeInsert(Fs->cur_ltf,
	  "$HS+C$$FG$$HE$");
      else
	FillinTime();
    } else if (sc2==SC_F8) {
      if ((sc & SCF_SHIFT))
	RenameFile();
      else
	RenameCurSymbol();
    } else if (sc2==SC_F9)
      PopUp("PunchIn;");
    else if (sc2==SC_F10)
      PopUp("PunchOut;");
    return TRUE;
  }
  return FALSE;
}

BoolU8 MyPutS(I1 *st)
{
  nounusedwarn st;
  return FALSE;
}

AddKeyDev(&MyPutKey,&MyPutS,0x20000000);

MPStart;
Cd("/LT/Adam");;
#include "PicWords2"
#include "HOME/PicWords3"
Cd("/LT/Utils/Boot");;
#include "InsBoot"
Cd("/LT/Utils");;
#include "Disk20"
#include "Diff"
#include "Grep"
#include "Merge"
#include "S2T"
#include "IDE"
#include "LinkChk"
#include "HeapLog"
#include "ListFile"
LoadMapFile("::/LT/OSMain/OS.MPZ");  //Enable Man()
LoadMapFile("::/LT/Compiler/Compiler.MPZ");	//Enable Man()
LoadMapFile("::/LT/Adam/GrAsm/GrAsm.MPZ");	//Enable Man()


void StartUpTsks()
{
  I1 buf[80];
  TssStruct *tss,*tss1;

  InitLocalTask; //needed for disk access
  Preempt(ON);	//off by default
  Silent(ON);	//no output to screen

  try {
    tss1=SpawnUser;
    tss=SpawnUser;
    WinToTop(tss1);
    WinTileVert;

    PopUp("#include \"::/LT/Doc/StartSong.CPZ\";");

    SPrintF(buf,"Boot Time:%h17Ts\r\n",BootTime);
    AdamLog(buf);
    XTalk(tss1,"#include \"DoIt\";\r");

    WsInit("/LT");
    WordStat;
  } catch
    CatchAll;
}

//This must be spawned because start-up files
// may invoke the Adam() cmd.
Spawn(&StartUpTsks,"Spawn Users");
PrintF("\r\nOS Compile Time:%D %T\r\n",sys_compile_time,sys_compile_time);

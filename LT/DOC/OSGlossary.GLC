+] Task
  A "task" is the Intel term for a "process".  Each task has a
  [C:/LT/OSMain/Adam1a.HPZ,3235] TssStruct, the name derived from "Task State
  Something".  The "Fs" segment register is maintained pointing to the current
  TssStruct.
+] Adam Task
  This is Adam, as in Adam and Eve, the parent of all tasks.  This task is
  created at start-up and appears in the small window at the top beneath the
  user windows.  On it's heap are all mem objects which are system wide.  When
  created, it runs the file [::/LT/OSMain/ADAMK.CPZ]
  ::/LT/OSMain/ADAMK.CPZ  Normally, ADAMK.CPZ ends by #include
  [::/LT/ADAM/ADAM2.CPZ] ::/LT/ADAM/ADAM2.CPZ where the remainder of the
  operating system is "#included".  When start-up is finished, the adam task
  enters a server mode where it accepts requests from other tasks.  The
  [C:/LT/OSMain/TaskCmd.CPZ,285] Adam("") routine will cause the adam task to
  compile and run text source code.  "#include" statements can be sent to the
  [C:/LT/OSMain/TaskCmd.CPZ,285] Adam("") routine, creating system-wide code
  and data which don't disappear when any particular task ends.
+] Parent/Child Task
  Often a task will [C:/LT/OSMain/Task1a.CPZ,230] Spawn() or
  [C:/LT/Adam/Ltf/LtfPopUp.APZ,395] PopUp() a task as a helper.  The helper is
  known as a Child Task, though you can Spawn a task and assign it a different
  parent... like Adam.  Links are kept as to who Spawned what so that when one
  task is [C:/LT/OSMain/Task1a.CPZ,29] Kill()ed the helper tasks disappear,
  too.  You see a report on current system tasks with
  [C:/LT/Adam/Utils2a.APZ,451] TaskRep().  There is just one possible window
  per task, so child tasks are needed.
+] C+
  The language used by LoseThos is more than "C" and less than "C++", so it's
  just "C+".
+] Static Compiled Mode
  I coined this term to refer to conventional compilation mode, but it is not
  the preferred mode for this operating system and is discouraged.  ".BI?"
  files are created directly, skipping ".OBJ" files.  In this mode, code and
  data are contiguous.  After compiling, you do a [C:/LT/OSMain/Hash1a.CPZ,662]
  Load() cmd which is available from right-clicking on a link (like from
  [C:/LT/OSMain/Dsk/Dsk1b.CPZ,238] Dir()).  There is no "main()"
  routine.  Instead, statements outside functions are automatically executed
  upon loading.  There is no way to unload except by killing the task.  To
  invoke Static Compiled Mode, use the [CompileFile] CompileFile() routine or
  right-click on a link.  The OSmain and compiler are made in static compiled
  mode and stored in "BOOT.BIC" and "CMP.BIZ".
+] Dynamic Compiled Mode
  I coined this term to refer to the mode when the compiler allocates
  objects(code and data) from the heap, noncontiguously.  This mode is used
  during command-line operations.  When you "#include" a file, it is compiled
  function by function and objects are placed all over in mem.  The
  [ExecuteFile] ExecuteFile() routine is the same as "#include" but can be
  placed in programs.  [ExecuteString] ExecuteString() routine will compile and
  run a string.  "asm{}" cmds are not allowed in Dynamic mode.
+] Compiler Intermediate Code
  The compiler generates instructions one step before making actual
  assembly(machine) language instructions.  This code is reverse polish in
  nature and can be viewed with [C:/LT/Compiler/Directives.CPZ,33] PTrace() or
  [C:/LT/Compiler/Directives.CPZ,38] OTrace().  The compiler does not
  "interpret" code, except in the process of optimization.  The assembly
  language can be viewed when it is compiled with the
  [C:/LT/Compiler/Directives.CPZ,51] CTrace() routine, or afterward with [Dasm]
  Dasm().
+] AutoFile
  A C+ script who's stdout goes to a task's input buffer.  (A PrintF will
  result in characters going to a parent task as though the user typed
  it.)  [C:/LT/OSMain/TaskCmd.CPZ,214] Msg() can be included in an autofile to
  send mouse or other commands.  While an autofile is running, the normal input
  gets diverted to the autofile task and can be filtered and sent back to the
  parent task.  Unless you are driving functions which prompt for data, you can
  probably use an #include file in place of an AutoFile. See
  [::/LT/DEMO/AutoFile/Demo1.AUZ] ::/LT/DEMO/AutoFile/Demo1.AUZ.  Note:
  [C:/LT/OSMain/TaskCmd.CPZ,353] Auto() is a simple routine which call PutS
  from within the helper(child) task to send a string to the parent's input
  stream.  It differs from [AutoString] AutoString().  You'll probably use
  [C:/LT/OSMain/TaskCmd.CPZ,353] Auto() a lot but not [AutoString]
  AutoString().  With [C:/LT/OSMain/TaskCmd.CPZ,353] Auto() you can place
  answers to the prompts for recompiling the OSMain with
  [C:/LT/Opt/Boot/InsBoot.APZ,185] InstallBoot().
+] File Partition
  There are physical partitions on disks and then there are virtual
  partitions which are stored in files on other partitions.  This is a LoseThos
  feature.  You can create a file partition using AddDrives or at the prompt
  when you recompile the operating system.  If you answer "Yes" to the prompt
  on reformating, this partition will be reformatted each time you use it for
  the first time after booting.  The original purpose of file partitions was as
  a holding area to collect files to write to a CD-ROM.  Use the file
  partition's letter when calling [CreateCDFile] CreateCDFile().
+] GrElem (Graphic Element)
  A graphic element is a line or point or poly-line or whatever, created with
  CTRL-R. Several graphic elements are clustered by CTRL-R.
+] SysText
  To allow different languages, LoseThos uses strings to identify actual
  strings to be displayed.  This is basically a level of indirection.  Support
  for lists of strings is also provided, but it's not especially
  effecient.  See [SysText] SysText(), [LoadStr] LoadStr(), [LoadList]
  LoadList(), [MatchSysTextEntry] MatchSysTextEntry() and [SysTextSub]
  SysTextSub().  [C:/LT/OSMain/Str1a.CPZ,1122] PrintF() also has some special
  codes to support SysText.
+] Hard-coded
  When you use a raw number instead of a #define'ed label, that's called
  "hard-coding".  Use labels whenever possible or your programs will fail if
  numbers change when the operating system is updated.


                                  FileNames

Wildcards
  FileName wild card matching allows "*" to match sequences of arbitrary 
characters and "?" for a single arbitrary character.  For some commands, you 
can enter multiple specifiers separated by ";".  You don't need to, but can, 
use "*.*" instead of "*" for filenames.  You can specify names to exclude by 
using a "~".

*.??Z
  Automatically compressed and uncompresses files when read and written.
*.??C
  Contiguous files--NOT compressed.
*.TX?
  Text Files
*.GL?
  Glossary Files--WordStat will show a "#" next to words which are defined as 
anchors within glossary files.
*.CP?
  C+ source files.  The default C+ compiler type is ".CPZ".
*.HP?
  C+ source header files.
*.AS?
  Assembly source files.  The default assembler type is ".ASZ".
*.MU?
  Menu/Help/Macro files
*.MP?
  Compiler "map" files
*.BI?
  Binary executable files, created by [CompileFile] CompileFile() and read by
[C:/LT/OSMain/Hash1a.CPZ,662] Load().
*.DT?
  Data files
*.DVC
  File Partition Drive (A drive stored in a file on another partition)
*.IS?
  CD-ROM image file--ISO9660.  To burn on other operating systems, rename ".IS
O"
*.AUZ
  "AutoFile" Basically a C+ program who's stdout goes to the input of a task 
when [C:/LT/OSMain/TaskCmd.CPZ,395] AutoFile() is called.

[SOURCE_FILE_MASK] SOURCE_FILE_MASK
  This #define holds a list of source file extensions.
[C:/LT/OSMain/Adam1a.HPZ,2011] TEXT_FILE_MASK
  This #define holds a list of text file extensions.



                              Naming conventions

The following are rules I stick to.  If you work on the operating system,
it'd 
be good to stick with them for uniformity, but you can do what you like.  
Since there are no "namespaces" and I don't plan to implement name spaces, I 
highly recommend putting a 2-3 character module code prefix on symbols. e.g. 
"Ws","Ltf","Lex"

ALL_CAPS
  Assembly Language labels are capitalized with underscores between words. 
So 
are #define's.

MixedCaps
  C+ Functions and class names are MixedCaps.

lower_case
  Local function vars and glbl vars are lower case.  Class member names are 
also lower_case.

SYSf_????
  Flags which are designated with bit numbers instead of bit values are 
designated with a lower case "f".

CP_????
  Assembly language routines which are C+ callable have a prefix "CP_".



Fs
  This refers to the CPU segment register called FS.  This register is
special 
in LoseThos because it points to the currently active task's
[C:/LT/OSMain/Adam1a.HPZ,3235] TssStruct.

Tss
  This is an Intel abbreviation for task state something.  Each task has one 
of these structures.  LoseThos doesn't actually use this CPU feature.
 
Bt,Bts,Btr,Btc
  These are bit manipulation functions named after Intel instructions.  They 
stand for "Bit Test", "Bit Test and Set", "Bit Test and Reset" and "Bit Test 
and Compliment".

Cli,Sti
  These functions turn on or off interrupts.  They are named after the Intel 
instructions.  "Cli" turns off interrupts.

Root
  Refers to the base of a binary tree or the head of a queue.

Put/PrintF
  This usually means sending data to a character stream.  I try to use this 
instead of "Display" or "Dump".

Get
  This is the opposite of "Put".

Write
  This usually refers to sending data to disk and not to be confused with 
"Save".

Read
  This is the opposite of "Write" and not to be confused with "Load".

Load
  Refers to doing more than just reading.

Save
  This is an editor cmd.

Find
  I try to use this instead of "Locate", etc.

struct
  I try to use this instead of "Record" or "Node".

Join
  When two parts of a program have a common low-level routine, that routine
is 
often labeled SomethingJoin.

Free/Unused
  "Free" is a verb meaning to return something (to the system) like mem or 
disk space.  "Unused" is an adjective.


                                 Abreviations

Attr	Attribute
Blk	Block
Buf	Buffer
Cb	Call-back (or code block)
Cmd	Command
Cnt	Count
Ctrl	Control.  The control key is indicated with "^" in documentation.
Cur	Current
Dbg	Debug
Del	Delete
Dev	Device
Dir	Directory
Elem	Element
Glbl	Global
Gr	Graphic
ip_	Input Pointer.  See [::/LT/ADAM/INPTR.CPZ] ::/LT/ADAM/INPTR.CPZ.
Lex	Lexical analyser
Lpt	I think this stands for "line printer port". (It's a DOS term.)
Ltf	Linked-Text-File (doubly-linked-list of rich text cmds)
Mem	Memory
Num	Number
Ode	Ordinary differential equation
Pmt	Prompt
Ptr	Pointer
Rep	Report
Str	String
Sys	System
Var	Variable

#define NUM	1000000

I64 my_mp_cnt=1<<Bsr(mp_cnt);//Power of 2

I32 *a1,*a2;
I32 *b[my_mp_cnt],bn[my_mp_cnt];
I64 mp_done_flags;

I64 Compare(I32 *e1,I32 *e2)
{
  return *e1-*e2;
}


U0 QSortU32(I32 *base,U64 num)
{
// By customizing, we dramatically improve it!
// Cut and paste from [C:/LT/OSMain/QSort.CPZ,3] QSortU64().
  I64 i;
  I32 *less,*greater,pivot;
  if (num>1) {
    do {
      less=base;
      greater=base+num;
      pivot=base[num/2];
      while (less<greater) {
	if (*less<=pivot)
	  less++;
	else {
	  greater--;
	  SwapU32(less,greater);
	}
      }
      i=less-base;
      if (i==num) { //All less or equal to pivot

      //Point greater to first less
	do greater--;
	while (--i && *greater==pivot);

	if (i) {
	  less=base+num/2; //Pivot was not moved, point to it
	  if (less<greater)
	    SwapU32(less,greater);
	  num=i;
	} else //All equal
	  break;
      } else if (i<num/2) {
	QSortU32(base,i);
	num-=i;
	base=greater;
      } else {
	QSortU32(greater,num-i);
	num=i;
      }
    } while (num>1);
  }
}

U0 MPSort(U64 dummy=0)
{
  nounusedwarn dummy;
  QSortU32(b[Gs->num],bn[Gs->num]);
  LBts(&mp_done_flags,Gs->num);
}

U0 MPRadixSortDemo(U64 dummy=0)
{
  nounusedwarn dummy;
  I64 i,j,k1,k2;
  F64 t0;
  a1=MAlloc(NUM*sizeof(I32));
  for (i=0;i<NUM;i++)
    a1[i]=RandI32;


  a2=MAlloc(NUM*sizeof(I32));

  "$FG,GREEN$QSort$FG$\r\n";
  t0=tNP;
  MemCpy(a2,a1,sizeof(I32)*NUM);
  QSort(a2,NUM,sizeof(I32),&Compare);
  "Time:%9.6f\r\n",tNP-t0;
  D(a2+NUM/4);


  "$FG,GREEN$QSortU32$FG$\r\n";
  t0=tNP;
  MemCpy(a2,a1,sizeof(I32)*NUM);
  QSortU32(a2,NUM);
  "Time:%9.6f\r\n",tNP-t0;
  D(a2+NUM/4);

  for (i=0;i<my_mp_cnt;i++) {
    //We must do full size, just in case.
    //There will be uneven split between cores
    //depending on the distribution of rand numbers.
    b[i]=MAlloc(NUM*sizeof(I32));
    bn[i]=0;
  }

  if (my_mp_cnt<2) throw(EXCEPT_MULTICORE);

  "$FG,GREEN$MP Radix QSortU32$FG$\r\n";
  t0=tNP;
  k1=32-Bsr(my_mp_cnt);
  k2=my_mp_cnt/2;
  for (i=0;i<NUM;i++) {
    j=a1[i]>>k1+k2; //This is a preliminary radix sort.
    b[j][bn[j]++]=a1[i];
  }
  mp_done_flags=0;
  for (i=1;i<my_mp_cnt;i++)
    MPSpawn(&MPSort,NULL,NULL,1<<i);
  MPSort;
  while (mp_done_flags!=1<<my_mp_cnt-1)
    Yield;
  j=0;
  for (i=0;i<my_mp_cnt;i++) {
    MemCpy(&a2[j],b[i],bn[i]*sizeof(I32));
    j+=bn[i];
  }
  "Time:%9.6f\r\n",tNP-t0;
  D(a2+NUM/4);

  Free(a1);
  Free(a2);
  for (i=0;i<my_mp_cnt;i++)
    Free(b[i]);
}

MPRadixSortDemo;


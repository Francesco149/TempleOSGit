I1 *BootTimeCB(Ltf *l,LtfEntry *ll,TssStruct *mem_tss)
{
  LTDate i;
//This routine is called by the window
//manager things would get corrupted
//if the window manager used it's own
//heap, so we use the owning task's heap.
  I1 *st=MAlloc(64,mem_tss);
  nounusedwarn l,ll;

  i=BootTime;

  //Doesn't have to be fixed width!!
  SPrintF(st,"%d=%h11T",i,i);
  return st;
}

I1 *CurTimeCB(Ltf *l,LtfEntry *ll,TssStruct *mem_tss)
{
  LTDate i;
  I1 *st=MAlloc(64,mem_tss);
  nounusedwarn l,ll;
  i=GetCurTimeLTDate;
  SPrintF(st,"%h0D %h0T",i,i);
  return st;
}

void DoIt()
{
/* The main window is kept at Fs->cur_ltf.
A second framework is kept at Fs->aux_ltf.
Normally, the aux_ltf is used for updating
the border, primarily.

See [UseConsoleLtf] UseConsoleLtf().
See [LtfUpdateBothLtf] LtfUpdateBothLtf().

Note: the aux_ltf is not to be confused
with the aux_str, a member of the [C:/LT/OSMain/Adam1a.HPZ,1144] LtfEntry.

*/
  Ltf *aux=Fs->aux_ltf,
      *cur=Fs->cur_ltf;
  LtfEntry *ll;

// We don't want an update between
// creating the LtfEntry and defining the
// callback, so we turn-off preemption.

  BoolU4 old_preempt=Preempt(OFF);

  LtfBottom(aux);  //Insert at the bottom
  LtfPutSExt(aux,"$FG,RED$$CM+BY+LX,5,-3$");

// The [LtfPutSExt] LtfPutSExt() routine returns the address of the last entry.
  ll=LtfPutSExt(aux,"$TX+DC,\" \"$");
// The DC flag is "has display callback".

// Flags are explained here:
//	[::/LT/Doc/CtrlL.MUZ] ::/LT/Doc/CtrlL.MUZ
//	[::/LT/Doc/Dollar.TXZ] ::/LT/Doc/Dollar.TXZ
//	[C:/LT/OSMain/Adam1a.HPZ,1019] Dollar Flags
//	[::/LT/OSMain/SysText.CPZ,ST_LTF_FLAGS] ST_LTF_FLAGS

  ll->display_cb=&BootTimeCB;
  LtfPutSExt(aux,"$FG$");

//**WARNING:** If you use the cur_ltf you
//run the risk of the user pressing
//CTRL-T or using the clipboard, both
//of which will crash.  So, you might want
//to use the aux_ltf.

  LtfPutSExt(cur,"$FG,LTRED$");
  ll=LtfPutSExt(cur,"$TX+DC,\" \"$");
  ll->display_cb=&CurTimeCB;
  LtfPutSExt(cur,"$FG$");

  Preempt(old_preempt);

//Send carriage return, new line, so
//that the timer string is not part
//of the next command on the command line.
  CrLf;
}



void UndoIt()
{
//Clear-out entries without a +H hold flag.
  LtfBottom(Fs->aux_ltf);
  LtfPutSExt(Fs->aux_ltf,"$CL$");
}


DoIt;


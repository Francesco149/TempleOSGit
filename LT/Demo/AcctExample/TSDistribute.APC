//The CFG defines are [::/LT/Demo/AcctExample/TSAdam.APZ] Here.

U0 TSHDMount()
{
  Auto(CFG_HARD_DRVS "\r");
  Mount;
}

U0 ShowBootFileDate(U8 drv_let)
{
  LTDirEntry de;
  U8 *name=MSPrintF("%c:/Boot.BIC",drv_let);
  if (FileFind(name,&de))
    "%s %D %T\n",name,de.datetime,de.datetime;
  else
    "%s\n",name;
  Free(name);
}

U0 ShowBootFiles()
{
  U8 *ptr=TS_HDS;
  while (*ptr)
    ShowBootFileDate(*ptr++);
}

U8 DrvMySelect()
{
  U64 result=0;
  ShowBootFiles;
  "Drive:";
  result=ToUpper(GetChar);
  NewLine;
  return result;
}

U0 CmpDrv(U8 drv_let)
{
  drv_let=ToUpper(drv_let);
  Auto(TS_CFG);
  InstallBoot(drv_let);
  if (StrOcc(TS_MASTER_BOOT_DRVS,drv_let))
    InstallMasterBoot(drv_let);
}

U0 QMenuBoot(U8 drv_let=0)
{
  if (!drv_let)
    drv_let=Prt2Drv(Fs->cur_prt);
  Drv(drv_let);
  Cd("/LT/OSMain");
  Auto(TS_MENU_CFG);
  if (!Cmp("OS","OS",NULL,':'))
    Boot("OS.BIZ");
}

U0 UpdateAndCompile(U8 src,U8 dst)
{
  U8 buf_s[128],buf_d[128];
  if (src==dst) return;

  SPrintF(buf_s,"%c:/LT",src);
  SPrintF(buf_d,"%c:/LT",dst);
  CopyTree(buf_s,buf_d);
  CmpDrv(dst);
}

U0 PromptUpdateDrv()
{
  U8 src,dst;
  "\nSrc Drive:\n";
  src=DrvMySelect;
  "\nDst Drive:\n";
  dst=DrvMySelect;
  UpdateAndCompile(src,dst);
  ShowBootFiles;
  Drv(src);
}

U0 MyMerge()
{
  U8 src,dst,buf_s[128],buf_d[128];
  "\nMerge Src Drive:\n";
  src=DrvMySelect;
  "\nMerge Dst Drive:\n";
  dst=DrvMySelect;
  SPrintF(buf_s,"%c:/LT/*",src);
  SPrintF(buf_d,"%c:/LT/*",dst);
  MergeChk(buf_d,buf_s,"+r+d");
  Drv(dst);
}

U0 MyCopyDrv(U8 src,U8 dst)
{
  U8 buf_s[128],buf_d[128];
  src=ToUpper(src);
  dst=ToUpper(dst);

  Fmt(dst,TRUE,FALSE,PT_FAT32);

  SPrintF(buf_s,"%c:/LT",src);
  SPrintF(buf_d,"%c:/LT",dst);
  CopyTree(buf_s,buf_d);

  SPrintF(buf_s,"%c:/Text",src);
  SPrintF(buf_d,"%c:/Text",dst);
  CopyTree(buf_s,buf_d);

  SPrintF(buf_s,"%c:/Windows",src);
  SPrintF(buf_d,"%c:/Windows",dst);
  CopyTree(buf_s,buf_d);

  SPrintF(buf_s,"%c:/Linux",src);
  SPrintF(buf_d,"%c:/Linux",dst);
  CopyTree(buf_s,buf_d);

  SPrintF(buf_s,"%c:/0000Boot",src);
  SPrintF(buf_d,"%c:/0000Boot",dst);
  CopyTree(buf_s,buf_d);

  SPrintF(buf_d,"%c:/Temp",dst);
  MkDir(buf_d);

  SPrintF(buf_d,"%c:/Temp/ScreenShots",dst);
  MkDir(buf_d);

  if (ts_has_tra_drv && dst==TS_TRA_DRV_LET) {
    SPrintF(buf_d,"%c:/Logs",dst);
    MkDir(buf_d);
    SPrintF(buf_d,"%c:/Logs/LTLogs",dst);
    MkDir(buf_d);
  }

  Drv(dst);
  CmpDrv(dst);
}

U0 PmtMyCopyDrv()
{
  U8 src,dst;
  "$FG,RED$\nCopy Src Drive:\n$FG$";
  src=DrvMySelect;
  "$FG,RED$\nCopy Dst Drive:\n$FG$";
  dst=DrvMySelect;
  MyCopyDrv(src,dst);
}

public U0 FileCursorRem(U8 *filename)
{
  Ltf *l;
  l=LtfRead(filename,LTFF_PLAIN_TEXT|LTFF_NO_CURSOR);
  LtfWrite(l);
  LtfDel(l);
}

public U0 FileCursorTop(U8 *filename)
{
  Ltf *l;
  l=LtfRead(filename,LTFF_PLAIN_TEXT);
  l->cur_entry=l->root.next;
  LtfWrite(l);
  LtfDel(l);
}

public U0 FilesCursorRem(U8 *mask="*")
{
  U64 fuf_flags=0;
  GetFFlags(&fuf_flags,Define("ST_FILE_UTIL_FLAGS"),"+r+t+f+F");
  LTDirEntry *tempm=FilesFind(mask,fuf_flags),*tempm1;
  while (tempm) {
    tempm1=tempm->next;
    FileCursorRem(tempm->full_name);
    Touch(tempm->full_name,"","",tempm->datetime);
    LTDirEntryDel(tempm);
    tempm=tempm1;
  }
}

public U0 FilesCursorTop(U8 *mask="*")
{
  U64 fuf_flags=0;
  GetFFlags(&fuf_flags,Define("ST_FILE_UTIL_FLAGS"),"+r+t+f+F");
  LTDirEntry *tempm=FilesFind(mask,fuf_flags),*tempm1;
  while (tempm) {
    tempm1=tempm->next;
    FileCursorTop(tempm->full_name);
    Touch(tempm->full_name,"","",tempm->datetime);
    LTDirEntryDel(tempm);
    tempm=tempm1;
  }
}

U0 LinkChgFile(U8 *filename)
{
  Ltf *l=LtfRead(filename,LTFF_NO_CURSOR);
  LtfEntry *ll=l->root.next;
  U8 *st,*st2;
  I64 line_num;
  BoolI8 modified=FALSE;
  while (ll!=l) {
    if (ll->type_u8==LTFT_LINK) {
      if (ll->flags & LTFLF_AUX_STR)
	st2=EdLinkFile(ll->aux_str,&line_num);
      else
	st2=EdLinkFile(ll->tag,&line_num);
      if (st2) {
	st=FileNameAbs(st2);
	Free(st2);
	st2=MAlloc(StrLen(st)+1);
	StrLastRem(st,":",st2);
	Free(st);
	StrFirstRem(st2,"/"); // root
	StrFirstRem(st2,"/"); // /LT/
	FileExtRem(st2);
	if (line_num && line_num!=1)
	  st=MSPrintF("/LTHtml/%s.html#l%d",st2,line_num);
	else
	  st=MSPrintF("/LTHtml/%s.html",st2);
	Free(st2);
	if (!(ll->flags&LTFLF_HTML_LINK)) {
	  "%s\n$FG,GREEN$%s$FG$\n",filename,st;
	  ll->flags|=LTFLF_HTML_LINK;
	  ll->html_link=st;
	  st=NULL;
	  modified=TRUE;
	}
	Free(st);
      }
    }
    ll=ll->next;
  }
  if (modified)
    LtfWrite(l);
  LtfDel(l);
}

U0 LinkChgList(LTDirEntry *tempm1)
{
  LTDirEntry *tempm2;
  while (tempm1) {
    tempm2=tempm1->next;
    if (tempm1->attr & LT_ATTR_DIR) {
      if (tempm1->sub) {
	"%S %s\n","ST_SCANNING_DIR",tempm1->full_name;
	LinkChgList(tempm1->sub);
      }
    } else {
      LinkChgFile(tempm1->full_name);
      Touch(tempm1->full_name,"","",tempm1->datetime);
    }
    LTDirEntryDel(tempm1);
    tempm1=tempm2;
  }
}

U0 LinkChg(U8 *files_find_mask=TEXT_FILE_MASK)
{
  LinkChgList(FilesFind(files_find_mask,1<<FUf_RECURSE|1<<FUf_JUST_TEXT_FILES));
}

U0 UncollapseFile(U8 *filename,U64 *flags)
{
  nounusedwarn flags;
  Ltf *l=LtfRead(filename,LTFF_NO_CURSOR);
  LtfCollapse(FALSE,l);
  LtfWrite(l);
  LtfDel(l);
}

U0 UncollapseList(LTDirEntry *tempm1,U64 *flags)
{
  LTDirEntry *tempm2;
  while (tempm1 && !Bt(flags,FUf_CANCEL)) {
    tempm2=tempm1->next;
    if (tempm1->attr & LT_ATTR_DIR) {
      if (tempm1->sub) {
	"%S %s\n","ST_SCANNING_DIR",tempm1->full_name;
	UncollapseList(tempm1->sub,flags);
      }
    } else
      UncollapseFile(tempm1->full_name,flags);
    LTDirEntryDel(tempm1);
    tempm1=tempm2;
  }
}

U0 Uncollapse(U8 *files_find_mask=TEXT_FILE_MASK,U8 *fu_flags=NULL)
{
  U64 f=0;
  GetFFlags(&f,Define("ST_FILE_UTIL_FLAGS"),"+r");
  GetFFlags(&f,Define("ST_FILE_UTIL_FLAGS"),fu_flags);
  UncollapseList(FilesFind(files_find_mask,f),&f);
}

U0 MakeSymFile()
{
  Ltf *l;
  LtfEntry *ll,*ll2;
  U8 *st;
  HashRep(adam_task->hash_table,HTT_ALL,"LTHtml/sym.TXZ","-p",0,NULL);
  l=LtfRead("LTHtml/sym.TXZ");
  l->cur_entry=l->root.next;
  l->cur_data_col=l->cur_entry->min_col;
  LtfPutS(l,"[::/LT/Demo/AcctExample/TSDistribute.APZ,MakeSymFile] This file was generated here.\n"
	    "The [C:/LT/Adam/Hash2a.APZ,88] HashRep() command will list symbols.\n\n");
  ll=l->root.next;
  while (ll!=l) {
    if (ll->flags&LTFLF_HAS_BIN) {
      ll->flags&=~LTFLF_HAS_BIN;
      LtfBinDel(l,ll->bin_data);
    }
    if (ll->type_u8!=LTFT_LINK)
      ll=ll->next;
    else {
      if (!*ll->tag) {
	l->cur_entry=ll2=ll->next;
	LtfEntryDel(l,ll);
	ll=ll2;
      } else {
	if (ll->flags & LTFLF_AUX_STR)
	  st=ll->aux_str;
	else
	  st=ll->tag;
	if (StrStr(st,"/LT/Accts/")) {
	  l->cur_entry=ll;
	  l->cur_data_col=ll->min_col;
	  l->y=ll->y;
	  EdDelLine(l);
	  ll=l->cur_entry;
	} else
	  ll=ll->next;
      }
    }
  }
  LtfWrite(l);
}

U8 *losethos_html_header=
"<title>%s</title>\n"
"<meta name=\"author\"      content=\"Terry A. Davis\">\n"
"<meta name=\"description\" content=\"64-Bit, Operating System, Christian, OS, PC, Mutlicore, Free, Open Source, Public Domain, MultiTasking\">\n"
"<meta name=\"keywords\"    content=\"64-Bit, Operating System, Christian, OS, PC, Mutlicore, Free, Open Source, Public Domain, MultiTasking\">\n";

U8 *losethos_code_header=
"<span class=cF5>                               <a href=\"http://www.losethos.com/LTHtml/Doc/TrivialSolutions.html\">Trivial Solutions</a>\n"
"                    <a href=\"http://www.losethos.com\">The LoseThos 64-bit PC Operating System</a>\n"
"File:%s\n"
"This, and all LoseThos files, are public domain.  Do whatever you like.\n"
"God is watching; God is just; God is never out-done in generosity.  He talks!\n\n"
"LoseThos code compiles with the 64-bit LoseThos compiler/assembler I wrote.\n"
"Boot the LoseThos CD and you can compile it.  Not in Kansas anymore!\n\n"
"<a href=\"http://www.losethos.com/LTHtml/Demo/Lectures/FixedPoint.html\">Click here for preliminary compiler information you need.</a>"
"\n\n</span>";

U0 AllToHtml()
{
  I64 i,cnt;
  LTDirEntry **a,de;
  U8 *st,*st1,*st2;

  Cd(TS_MAIN_DRV ":/LT/Doc");
  FilesCursorTop;

  if (!ts_has_tra_drv) return;

  DelTree(TS_TRA_DRV ":/Temp/LTHtml");
  Cd(TS_TRA_DRV ":/Temp",TRUE);

  CopyTree(TS_MAIN_DRV ":/LT/Accts/TS/LoseThos/"TEXT_FILE_MASK,"LTHtml");
  MakeSymFile;

  MkDir("LTHtml");
  MkDir("LTHtml/LTHtml");
  CopyTree(TS_MAIN_DRV ":/LT/"TEXT_FILE_MASK,TS_TRA_DRV ":/Temp/LTHtml/LTHtml");
  DelTree(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Accts/TAD");
  DelTree(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Accts/TS");
  DelTree(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Accts/Cody");
  Del(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Misc/*.TXZ");

  MkDir(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Accts");
  MkDir(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Accts/TS");
  MkDir(TS_TRA_DRV ":/Temp/LTHtml/LTHtml/Accts/TS/Archive");
  Copy(TS_MAIN_DRV ":/LT/Accts/TS/Archive/News*.TXZ",
       TS_TRA_DRV  ":/Temp/LTHtml/LTHtml/Accts/TS/Archive");

  LinkChg(TEXT_FILE_MASK);
  Uncollapse(TEXT_FILE_MASK);

  cnt=0;
  a=FilesOrder(FilesFind("LTHtml/*",1<<FUf_RECURSE|1<<FUf_FLATTEN_TREE|1<<FUf_JUST_TEXT_FILES|1<<FUf_JUST_FILES),&cnt);
  for (i=0;i<cnt;i++) {
    st=StrNew(a[i]->name);
    FileExtRem(st); //<title>
    if (!StrCmp(st,"index")) {
      Free(st);
      st=StrNew("LoseThos 64-Bit Operating System");
    }
    st1=MSPrintF(losethos_html_header,st);
    Free(st);
    if (IsSrcFile(a[i]->full_name)) {
      st=StrNew(a[i]->full_name);
      StrFirstRem(st,"/"); // /
      StrFirstRem(st,"/"); // /Temp/
      StrFirstRem(st,"/"); // /Temp/LTHtml/
      StrFirstRem(st,"/"); // /Temp/LTHtml/LTHtml/
      st2=MSPrintF("/LT/%s",st);
      Free(st);
      st=MSPrintF(losethos_code_header,st2);
      Free(st2);
      ToHtml(a[i]->full_name,,st1,st);
      Free(st);
    } else
      ToHtml(a[i]->full_name,,st1);
    Free(st1);

    st=StrNew(a[i]->full_name);
    st2=StrNew(a[i]->full_name);
    StrFirstRem(st,"/"); // /
    StrFirstRem(st,"/"); // /Temp/
    StrFirstRem(st,"/"); // /Temp/LTHtml/
    StrFirstRem(st,"/",st2); // /Temp/LTHtml/LTHtml/
    if (StrCmp(st2,"LTHtml")) {
      Free(st);
      Free(st2);
    } else {
      Free(st2);
      st2=MSPrintF(TS_MAIN_DRV ":/LT/%s",st);
      Free(st);
      FileFind(st2,&de);
      Free(st2);

      st=ChgExt(a[i]->full_name,"html");
      Touch(st,"","",de.datetime);
      Free(st);
    }

    Del(a[i]->full_name);
    LTDirEntryDel(a[i]);
  }
  Free(a);

  if (ts_has_tra_drv) {
    i=Round(os_version*100);
    st=MSPrintF(TS_TRA_DRV ":/Temp/LTHtml/v%d%02d.html",i/100,i%100);
    Copy(TS_TRA_DRV ":/Temp/LTHtml/index.html",st);
    Free(st);
  }
}


U0 PrepForDistribution(BoolI8 cont=FALSE)
{
  Touch("/LT/Doc/FileMgr.TXZ","+T");
  Touch("/LT/Doc/CtrlL.TXZ","+T");
  Touch("/LT/Accts/PersonalMenu.TXZ","+T");
  Del("/LT/Demo/WebLogExample/WebLog.TXZ");
  Del("/LT/Demo/GameStarters/EagleDive.BIZ");

//User
  Del("/LT/Accts/User/Registry.CPZ");

//Install
  Del("/LT/Accts/Install/Registry.CPZ");

//SafeMode
  Del("/LT/Accts/SafeMode/Registry.CPZ");

//TAD
  Touch("/LT/Accts/TAD/PersonalMenu.TXZ","+T");

//Cody
  Touch("/LT/Accts/Cody/PersonalMenu.TXZ","+T");

//TS
  Touch("/LT/Accts/TS/PersonalMenu.TXZ","+T");

  Touch("/LT/Doc/Ed.TXZ","+T");

  DelTree("/LT/Demo/AcctExample");
  MkDir("/LT/Demo/AcctExample");
  Copy("/LT/Accts/TS/Adam3*.APZ","/LT/Demo/AcctExample");
  Copy("/LT/Accts/TS/TSDistribute.APZ","/LT/Demo/AcctExample");
  Copy("/LT/Accts/TS/TSAdam.APZ","/LT/Demo/AcctExample");
  Copy("/LT/Accts/TS/TSIDComputer.APZ","/LT/Demo/AcctExample");
  Copy("/LT/Accts/TS/TSIDDft.APZ","/LT/Demo/AcctExample");
  Copy("/LT/Accts/TS/PersonalMenu.TXZ","/LT/Demo/AcctExample");
  Copy("/LT/Accts/TAD/Notes.TXZ","/LT/Demo/AcctExample");

  Cd("/LT");
  FilesCursorTop;

  DelTree("/LT/Demo/*.BI?");

  if (!cont) {
    Cd("/LT");
    S2T(SRC_FILE_MASK,"+r");
  }
  Move(WSD_DEF_FILENAME,WSD_DEF_FILENAME_Z);
}

U0 PrepForInhouse(BoolI8 cont=FALSE)
{
  Drv(TS_MAIN_DRV_LET);
  PrepForDistribution(cont);
  Auto(TS_CDROM_CFG);
  InstallBoot(TS_MAIN_DRV_LET,TS_CDROM_DRV_LET);
  Fmt(TS_IMG_DRV_LET,TRUE,FALSE,PT_LT);
  Drv(TS_IMG_DRV_LET);
  CopyTree(TS_MAIN_DRV ":/LT","/LT");
  CopyTree(TS_MAIN_DRV ":/Text","/Text");
  CopyTree(TS_MAIN_DRV ":/Windows","/Windows");
  CopyTree(TS_MAIN_DRV ":/Linux","/Linux");
  MkDir("/Temp");
  MkDir("/Temp/ScreenShots");
  CopyTree(TS_MAIN_DRV ":/0000Boot","/0000Boot");
}

U0 PrepForProduction(BoolI8 cont=FALSE)
{
  Drv(TS_MAIN_DRV_LET);
  if (!cont)
    PrepForDistribution;
  Auto(PROD_CDROM_CFG);
  InstallBoot(TS_MAIN_DRV_LET,TS_CDROM_DRV_LET);
  if (cont) {
    Drv(TS_IMG_DRV_LET);
    DelTree("/Text");
    DelTree("/Temp/ScreenShots");
  } else {
    Fmt(TS_IMG_DRV_LET,TRUE,FALSE,PT_LT);
    Drv(TS_IMG_DRV_LET);
    CopyTree(TS_MAIN_DRV ":/LT","/LT");
    CopyTree(TS_MAIN_DRV ":/Windows","/Windows");
    CopyTree(TS_MAIN_DRV ":/Linux","/Linux");
    MkDir("/Temp");
  }
  DelTree("/LT/Accts/TAD");
  DelTree("/LT/Accts/Cody");
  DelTree("/LT/Accts/TS");
  CopyTree(TS_MAIN_DRV ":/0000Boot","/0000Boot");
  Del("/0000Boot/OldMBR.BIC");
}

U0 PrepForSafe(BoolI8 cont=FALSE)
{
  Drv(TS_MAIN_DRV_LET);
  if (!cont)
    PrepForDistribution;
  Auto(SAFE_CDROM_CFG);
  InstallBoot(TS_MAIN_DRV_LET,TS_CDROM_DRV_LET);
  if (cont) {
    Drv(TS_IMG_DRV_LET);
    DelTree("/Windows");
    DelTree("/Linux");
  } else {
    Fmt(TS_IMG_DRV_LET,TRUE,FALSE,PT_LT);
    Drv(TS_IMG_DRV_LET);
    CopyTree(TS_MAIN_DRV ":/LT","/LT");
    MkDir("/Temp");
    DelTree("/LT/Accts/TAD");
    DelTree("/LT/Accts/Cody");
    DelTree("/LT/Accts/TS");
  }
  Del("/LT/Adam/WordStat/WsDefs.DTZ");
  DelTree("/LT/Apps/Vocabulary");
  CopyTree(TS_MAIN_DRV ":/0000Boot","/0000Boot");
  Del("/0000Boot/OldMBR.BIC");
}

U0 PrepForLite(BoolI8 cont=FALSE)
{
  Drv(TS_MAIN_DRV_LET);
  if (!cont)
    PrepForDistribution;
  Auto(PROD_CDROM_CFG);
  InstallBoot(TS_MAIN_DRV_LET,TS_CDROM_DRV_LET);
  if (cont)
    Drv(TS_IMG_DRV_LET);
  else {
    Fmt(TS_IMG_DRV_LET,TRUE,FALSE,PT_LT);
    Drv(TS_IMG_DRV_LET);
    CopyTree(TS_MAIN_DRV ":/LT","/LT");
    MkDir("/Temp");
    DelTree("/LT/Accts/TAD");
    DelTree("/LT/Accts/Cody");
    DelTree("/LT/Accts/TS");
    Del("/LT/Adam/WordStat/WsDefs.DTZ");
    DelTree("/LT/Apps/Vocabulary");
  }
  CopyTree(TS_MAIN_DRV ":/0000Boot","/0000Boot");
  Del("/0000Boot/OldMBR.BIC");
}

U0 MakeInhouseCDImage(BoolI8 cont=FALSE)
{
  PrepForInhouse(cont);
  CDFileCreate(TS_ISO_NAME,TS_IMG_DRV ":/*",NULL,CDBOOT_BIZ);
  Drv(TS_MAIN_DRV_LET);
}

U0 MakeProductionCDImage(BoolI8 cont=FALSE)
{
  PrepForProduction(cont);
  CDFileCreate(TS_ISO_NAME,TS_IMG_DRV ":/*",NULL,CDBOOT_BIZ);
  Drv(TS_MAIN_DRV_LET);
}

U0 MakeSafeCDImage(BoolI8 cont=FALSE)
{
  PrepForSafe(cont);
  CDFileCreate(TS_ISO_NAME,TS_IMG_DRV ":/*",NULL,CDBOOT_BIZ);
  Drv(TS_MAIN_DRV_LET);
}

U0 MakeLiteCDImage(BoolI8 cont=FALSE)
{
  PrepForLite(cont);
  CDFileCreate(TS_ISO_NAME,TS_IMG_DRV ":/*",NULL,CDBOOT_BIZ);
  Drv(TS_MAIN_DRV_LET);
}

U64 MakeLineCntFile()
{
  U64 result,old_ltfmax;
  U8 *st;
  Ltf *l;
  LtfEntry *tree_branch,*start_indent,*end_indent;

  PrepForLite;
  Cd(TS_IMG_DRV ":/LT");
  if (LinkChk) {
    Drv(TS_MAIN_DRV_LET);
    throw;
  }
  Drv(TS_IMG_DRV_LET);
  LtfDblBufStart;
  old_ltfmax=LtfMax;
  "$FG,PURPLE$$TX+CX+HTML,\"LoseThos Source Files\",\"http://www.losethos.com\"$$FG$\n\n\n";
  result=LineCntRep;
  LtfCollapse(FALSE);
  l=LtfCur;
  st=StrNew(l->filename.name);
  StrCpy(l->filename.name,TS_MAIN_DRV ":/LT/Accts/TS/LoseThos/linecnt.TXZ");
  LtfWrite(l);
  StrCpy(l->filename.name,st);
  Free(st);
  LtfDblBufSwap;
  LtfDblBufEnd;

  l=LtfRead(TS_MAIN_DRV ":/LT/Adam/DocDefines.APZ");
  LtfTreeFind(l,"LineCnt",&tree_branch,&start_indent,&end_indent);
  LtfCut(l,start_indent->next,end_indent->last);
  l->cur_entry=start_indent->next;
  l->cur_data_col=0;
  LtfPrintF(l,"DefinePrintF(\"DOC_LOSETHOS_LOC\",\"%,d\");\n",result);

  //That last insertion in [::/LT/Adam/DocDefines.APZ,DOC_LOSETHOS_LOC] DocDefines will not take affect until we
  //reboot.  The following will overshadow the old val in the
  //current task's sym table so documents now rendered will
  //be right.  [::/LT/Doc/TrivialSolutions.TXZ] ::/LT/Doc/TrivialSolutions.TXZ, for example,
  //has some insertions of define string constants from the
  //sym table.
  st=MSPrintF("%,d",result);
  DefineLoad("DOC_LOSETHOS_LOC",st);
  Free(st);

  LtfWrite(l);
  LtfDel(l);

  "Total LOC:%12,d\n\n",result;
  LtfMax(old_ltfmax);
  return result;
}

AcctRegSetDftEntry("/Adam/TS/Distribution","#define DOC_LOSETHOS_VERSION LoseThos V1.11\n");
AcctRegExecuteBranch("/Adam/TS/Distribution");

U0 UpdateBakWin()
{
  LTDirEntry de;
  BoolI8 old_risky_copy=RiskyCopy(ON);
  F64 start;
  "!!!Update All!!!\n";
  if (AreYouSure) {
    start=tNP;
    LtfClear;
//    LtfMax;
    Cd("/LT");
    S2T(SRC_FILE_MASK,"+r");
    CopySongs;
    MakeLineCntFile;
    CmpDrv(TS_MAIN_DRV_LET);
    UpdateAndCompile(TS_MAIN_DRV_LET,TS_BAK_DRV_LET);
    if (ts_has_tra_drv) {
      UpdateAndCompile(TS_MAIN_DRV_LET,TS_TRA_DRV_LET);
      DelTree(TS_TRA_DRV ":/Temp");
      CopyTree(TS_MAIN_DRV ":/Temp",TS_TRA_DRV ":/Temp");
    }

    MakeInhouseCDImage(TRUE);
    if (ts_has_tra_drv)
      Copy(TS_ISO_NAME,TS_TRA_DRV ":/LTTS.ISO");

    MakeProductionCDImage(TRUE);
    if (ts_has_tra_drv)
      Copy(TS_ISO_NAME,TS_TRA_DRV ":/LTFull.ISO");

    MakeSafeCDImage(TRUE);
    if (ts_has_tra_drv)
      Copy(TS_ISO_NAME,TS_TRA_DRV ":/LTSafe.ISO");

    MakeLiteCDImage(TRUE);
    if (ts_has_tra_drv)
      Copy(TS_ISO_NAME,TS_TRA_DRV ":/LTCD.ISO");

    if (ts_has_tra_drv) {
      Drv(TS_MAIN_DRV_LET);
      //Technically, this creates multiple overshadowed hash entries
      if (FileFind(TS_TRA_DRV ":/LTCD.ISO",&de)) {
	AcctRegWriteBranch("/Adam/TS/Distribution","#define DOC_LOSETHOS_VERSION LoseThos V%4.2f (%d.%02d Meg)\n",
	    os_version,de.size/1024/1024,100*de.size/1024/1024%100);
	AcctRegExecuteBranch("/Adam/TS/Distribution");
      }
      AllToHtml;
    }

    ChkAll;

    Drv(TS_MAIN_DRV_LET);
    if (ts_has_tra_drv) {
      "LTCD.ISO   %6h?u\n",FileSize(TS_TRA_DRV ":/LTCD.ISO"  );
      "LTFull.ISO %6h?u\n",FileSize(TS_TRA_DRV ":/LTFull.ISO");
      "LTTS.ISO  %6h?u\n",FileSize(TS_TRA_DRV ":/LTTS.ISO" );
      "LTSafe.ISO %6h?u\n",FileSize(TS_TRA_DRV ":/LTSafe.ISO");
    }
    "Benchmark Time:%9.4f\n",tNP-start;
  }
  RiskyCopy(old_risky_copy);
}

U0 Cody1New()
{ //From CD-ROM to Cody1
  TSHDMount;
  DelTree(TS_MAIN_DRV ":/LT");
  CopyTree(TS_CDROM_DRV ":/LT",TS_MAIN_DRV ":/LT");
  CmpDrv(TS_MAIN_DRV_LET);
}

U0 TSVMNew()
{ //From CD-ROM to TSVM
  TSHDMount;
  DelTree(TS_MAIN_DRV ":/LT");
  CopyTree(TS_CDROM_DRV ":/LT",TS_MAIN_DRV ":/LT");
  CmpDrv(TS_MAIN_DRV_LET);
  DelTree(TS_BAK_DRV ":/LT");
  CopyTree(TS_CDROM_DRV ":/LT",TS_BAK_DRV ":/LT");
  CmpDrv(TS_BAK_DRV_LET);
}


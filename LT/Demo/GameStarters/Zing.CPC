#define __BIN_1_TYPE 0x00000002
#define __BIN_1_SIZE 0x000000DE
#define __BIN_1 "\x02\x06\x05\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x02\x00\x05\x35\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\xFD\xFF\xFF\xFF\x05\x32\x00\x00\x00\xFD\xFF\xFF\xFF\x32\x00\x00\x00\x02\x00\x00\x00\x05\x32\x00\x00\x00\x02\x00\x00\x00\x35\x00\x00\x00\x00\x00\x00\x00\x02\x04\x05\x06\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x02\x00\x00\x00\x05\x05\x00\x00\x00\x02\x00\x00\x00\xFF\xFF\xFF\xFF\x02\x00\x00\x00\x05\xFF\xFF\xFF\xFF\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xFF\xFF\xFF\x05\xFF\xFF\xFF\xFF\xFE\xFF\xFF\xFF\x05\x00\x00\x00\xFF\xFF\xFF\xFF\x05\x06\x00\x00\x00\xFF\xFF\xFF\xFF\x06\x00\x00\x00\xFF\xFF\xFF\xFF\x04\x05\x00\x00\x00\x01\x00\x00\x00\x04\x03\x00\x00\x00\x01\x00\x00\x00\x04\x01\x00\x00\x00\x01\x00\x00\x00\x04\x03\x00\x00\x00\xFF\xFF\xFF\xFF\x04\x01\x00\x00\x00\xFF\xFF\xFF\xFF\x00"

I64 box_x_min,box_x_max,box_y_min,box_y_max;

class Arrow
{
  Arrow *next,*last;
  F64 x,y,dx,dy;
} root;

   /* <1> <1> (image) */

BoolI8 bow_drawn;
F64 bow_x,bow_y,bow_theta;

U0 UpdateWin(TaskStruct *task)
{
  GrBitMap *base=GrAlias(gr_refreshed_base,task);
  F64 theta,x,y,dx,dy,
	   str_w,str_h,draw_len;
  Arrow *tempa;
  P3I32 ctrl[5];
  base->color=RED;
  GrLineRect4(base,box_x_min,box_y_min,box_x_max,box_y_max);

  x=LimitI64(ipx-task->win_pixel_left-task->win_scroll_x,box_x_min,box_x_max);
  y=LimitI64(ipy-task->win_pixel_top-task->win_scroll_y, box_y_min,box_y_max);
  dx=bow_x-x;
  dy=bow_y-y;

  if (bow_drawn && (dx|dy))
    bow_theta=Arg(dx,dy);
  else {
    bow_x=x;
    bow_y=y;
  }

  draw_len=Sqrt(dx*dx+dy*dy);
  str_w=draw_len/3;
  str_h=Sqrt(60*60-str_w*str_w);

  base->color=BLACK;
  GrLine(base,x-str_h/2*Cos(bow_theta+pi/2)+str_w*Cos(bow_theta),
	      y-str_h/2*Sin(bow_theta+pi/2)+str_w*Sin(bow_theta),
	      x,y);
  GrLine(base,x+str_h/2*Cos(bow_theta+pi/2)+str_w*Cos(bow_theta),
	      y+str_h/2*Sin(bow_theta+pi/2)+str_w*Sin(bow_theta),
	      x,y);

  MemSet(ctrl,0,sizeof(ctrl));
  ctrl[0].x=x-str_h/2*Cos(bow_theta+pi/2)+str_w*Cos(bow_theta);
  ctrl[0].y=y-str_h/2*Sin(bow_theta+pi/2)+str_w*Sin(bow_theta);
  ctrl[1].x=x-0.75*str_h/2*Cos(bow_theta+pi/2)+draw_len/2*Cos(bow_theta)+str_w*Cos(bow_theta);
  ctrl[1].y=y-0.75*str_h/2*Sin(bow_theta+pi/2)+draw_len/2*Sin(bow_theta)+str_w*Sin(bow_theta);
  ctrl[2].x=x+draw_len/2*Cos(bow_theta)+str_w*Cos(bow_theta);
  ctrl[2].y=y+draw_len/2*Sin(bow_theta)+str_w*Sin(bow_theta);
  ctrl[3].x=x+0.75*str_h/2*Cos(bow_theta+pi/2)+draw_len/2*Cos(bow_theta)+str_w*Cos(bow_theta);
  ctrl[3].y=y+0.75*str_h/2*Sin(bow_theta+pi/2)+draw_len/2*Sin(bow_theta)+str_w*Sin(bow_theta);
  ctrl[4].x=x+str_h/2*Cos(bow_theta+pi/2)+str_w*Cos(bow_theta);
  ctrl[4].y=y+str_h/2*Sin(bow_theta+pi/2)+str_w*Sin(bow_theta);

  base->color=BROWN;
  base->pen_width=2;
  Gr2BSpline3(base,ctrl,5);
  base->pen_width=1;

  if (bow_drawn)
    GrElemsPlotRotZ3b(base,x,y,0,__BIN_1,bow_theta);

  tempa=root.next;
  while (tempa!=&root) {
    theta=Arg(tempa->dx,tempa->dy);
    GrElemsPlotRotZ3b(base,tempa->x,tempa->y,0,__BIN_1,theta);
    tempa=tempa->next;
  }

  GrDel(base);
}

#define ANIMATE_SLEEP_MS	10

U0 AnimateTask(U64 dummy=0)
{
  nounusedwarn dummy;
  I64 x,y;
  Arrow *tempa,*tempa1;
  F64 dt,t0=tP(Fs->parent_task);
  while (TRUE) {
    dt=tP(Fs->parent_task)-t0;
    t0=tP(Fs->parent_task);
 
    x=LimitI64(ipx-Fs->parent_task->win_pixel_left-Fs->parent_task->win_scroll_x,
       box_x_min,box_x_max)+Fs->parent_task->win_pixel_left+Fs->parent_task->win_scroll_x;
    y=LimitI64(ipy-Fs->parent_task->win_pixel_top-Fs->parent_task->win_scroll_y,
       box_y_min,box_y_max)+Fs->parent_task->win_pixel_top+Fs->parent_task->win_scroll_y;
    if (ipx!=x || ipy!=y)
      SetIP(x,y);

    tempa=root.next;
    while (tempa!=&root) {
      tempa1=tempa->next;
      tempa->x+=tempa->dx*dt;
      tempa->y+=tempa->dy*dt;
      if (!(-Fs->parent_task->win_scroll_x<=tempa->x<Fs->parent_task->win_pixel_width-Fs->parent_task->win_scroll_x) ||
	  !(-Fs->parent_task->win_scroll_y<=tempa->y<Fs->parent_task->win_pixel_height-Fs->parent_task->win_scroll_y)) {
	RemQue(tempa);
	Free(tempa);
      }
      tempa=tempa1;
    }
    WinSync;
  }
}

U0 Init()
{
  I64 w=Fs->win_pixel_width,
     h=Fs->win_pixel_height;
  root.next=root.last=&root;
  box_x_min=7*w/16;
  box_y_min=6*h/8;
  box_x_max=9*w/16;
  box_y_max=7*h/8;
  bow_drawn=FALSE;
  bow_theta=-pi/2;
}

U0 CleanUp()
{
  Arrow *tempa=root.next,*tempa1;
  while (tempa!=&root) {
    tempa1=tempa->next;
    RemQue(tempa);
    Free(tempa);
    tempa=tempa1;
  }
}

U0 Zing()
{
  I64 msg_code,p1,p2;
  Arrow *tempa;
  MenuPush(
    "File {"
    "  Abort(,CH_SHIFT_ESC);"
    "  Exit(,CH_ESC);"
    "}"
    "Play {"
    "  Restart(,CH_CR);"
    "}"
  );
  SettingsPush; //See [C:/LT/Adam/TaskSettings.APZ,3] SettingsPush
  Preempt(OFF);
  WinBorder(OFF);
  WinMax;
  WordStat(OFF);

  LtfBottom;
  LtfClear;

  Init;
  Fs->animate_task=Spawn(&AnimateTask,NULL,"Animate",Fs);
  Fs->update_win=&UpdateWin;
  Fs->win_inhibit=WIF_ALL-WIF_GRAB_SCROLL;
  try {
    do {
      msg_code=GetMsg(&p1,&p2,1<<MSG_KEY_DOWN|1<<MSG_IP_L_DOWN|1<<MSG_IP_L_UP);
      switch (msg_code) {
	case MSG_KEY_DOWN:
	  switch (p1) {
	    case CH_CR:
	      CleanUp;
	      Init;
	      break;
	  }
	  break;
	case MSG_IP_L_DOWN:
	  bow_x=p1;
	  bow_y=p2;
	  bow_drawn=TRUE;
	  break;
	case MSG_IP_L_UP:
	  if(p1-bow_x || p2-bow_y) {
	    tempa=MAlloc(sizeof(Arrow));
	    tempa->dx=10.0*(bow_x-p1);
	    tempa->dy=10.0*(bow_y-p2);
	    tempa->x=p1;
	    tempa->y=p2;
	    InsQue(tempa,root.last);
	    Noise(50,8000,10000);
	  }
	  bow_drawn=FALSE;
	  break;
      }
    } while (!(msg_code==MSG_KEY_DOWN && (p1==CH_ESC || p1==CH_SHIFT_ESC)));
  } catch
    CatchAll;
  SettingsPop;
  CleanUp;
  MenuPop;
}


Zing;

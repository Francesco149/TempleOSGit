#define __BIN_1_TYPE 0x00000002
#define __BIN_1_SIZE 0x000000ED
#define __BIN_1 "\x02\x00\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x0B\x00\x00\x00\x1F\x00\x00\x00\x10\x00\x00\x00\x17\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x17\x00\x00\x00\x11\x00\x00\x00\x0D\x00\x00\x00\x05\x00\x00\x00\x11\x00\x00\x00\x0D\x00\x00\x00\x12\x00\x00\x00\x1F\x00\x00\x00\x05\x00\x00\x00\x0F\x00\x00\x00\x0C\x00\x00\x00\x14\x00\x00\x00\xFD\xFF\xFF\xFF\x05\x00\x00\x00\x0F\x00\x00\x00\xFE\xFF\xFF\xFF\x10\x00\x00\x00\x0C\x00\x00\x00\x05\x00\x00\x00\x11\x00\x00\x00\xFE\xFF\xFF\xFF\x17\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00\x17\x00\x00\x00\x08\x00\x00\x00\x1E\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00\x14\x00\x00\x00\xFD\xFF\xFF\xFF\x0B\x00\x00\x00\x0D\x00\x00\x00\x05\x00\x00\x00\x11\x00\x00\x00\xFB\xFF\xFF\xFF\x14\x00\x00\x00\xF5\xFF\xFF\xFF\x05\x00\x00\x00\x11\x00\x00\x00\x0C\x00\x00\x00\x11\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00\x11\x00\x00\x00\x1E\x00\x00\x00\x14\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00"
#define __BIN_2_TYPE 0x00000002
#define __BIN_2_SIZE 0x00000147
#define __BIN_2 "\x02\x00\x00\x00\x07\x08\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00\x38\x00\x00\x00\x16\x00\x00\x00\x2B\x00\x00\x00\x05\x00\x00\x00\x16\x00\x00\x00\x2B\x00\x00\x00\x18\x00\x00\x00\x1E\x00\x00\x00\x05\x00\x00\x00\x18\x00\x00\x00\x1E\x00\x00\x00\x1F\x00\x00\x00\x38\x00\x00\x00\x05\x00\x00\x00\x18\x00\x00\x00\x1E\x00\x00\x00\x11\x00\x00\x00\x05\x00\x00\x00\x05\x00\x00\x00\x16\x00\x00\x00\x09\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x05\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x09\x00\x00\x00\x1B\x00\x00\x00\x05\x00\x00\x00\xFE\xFF\xFF\xFF\x17\x00\x00\x00\x15\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00\x16\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x16\x00\x00\x00\x02\x00\x00\x00\x06\x05\x00\x00\x00\x05\x00\x00\x00\x17\x00\x00\x00\x09\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x19\x00\x00\x00\x14\x00\x00\x00\x1A\x00\x00\x00\x05\x00\x00\x00\x0E\x00\x00\x00\x18\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x17\x00\x00\x00\x12\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x08\x05\x00\x00\x00\x15\x00\x00\x00\x07\x00\x00\x00\x0F\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00\x08\x00\x00\x00\x0E\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00"
#define __BIN_3_TYPE 0x00000002
#define __BIN_3_SIZE 0x0000015B
#define __BIN_3 "\x02\x00\x00\x00\x07\x08\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x17\x00\x00\x00\x1F\x00\x00\x00\x0F\x00\x00\x00\x2B\x00\x00\x00\x05\x00\x00\x00\x0F\x00\x00\x00\x2C\x00\x00\x00\x0E\x00\x00\x00\x36\x00\x00\x00\x05\x00\x00\x00\x17\x00\x00\x00\x1F\x00\x00\x00\x1B\x00\x00\x00\x2B\x00\x00\x00\x05\x00\x00\x00\x1B\x00\x00\x00\x2B\x00\x00\x00\x21\x00\x00\x00\x34\x00\x00\x00\x05\x00\x00\x00\x18\x00\x00\x00\x1E\x00\x00\x00\x11\x00\x00\x00\x05\x00\x00\x00\x05\x00\x00\x00\x16\x00\x00\x00\x09\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x05\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x09\x00\x00\x00\x1B\x00\x00\x00\x05\x00\x00\x00\xFE\xFF\xFF\xFF\x17\x00\x00\x00\x15\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00\x16\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x16\x00\x00\x00\x02\x00\x00\x00\x06\x05\x00\x00\x00\x05\x00\x00\x00\x17\x00\x00\x00\x09\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x19\x00\x00\x00\x14\x00\x00\x00\x1A\x00\x00\x00\x05\x00\x00\x00\x0E\x00\x00\x00\x18\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x17\x00\x00\x00\x12\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x08\x05\x00\x00\x00\x15\x00\x00\x00\x07\x00\x00\x00\x0F\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00\x08\x00\x00\x00\x0E\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00"

//These are the coordinates of the player.
I8 x=0,y=GR_HEIGHT/2;


//This is a FIFO (first-in first-out) data structure
//which keeps track of bullets.  When a new bullet is
//fired, the shots_in value is increased by one.
//When a bullet expires, the shots_out value is increased
//by one.  The in and out values loop-around, back to
//the start of the arrays.
#define MAX_SHOTS 32
I8 shots_in=0,shots_out=0,sx[MAX_SHOTS],sy[MAX_SHOTS];



//This is a fifo which keeps track of the bad guys.
#define MAX_GOONS 32
I8 goons_in=0,goons_out=0,gx[MAX_GOONS],gy[MAX_GOONS];
BoolU4 g_dead[MAX_GOONS];


//This is a graphic for the player's character.
//Graphics are created and edited by pressing
//CTRL-R.  When created, they are assigned
//a number.  Press CTRL-T, right now, to see
//the hidden definition for the picture.  The
//text in quotes, you can set to whatever you want,
//but the ending number cannot be changed.  It
//is set when the graphic is created and is used
//in future references to the picture.


/* <PI 1> <1> (image) */







/* <PI 3> <2> (image) */









/* <PI 4> <3> (image) */








//This routine updates the window.  It is called
//by the window manager system task.  The tss refers to
//the task which owns the window.
void DrawIt(TssStruct *tss)
{
  I8 i,j;

  //This creates an alias to the screen's
  //bitmap.  grbase2 is the bitmap which
  //is redrawn every time the screen is updated.
  GrBitMap *base=GrAlias(grbase2,tss);

  ClearWinText(tss);

  //Press CTRL-T now to see the hidden part
  //where the picture number is encoded. IB stands
  //for "insert pointer to binary object".
  base->bkcolor=BLACK;
  GrElemsPlot(base,x,y,0,__BIN_1);

  i=shots_out;
  while (i!=shots_in) {
    j=(i++)&(MAX_SHOTS-1);
    GrLine(base,sx[j],sy[j],sx[j]-2,sy[j]);
  }
  i=goons_out;
  while (i!=goons_in) {
    j=(i++)&(MAX_SHOTS-1);
    base->bkcolor=BLACK;
    if (!g_dead[j]) {
      if (gx[j]%10>5)
	GrElemsPlot(base,gx[j],gy[j],0,__BIN_2);
      else
	GrElemsPlot(base,gx[j],gy[j],0,__BIN_3);
    }
  }
  GrDel(base);
  i=0;
  PlotWinStr(tss,"If you aspire to making games,",BLUE<<4+YELLOW,0,i++);
  PlotWinStr(tss,"you must learn to make-up rules.",BLUE<<4+YELLOW,0,i++);
}

//This routine is called when the task in charge of
//playing the background music is killed.  It turns off
//the sound and ends the task with Exit. 
void SongEndTsk()
{
  Sound(0);
  Exit;
}

void SongTsk()
{
  //This establishes a function which will be called when
  //this task is killed.
  Fs->end_task_cb=&SongEndTsk;
  ResetMusicSettings;
  while (TRUE) {
    Play("qDqDsDCDCetBCBqCqCqCqCqDqDsDCDCetBCBqCqCqCqCqCq"
	 "CsCCCCetCCBeBBeBBqBqBqCqCsCCCCetCCBeBBeBBqBqB");
  }
}

void Goons()
{
  U8 i,j,i1,j1,k=0,sc=0,ch=0,cmd,p1,p2;
  void *old_update=Fs->update_win;
  BoolU4 gun_on=FALSE;
  BoolU4 old_wordstat=WordStat(OFF);
  BoolU4 old_border=WinBorder(OFF);

  //This creates a task to play music in the background.
  TssStruct *song_tss=Spawn(&SongTsk,"Goons Song",Fs);

  SetTypeMatic(0);  //Make the keyboard faster

  WinMax;
  Fs->update_win=&DrawIt;
  while (ch!=CH_ESC && ch!=CH_CTRLQ) {
    if (cmd=ScanMsg(&p1,&p2,(1<<MSG_KEY_DOWN)|(1<<MSG_KEY_UP))) {
      //With KEYBOARD messages, the two message parameters
      //are the scan code and ascii value for the key.
      sc=p2; ch=p1;

      if (cmd==MSG_KEY_DOWN) {
	//The least significant byte of the scan code
	//identifies the key.
	if (sc.u1[0]==SC_CURSOR_DOWN) {
	  y+=10;
	  if (y>GR_HEIGHT-30)
	    y=GR_HEIGHT-30;
	} else if (sc.u1[0]==SC_CURSOR_UP) {
	  y-=10;
	  if (y<0)
	    y=0;
	} else if (sc.u1[0]==SC_CURSOR_RIGHT ||
	   ch==CH_SPACE)
	  gun_on=TRUE;
      } else if (cmd==MSG_KEY_UP) {
	if (sc.u1[0]==SC_CURSOR_RIGHT ||
	    ch==CH_SPACE)
	  gun_on=FALSE;
      }
    }

    i=shots_out;
    while (i!=shots_in) {
      j=(i++)&(MAX_SHOTS-1);
      sx[j]+=5;
      if (sx[j]>GR_WIDTH)
	shots_out++;
      else {
	i1=goons_out;
	while (i1!=goons_in) {
	  j1=(i1++)&(MAX_GOONS-1);
	  if (sy[j]>=gy[j1] && sy[j]<=gy[j1]+60 &&
	      sx[j]>=gx[j1] && sx[j]<=gx[j1]+40) {
	    g_dead[j1]=TRUE;
	  }
	}
      }
    }

    if (gun_on) {
      j=shots_in&(MAX_SHOTS-1);
      sx[j]=x+30;
      sy[j]=y+8;
      shots_in++;
    }

    //This runs one out of four passes through this loop.
    if (!(k % 4)) {
      i=goons_out;
      while (i!=goons_in) {
	j=(i++)&(MAX_GOONS-1);
	gx[j]-=1;
	if (gx[j]<25)
	  goons_out++;
      }
    }

    //This runs one out of 150 passes through this loop.
    if (!(k%150)) {
      j=goons_in&(MAX_GOONS-1);
      gx[j]=GR_WIDTH-30;
      gy[j]=RandU4%(GR_HEIGHT-50)+25;
      g_dead[j]=FALSE;
      goons_in++;
    }
    k++;
 
    Sleep(10); //Swap this task-out for 10 miliseconds.
  }
  Kill(song_tss);  //get rid of song task
  Fs->update_win=old_update; //Restore original window update routine
  WinBorder(old_border);
  WordStat(old_wordstat);
}

Goons;	// run program when #included

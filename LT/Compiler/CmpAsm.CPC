/* Project: Compiler.SPZ */
asm {
USE64

#define		IC_CODE	offset(IntermediateCode.ic_opcode)

CMP_OPT_NOP:
#assert IC_CODE==0
	DU16	EC_NOP;  //Must be at IC_CODE offset
	DU8	sizeof(IntermediateCode)-2 DUP(0);
// ************************************
_OPTNEXT::
	ENTER	0
	PUSH	RDI
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RDX,U64 SF_ARG2[RBP]
	
	MOV	RAX,U64 16[RDX]
	MOV	U64 24[RDX],RAX
	MOV	RAX,U64 8[RDX]
	MOV	U64 16[RDX],RAX
	MOV	RAX,U64 [RDX]
	MOV	U64 8[RDX],RAX
	MOV	U64 [RDX],RCX

	MOV	RDI,RDX

	MOV	RAX,RCX
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JBE	@@05
	STOSQ

@@05:	MOV	RAX,U64 8[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JBE	@@10
	STOSQ

@@10:	MOV	RAX,U64 16[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JBE	@@15
	STOSQ

@@15:	MOV	RAX,U64 24[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JBE	@@20
	STOSQ

@@20:	MOV	RAX,CMP_OPT_NOP
	ADD	RDX,32
	JMP	@@30

@@25:	STOSQ
@@30:	CMP	RDI,RDX
	JB	@@25

	POP	RDI
	LEAVE
	RET1	16
// ************************************
_OPTNEXT2::
	ENTER	0
	PUSH	RDI
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RDX,U64 SF_ARG2[RBP]
	
	MOV	RAX,U64 16[RDX]
	MOV	U64 24[RDX],RAX
	MOV	RAX,U64 8[RDX]
	MOV	U64 16[RDX],RAX
	MOV	RAX,U64 [RDX]
	MOV	U64 8[RDX],RAX
	MOV	U64 [RDX],RCX

	MOV	RDI,RDX

	MOV	RAX,RCX
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@05
	STOSQ

@@05:	MOV	RAX,U64 8[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@10
	STOSQ

@@10:	MOV	RAX,U64 16[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@15
	STOSQ

@@15:	MOV	RAX,U64 24[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@20
	STOSQ

@@20:	MOV	RAX,CMP_OPT_NOP
	ADD	RDX,32
	JMP	@@30

@@25:	STOSQ
@@30:	CMP	RDI,RDX
	JB	@@25

	POP	RDI
	LEAVE
	RET1	16

// ************************************
_OPTNEXT3::
	ENTER	0
	PUSH	RDI
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RDX,U64 SF_ARG2[RBP]
	
	MOV	RAX,U64 16[RDX]
	MOV	U64 24[RDX],RAX
	MOV	RAX,U64 8[RDX]
	MOV	U64 16[RDX],RAX
	MOV	RAX,U64 [RDX]
	MOV	U64 8[RDX],RAX
	MOV	U64 [RDX],RCX

	MOV	RDI,RDX

	MOV	RAX,RCX
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@05
	CMP	U16 IC_CODE[RAX],EC_NOP1
	JE	@@05
	STOSQ

@@05:	MOV	RAX,U64 8[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@10
	CMP	U16 IC_CODE[RAX],EC_NOP1
	JE	@@10
	STOSQ

@@10:	MOV	RAX,U64 16[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@15
	CMP	U16 IC_CODE[RAX],EC_NOP1
	JE	@@15
	STOSQ

@@15:	MOV	RAX,U64 24[RDX]
	CMP	U16 IC_CODE[RAX],EC_END_EXP
	JB	@@20
	CMP	U16 IC_CODE[RAX],EC_NOP1
	JE	@@20
	STOSQ

@@20:	MOV	RAX,CMP_OPT_NOP
	ADD	RDX,32
	JMP	@@30

@@25:	STOSQ
@@30:	CMP	RDI,RDX
	JB	@@25

	POP	RDI
	LEAVE
	RET1	16

// ************************************
_PRSPUSH::
	ENTER	0
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RAX,U64 offset(PrsStk.ptr)[RCX]
	INC	RAX
	MOV	RDX,U64 SF_ARG2[RBP]
	MOV	U64 [RCX+RAX*8],RDX
	MOV	U64 offset(PrsStk.ptr)[RCX],RAX
	LEAVE
	RET1	16

_PRSPOP::
	ENTER	0
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RBX,U64 offset(PrsStk.ptr)[RCX]
	MOV	RAX,U64 [RCX+RBX*8]
	DEC	RBX
	MOV	U64 offset(PrsStk.ptr)[RCX],RBX
	LEAVE
	RET1	8
_PRSPUSH2::
	ENTER	0
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RAX,U64 offset(PrsStk.ptr2)[RCX]
	INC	RAX
	MOV	RDX,U64 SF_ARG2[RBP]
	MOV	U64 256*8[RCX+RAX*8],RDX
	MOV	U64 offset(PrsStk.ptr2)[RCX],RAX
	LEAVE
	RET1	16

_PRSPOP2::
	ENTER	0
	MOV	RCX,U64 SF_ARG1[RBP]
	MOV	RBX,U64 offset(PrsStk.ptr2)[RCX]
	MOV	RAX,U64 256*8[RCX+RBX*8]
	DEC	RBX
	MOV	U64 offset(PrsStk.ptr2)[RCX],RBX
	LEAVE
	RET1	8
// ************************************
CMP_TEMPLATES::
	DU32	@@05,@@10,@@15;
	DU32	@@40,@@50,@@55,@@60;
	DU32	@@65,@@70;
	DU32	@@80,@@85,@@100,@@105;
	DU32	@@110;
	DU32	@@115;

@@05:	//INC
	PUSH	RAX
	FLD1
	FADD	ST0,U64 [RSP]
	FSTP	U64 [RSP]
	POP	RAX

@@10:	//DEC
	PUSH	RAX
	FLD1
	FSUBR	ST0,U64 [RSP]
	FSTP	U64 [RSP]
	POP	RAX

@@15:	//POWER
	OR	RAX,RAX	//To power of zero?
	JNZ	@@20
	MOV	RAX,1.0
	JMP	@@35
@@20:	OR	RDX,RDX	//zero to a power?
	JNZ	@@25
	XOR	RAX,RAX
	JMP	@@35
@@25:	MOV	RCX,RAX //RCX=pow
	PUSH	RDX	//RDX=base
	PUSH	RAX
	PUSH	0
	MOV	RBX,RSP

	FSTCW	U16 [RBX]
	MOV	AX,U16 [RBX]
	MOV	U16 2[RBX],AX
	OR	AX,0x0C00
	MOV	U16 [RBX],AX
	FLDCW	U16 [RBX]
	FLD	U64 8[RBX]
	FLD	U64 16[RBX]
	FABS	//base should be pos
	FYL2X	// y*log2(x)
	FST	U64 16[RBX]
	FRNDINT
	FLD	U64 16[RBX]
	FSUBRP	ST1,ST0
	F2XM1
	FLD1
	FADDP	ST1,ST0
	FSTP	U64 8[RBX]
	FLD	U64 16[RBX]
	FLD	U64 8[RBX]
	FSCALE	// ST0<<ST1
	OR	RDX,RDX //was base neg?
	JGE	@@30
	MOV	U64 8[RBX],RCX
	FLD	U64 8[RBX]
	FISTTP	U64 8[RBX]
	TEST	U64 8[RBX],1
	JZ	@@30	//was pow odd?
	FCHS
@@30:	FSTP	U64 16[RBX]
	FFREE	ST0
	FINCSTP
	FLDCW	U16 2[RBX]
	ADD	RSP,16
	POP	RAX
@@35:

@@40:	//MOD
	PUSH	RDX
	PUSH	RAX
	MOV	RBX,RSP
	FLD	U64 [RBX]
	FLD	U64 8[RBX]
@@45:	FPREM
	FSTSW
	TEST	AX,0x400
	JNZ	@@45
	FSTP	U64 [RBX]
	FFREE	ST0
	FINCSTP
	POP	RAX
	ADD	RSP,8

@@50:	//LESS
	PUSH	RDX
	PUSH	RAX
	FLD	U64 [RSP]
	FLD	U64 8[RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,0
	ADC	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,16

@@55:	//GREATER
	PUSH	RDX
	PUSH	RAX
	FLD	U64 8[RSP]
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,0
	ADC	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,16

@@60:	//LESS_EQUAL
	PUSH	RDX
	PUSH	RAX
	FLD	U64 8[RSP]
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,1
	SBB	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,16

@@65:	//GREATER_EQUAL
	PUSH	RDX
	PUSH	RAX
	FLD	U64 [RSP]
	FLD	U64 8[RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,1
	SBB	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,16

@@70: //StrLen
	MOV	RDX,RAX
@@75:	MOV	BL,U8 [RAX]
	INC	RAX
	OR	BL,BL
	JNZ	@@75
	SUB	RAX,RDX
	DEC	RAX

@@80: //RDTSC
	RDTSC
	SHL	RDX,32
	ADD	RAX,RDX

@@85: //SignI64
	OR	RAX,RAX
	JZ	@@95
	JS	@@90
	MOV	RAX,1
	JMP	@@95
@@90:	MOV	RAX,-1
@@95:
@@100:
@@105:
@@110:
	XOR	RAX,RAX
	MOV	EAX,HPET_MAIN_CNT
	MOV	RAX,U64 [RAX]
@@115:

// ************************************
CMP_TEMPLATES_DONT_POP::
	DU32	@@05,@@10,@@15;
	DU32	@@20,@@25,@@30,@@35;
	DU32	@@40,@@45;
	DU32	@@50,@@55,@@60,@@65;
	DU32	@@70;
	DU32	@@75;

@@05:	//INC
	PUSH	RAX
	FLD1
	FADD	ST0,U64 [RSP]
	FST	U64 [RSP]
	POP	RAX

@@10:	//DEC
	PUSH	RAX
	FLD1
	FSUBR	ST0,U64 [RSP]
	FST	U64 [RSP]
	POP	RAX

@@15:

@@20:

@@25:
@@30:
@@35:
@@40:
@@45:
@@50:
@@55:
@@60:
@@65:
	PUSH	RAX
	FLD	U64 [RSP]
	ADD	RSP,8
@@70:
@@75:

// ************************************
CMP_TEMPLATES_DONT_PUSH::
	DU32	@@05,@@10,@@15;
	DU32	@@20,@@25,@@35,@@40;
	DU32	@@45,@@55;
	DU32	@@60,@@65,@@70,@@75;
	DU32	@@80;
	DU32	@@85;

@@05:	//INC
	SUB	RSP,8
	FLD1
	FADDP	ST1,ST0
	FSTP	U64 [RSP]
	POP	RAX

@@10:	//DEC
	SUB	RSP,8
	FLD1
	FSUBP	ST1,ST0
	FSTP	U64 [RSP]
	POP	RAX

@@15:

@@20:
@@25:	//LESS
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,0
	JZ	@@30
	MOV	RAX,1
	SBB	RAX,0
@@30:	FFREE	ST0
	FINCSTP
	ADD	RSP,8

@@35:	//GREATER
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,0
	ADC	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,8

@@40:	//LESS_EQUAL
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,1
	SBB	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,8

@@45:	//GREATER_EQUAL
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,1
	JZ	@@50
	MOV	RAX,0
	ADC	RAX,0
@@50:	FFREE	ST0
	FINCSTP
	ADD	RSP,8
@@55:
@@60:
@@65:
@@70: //FSTP
	SUB	RSP,8
	FSTP	U64 [RSP]
	POP	RAX
@@75:
@@80:
@@85:

// ************************************
CMP_TEMPLATES_DONT_PUSH_POP::
	DU32	@@05,@@10,@@15;
	DU32	@@20,@@25,@@30,@@35;
	DU32	@@40,@@45;
	DU32	@@50,@@55,@@60,@@65;
	DU32	@@70;
	DU32	@@75;

@@05:	//INC
	SUB	RSP,8
	FLD1
	FADDP	ST1,ST0
	FST	U64 [RSP]
	POP	RAX

@@10:	//DEC
	SUB	RSP,8
	FLD1
	FSUBP	ST1,ST0
	FST	U64 [RSP]
	POP	RAX

@@15:

@@20:

@@25:
@@30:
@@35:
@@40:
@@45:
@@50:
@@55:
@@60:
@@65:
@@70:
@@75:


// ************************************
CMP_TEMPLATES_DONT_PUSH2::
	DU32	@@05,@@10,@@15;
	DU32	@@20,@@25,@@30,@@40;
	DU32	@@50,@@55;
	DU32	@@60,@@65,@@70,@@75;
	DU32	@@80;
	DU32	@@85;

@@05:
@@10:
@@15:

@@20:
@@25:	//LESS
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,0
	ADC	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,8

@@30:	//GREATER
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,0
	JZ	@@35
	MOV	RAX,1
	SBB	RAX,0
@@35:	FFREE	ST0
	FINCSTP
	ADD	RSP,8

@@40:	//LESS_EQUAL
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,1
	JZ	@@45
	MOV	RAX,0
	ADC	RAX,0
@@45:	FFREE	ST0
	FINCSTP
	ADD	RSP,8

@@50:	//GREATER_EQUAL
	PUSH	RAX
	FLD	U64 [RSP]
	FCOMIP	ST0,ST1
	MOV	RAX,1
	SBB	RAX,0
	FFREE	ST0
	FINCSTP
	ADD	RSP,8
@@55:
@@60:
@@65:
@@70:
@@75:
@@80:
@@85:
}

LTextern _OPTNEXT BoolI8 OptNext(IntermediateCode *tempi,
	       IntermediateCode **temp_lag);

LTextern _OPTNEXT2 BoolI8 OptNext2(IntermediateCode *tempi,
	       IntermediateCode **temp_lag);

LTextern _OPTNEXT3 BoolI8 OptNext3(IntermediateCode *tempi,
	       IntermediateCode **temp_lag);

LTextern _PRSPUSH U0 PrsPush(PrsStk *ps,I64 val);
LTextern _PRSPOP I64 PrsPop(PrsStk *ps);
LTextern _PRSPUSH2 U0 PrsPush2(PrsStk *ps,I64 val);
LTextern _PRSPOP2 I64 PrsPop2(PrsStk *ps);

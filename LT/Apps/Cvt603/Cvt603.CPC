class OldGrSprite
{
  OldGrSprite *next,*last;

  U0 start;
  U32 type;
  union {
    U8 color4;
    U8 dither_color4;
    I32 x1;
    I32 num;
    I32 width;
    I32 vertex_cnt; //Mesh
  }
  union {
    I32 y1;
    I32 height;
    I32 triangle_cnt; //Mesh
  }
  union {
    I32 z1;
    I32 x2;
    U8 st[4];
  }
  union {
    I32 y2;
    I32 shiftable_vertex_cnt //Shiftable Mesh
  }
  union {
    F64 linespeed;
    F64 rot_angle;
    I32 bkcolor;
    I32 shiftable_triangle_cnt //Shiftable Mesh
  }
  I32 sides;
};

U64 OldGrSpriteSize(OldGrSprite *tempg)
{
  U64 i=gr_sprite_base_size[tempg->type]+3;
  switch (tempg->type) {
    case GRST_POLYLINE:
      i+=tempg->num<<1*sizeof(I32);
      break;
    case GRST_TEXT:
      i+=StrLen(tempg->st)+1;
      break;
    case GRST_SPEEDLINE:
      i+=tempg->num*(2*sizeof(I32)+sizeof(F64));
      break;
    case GRST_BITMAP4:
    case GRST_BITMAP4_TRANSPARENT:
      i+=((tempg->width+7)&~7)*tempg->height*4/8;
      break;
    case GRST_POLYPOINT:
//Backward compatibility kludge: num should num-1
      i+=sizeof(I32)<<1+(tempg->num*3+7)>>3;
      break;
    case GRST_BSPLINE2:
    case GRST_BSPLINE3:
    case GRST_BSPLINE2_CLOSED:
    case GRST_BSPLINE3_CLOSED:
      i+=tempg->num*sizeof(P3I32);
      break;
    case GRST_MESH:
      i+=tempg->vertex_cnt*sizeof(P3I32)+tempg->triangle_cnt*sizeof(GrMeshTri);
      break;
    case GRST_SHIFTABLE_MESH:
      i+=tempg->shiftable_vertex_cnt*sizeof(P3I32)+tempg->shiftable_triangle_cnt*sizeof(GrMeshTri);
      break;
  }
  return i;
}

U0 Cvt603GrSprite(LtfBinEntry *b)
{
  U8 *result=MAlloc(b->size),*dst=result;
  OldGrSprite *tempg=b->data-offset(OldGrSprite.start);
  I64 s,s1;
  while (TRUE) {
    if (tempg->type>=GRST_NUM_TYPES)
      ThrowBreak;
    s=OldGrSpriteSize(tempg);
    if (s>0x1000000)
      ThrowBreak;
    if (tempg->type==GRST_POLYPOINT) {
      tempg->num--;
      s1=gr_sprite_base_size[tempg->type]+3;
      s1+=sizeof(I32)<<1+(tempg->num*3+7)>>3;
    } else
      s1=s;
    MemCpy(dst,&tempg->type,1);
    dst++;
    if (s1>4) {
      MemCpy(dst,&tempg->x1,s1-4);
      dst+=s1-4;
    }
    if (!tempg->type)
      break;
    tempg><(U8 *)+=s;
  }
  Free(b->data);
  b->data=result;
  b->size=dst-result;
}

BoolI64 Cvt603File(U8 *filename,U64 *_fuf_flags)
{
  nounusedwarn _fuf_flags;
  Ltf *l=LtfRead(filename);
  LtfBinEntry *b=l->bin_root.next;
  BoolI8 modified=FALSE;
  while (b!=&l->bin_root) {
    if (b->type==LTFBT_GRSPRITE) {
      PrintF("Size:%04X File:%s\r\n",b->size,filename);
      if (b->size>0x1000000)
	ThrowBreak;
      Cvt603GrSprite(b);
      modified=TRUE;
    }
    b=b->next;
  }
  if (modified)
    LtfWrite(l);
  LtfDel(l);
  return modified;
}

U0 Cvt603List(LTDirEntry *tempm1,U64 *_fuf_flags)
{
  LTDirEntry *tempm2;
  while (tempm1) {
    tempm2=tempm1->next;
    if (tempm1->attr & LT_ATTR_DIR) {
      if (tempm1->sub) {
	PrintF("%S %s\r\n","ST_SCANNING_DIR",tempm1->full_name);
	Cvt603List(tempm1->sub,_fuf_flags);
      }
    } else {
      if (Cvt603File(tempm1->full_name,_fuf_flags))
	Touch(tempm1->full_name,"","",tempm1->datetime);
    }
    LTDirEntryDel(tempm1);
    tempm1=tempm2;
  }
}

U0 Cvt603(U8 *files_find_mask=TEXT_FILE_MASK,U8 *flags=NULL)
{
  U64 fuf_flags=0;
  GetFFlags(&fuf_flags,Define("ST_FILE_UTIL_FLAGS"),"+r");
  GetFFlags(&fuf_flags,Define("ST_FILE_UTIL_FLAGS"),flags);
  Cvt603List(FilesFind(files_find_mask,fuf_flags),&fuf_flags);
}

#define __BIN_1_TYPE 0x00000002
#define __BIN_1_SIZE 0x00000074
#define __BIN_1 "\x05\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x08\x00\x00\x00\xF4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x00\x00\x00\x00\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x12\xF8\xFF\xFF\xFF\x00\x00\x00\x00\x04\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x00\x00\x00\x00\xE4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xE4\xFF\xFF\xFF\x00\x00\x00\x00\xC8\xFF\xFF\xFF\x00\x00\x00\x00\x00"
#define __BIN_2_TYPE 0x00000002
#define __BIN_2_SIZE 0x000000CD
#define __BIN_2 "\x05\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x08\x00\x00\x00\xF8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xF8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xFC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\xFC\xFF\xFF\xFF\x04\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x04\x00\x00\x00\xF8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xE4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE8\xFF\xFF\xFF\x04\x00\x00\x00\xE4\xFF\xFF\xFF\x04\x00\x00\x00\x05\xE4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE4\xFF\xFF\xFF\x04\x00\x00\x00\xC8\xFF\xFF\xFF\x04\x00\x00\x00\x00"
#define __BIN_3_TYPE 0x00000002
#define __BIN_3_SIZE 0x00000100
#define __BIN_3 "\x05\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xEC\xFF\xFF\xFF\x00\x00\x00\x00\x05\xEC\xFF\xFF\xFF\x00\x00\x00\x00\xE8\xFF\xFF\xFF\x04\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x04\x00\x00\x00\xE0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\xF8\xFF\xFF\xFF\x04\x00\x00\x00\x05\xF8\xFF\xFF\xFF\x04\x00\x00\x00\xF0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF0\xFF\xFF\xFF\x08\x00\x00\x00\xE0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\xF8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xF8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xDC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE8\xFF\xFF\xFF\x04\x00\x00\x00\xDC\xFF\xFF\xFF\x04\x00\x00\x00\x05\xDC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xDC\xFF\xFF\xFF\x04\x00\x00\x00\xC8\xFF\xFF\xFF\x04\x00\x00\x00\x00"
#define __BIN_5_TYPE 0x00000002
#define __BIN_5_SIZE 0x0000010D
#define __BIN_5 "\x05\xD8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xE4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xE4\xFF\xFF\xFF\x00\x00\x00\x00\xE0\xFF\xFF\xFF\x04\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x04\x00\x00\x00\xD8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x00\x00\x00\x00\xF0\xFF\xFF\xFF\x04\x00\x00\x00\x05\xF0\xFF\xFF\xFF\x04\x00\x00\x00\xE8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x08\x00\x00\x00\xD8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x00\x00\x00\x00\xF0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xF0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xD8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x12\xF8\xFF\xFF\xFF\x00\x00\x00\x00\x04\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xD4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE0\xFF\xFF\xFF\x04\x00\x00\x00\xD4\xFF\xFF\xFF\x04\x00\x00\x00\x05\xD4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xD4\xFF\xFF\xFF\x04\x00\x00\x00\xC8\xFF\xFF\xFF\x04\x00\x00\x00\x00"
#define __BIN_6_TYPE 0x00000002
#define __BIN_6_SIZE 0x00000155
#define __BIN_6 "\x05\xD8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xE4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xE4\xFF\xFF\xFF\x00\x00\x00\x00\xE0\xFF\xFF\xFF\x04\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x04\x00\x00\x00\xD8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xEF\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xDD\xFF\xFF\xFF\xF7\xFF\xFF\xFF\x05\xDD\xFF\xFF\xFF\xF7\xFF\xFF\xFF\xE6\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE6\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xEA\xFF\xFF\xFF\x00\x00\x00\x00\x05\xEA\xFF\xFF\xFF\x00\x00\x00\x00\xE5\xFF\xFF\xFF\x05\x00\x00\x00\x05\xE5\xFF\xFF\xFF\x05\x00\x00\x00\xDD\xFF\xFF\xFF\x08\x00\x00\x00\x05\xDD\xFF\xFF\xFF\x08\x00\x00\x00\xF0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xF8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\xF8\xFF\xFF\xFF\x04\x00\x00\x00\x05\xF8\xFF\xFF\xFF\x04\x00\x00\x00\xF0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xD4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xDC\xFF\xFF\xFF\x04\x00\x00\x00\xDC\xFF\xFF\xFF\x04\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x04\x00\x00\x00\xD4\xFF\xFF\xFF\x04\x00\x00\x00\x05\xD4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xD4\xFF\xFF\xFF\x04\x00\x00\x00\xC8\xFF\xFF\xFF\x04\x00\x00\x00\x00"
#define __BIN_7_TYPE 0x00000002
#define __BIN_7_SIZE 0x00000100
#define __BIN_7 "\x05\xD4\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xD4\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xD4\xFF\xFF\xFF\x0C\x00\x00\x00\xF0\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xF0\xFF\xFF\xFF\x0C\x00\x00\x00\xF8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF8\xFF\xFF\xFF\x08\x00\x00\x00\xFC\xFF\xFF\xFF\x04\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x04\x00\x00\x00\xFC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xFC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xF8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF0\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xF0\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xD4\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xD4\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xD0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xD4\xFF\xFF\xFF\x00\x00\x00\x00\xD0\xFF\xFF\xFF\x00\x00\x00\x00\x05\xD4\xFF\xFF\xFF\x08\x00\x00\x00\xD0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xD0\xFF\xFF\xFF\x00\x00\x00\x00\xC8\xFF\xFF\xFF\x00\x00\x00\x00\x05\xD0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xD0\xFF\xFF\xFF\x08\x00\x00\x00\xC8\xFF\xFF\xFF\x08\x00\x00\x00\x00"
#define __BIN_8_TYPE 0x00000002
#define __BIN_8_SIZE 0x00000122
#define __BIN_8 "\x05\xE0\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xEC\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xEC\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xF4\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\xF4\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x08\x00\x00\x00\xEC\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xEC\xFF\xFF\xFF\x0C\x00\x00\x00\xE0\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x0C\x00\x00\x00\xE8\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x08\x00\x00\x00\xEC\xFF\xFF\xFF\x00\x00\x00\x00\x05\xEC\xFF\xFF\xFF\x00\x00\x00\x00\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE0\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xDC\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xEC\xFF\xFF\xFF\x00\x00\x00\x00\xDC\xFF\xFF\xFF\x00\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x08\x00\x00\x00\xDC\xFF\xFF\xFF\x08\x00\x00\x00\x05\xDC\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xDC\xFF\xFF\xFF\x00\x00\x00\x00\xC8\xFF\xFF\xFF\x00\x00\x00\x00\x05\xDC\xFF\xFF\xFF\x08\x00\x00\x00\xC8\xFF\xFF\xFF\x08\x00\x00\x00\x00"
#define __BIN_9_TYPE 0x00000002
#define __BIN_9_SIZE 0x000000DA
#define __BIN_9 "\x05\xCC\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xCC\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xCC\xFF\xFF\xFF\x0C\x00\x00\x00\xE8\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xE8\xFF\xFF\xFF\x0C\x00\x00\x00\xF0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xF0\xFF\xFF\xFF\x08\x00\x00\x00\xF4\xFF\xFF\xFF\x04\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x04\x00\x00\x00\xF4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xF4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE8\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xE8\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xCC\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\xF8\xFF\xFF\xFF\x00\x00\x00\x00\x04\x00\x00\x00\x05\xCC\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xCC\xFF\xFF\xFF\x00\x00\x00\x00\xC8\xFF\xFF\xFF\x00\x00\x00\x00\x05\xCC\xFF\xFF\xFF\x08\x00\x00\x00\xC8\xFF\xFF\xFF\x08\x00\x00\x00\x00"
#define __BIN_10_TYPE 0x00000002
#define __BIN_10_SIZE 0x0000012F
#define __BIN_10 "\x05\xD8\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xE4\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x05\xE4\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xEC\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xEC\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x00\x00\x00\x00\xEC\xFF\xFF\xFF\x08\x00\x00\x00\x05\xEC\xFF\xFF\xFF\x08\x00\x00\x00\xE4\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xE4\xFF\xFF\xFF\x0C\x00\x00\x00\xD8\xFF\xFF\xFF\x0C\x00\x00\x00\x05\xD8\xFF\xFF\xFF\x0C\x00\x00\x00\xE0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x08\x00\x00\x00\xE4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xE4\xFF\xFF\xFF\x00\x00\x00\x00\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xD8\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x12\xF8\xFF\xFF\xFF\x00\x00\x00\x00\x04\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xD4\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xE4\xFF\xFF\xFF\x00\x00\x00\x00\xD4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x08\x00\x00\x00\xD4\xFF\xFF\xFF\x08\x00\x00\x00\x05\xD4\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xD0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xD4\xFF\xFF\xFF\x00\x00\x00\x00\xD0\xFF\xFF\xFF\x00\x00\x00\x00\x05\xD4\xFF\xFF\xFF\x08\x00\x00\x00\xD0\xFF\xFF\xFF\x08\x00\x00\x00\x00"
#define __BIN_4_TYPE 0x00000002
#define __BIN_4_SIZE 0x000000DA
#define __BIN_4 "\x05\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xE0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE0\xFF\xFF\xFF\x08\x00\x00\x00\xF0\xFF\xFF\xFF\x08\x00\x00\x00\x05\xE0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\x05\xF0\xFF\xFF\xFF\xF8\xFF\xFF\xFF\xF4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xF4\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xF4\xFF\xFF\xFF\x00\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x00\x00\x00\x00\xF4\xFF\xFF\xFF\x04\x00\x00\x00\x05\xF4\xFF\xFF\xFF\x04\x00\x00\x00\xF0\xFF\xFF\xFF\x08\x00\x00\x00\x12\xF8\xFF\xFF\xFF\x00\x00\x00\x00\x04\x00\x00\x00\x05\xFC\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xE0\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xDC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xE0\xFF\xFF\xFF\x04\x00\x00\x00\xDC\xFF\xFF\xFF\x04\x00\x00\x00\x05\xDC\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xC8\xFF\xFF\xFF\xFC\xFF\xFF\xFF\x05\xDC\xFF\xFF\xFF\x04\x00\x00\x00\xC8\xFF\xFF\xFF\x04\x00\x00\x00\x00"

#define MAX_TABLE_SIZE 0x10000

I64 min_xx,max_xx,min_yy,max_yy;
I64 cur_output,y,pass,table_size=MAX_TABLE_SIZE;
U8 gate_type_table[MAX_TABLE_SIZE];

BoolI8 displayed_design[MAX_TABLE_SIZE];
BoolI8 added_this_pass[MAX_TABLE_SIZE];

U16 input1_table[MAX_TABLE_SIZE],
   input2_table[MAX_TABLE_SIZE],
   input3_table[MAX_TABLE_SIZE];


  /* <NOT>   <1> (image) */


  /* <AND>   <2> (image) */


  /* <OR>    <3> (image) */



  /* <NAND>  <4> (image) */



  /* <NOR>   <5> (image) */


  /* <XOR>   <6> (image) */



  /* <AND3>  <7> (image) */



  /* <OR3>   <8> (image) */



  /* <NAND3> <9> (image) */



  /* <NOR3> <10> (image) */




I64 logic_progress;

U8 *ProgressCB(Ltf *l,LtfEntry *ll,TaskStruct *mem_task)
{
  U8 *st=MAlloc(32,mem_task);
  nounusedwarn l,ll;
  SPrintF(st,"%08X",logic_progress);
  return st;
}

U0 InstallLogicProgress()
{
  LtfEntry *ll;
  BoolI8 old_preempt=Preempt(OFF);
  LtfPutS(LtfCur,"$FG,LTRED$");
  ll=LtfPutS(LtfCur,"$TX+TC,\" \"$");
  ll->tag_cb=&ProgressCB;
  LtfPutS(LtfCur,"$FG$");
  Preempt(old_preempt);
}


U8 *gate_type_list="NULL\0OUTPUT\0INPUT\0"
     "NOT\0AND\0OR\0NAND\0NOR\0XOR\0AND3\0OR3\0NAND3\0NOR3\0";

#define GT_NULL   0  //Specifies that table entry has not been filled-in
#define GT_OUTPUT 1  //Specifies the table entry is a desired output
#define GT_INPUT  2  //Specifies that table entry comes from an input signal

#define GT_FIRST_REAL_GATE 3
#define GT_NOT	  3
#define GT_AND	  4
#define GT_OR	  5
#define GT_NAND   6
#define GT_NOR	  7
#define GT_XOR	  8
#define GT_AND3   9
#define GT_OR3	  10
#define GT_NAND3  11
#define GT_NOR3   12
#define GT_NUM_ENTRIES 13

#define MAX_SELECTED_GATES 128

GrElem *imgs[GT_NUM_ENTRIES]={
NULL,
NULL,
NULL,
__BIN_1,
__BIN_2,
__BIN_3,
__BIN_4,
__BIN_5,
__BIN_6,
__BIN_7,
__BIN_8,
__BIN_9,
__BIN_10};



I64 num_inputs_entered,num_outputs_entered;
I64 num_selected_gates,
    selected_gates[MAX_SELECTED_GATES];


U0 PmtGates()
{
  I64 i;
  U8 *st;

  PutS("\r\nEnter the available gate types in the order you prefer them to be used.\r\n"
    "Your choices are:\r\n");
  for (i=GT_FIRST_REAL_GATE;i<GT_NUM_ENTRIES;i++)
    PrintF("%z ",i,gate_type_list);
  CrLf;

  num_selected_gates=0;
  while (num_selected_gates<GT_NUM_ENTRIES) {
    PrintF("%d",num_selected_gates);
    st=PmtStr(" Gate: ");
    if (!*st) {
      Free(st);
      return;
    }
    i=ListEntryMatch(st,gate_type_list,LEF_IGNORE_CASE);
    Free(st);
    if (i<GT_FIRST_REAL_GATE)
      PutS("Invalid response\r\n");
    else
      selected_gates[num_selected_gates++]=i;
  }
}


U0 InitGateTable()
{
  I64 i;
  do {
    table_size=PmtI64("\r\nTable size in hex (3 input=0x100,4=0x10000): ",0);
    if (table_size>MAX_TABLE_SIZE)
      PutS("Too large\r\n");
    else if (table_size<1) {
      PutS("No table specified, aborting.\r\n");
      ThrowBreak;
    }
  } while (table_size>MAX_TABLE_SIZE);
 
  for (i=0;i<table_size;i++) {
    gate_type_table[i]=GT_NULL;
    displayed_design[i]=FALSE;
  }

  PutS("\r\nEnter the hex truth table column values of inputs.\r\n");
  if (table_size<=0x100)
    PutS("For example, enter A=0xF0, B=0xCC and C=0xAA.\r\n");
  else
    PutS("For example, enter A=0xFF00, B=0xF0F0, C=0xCCCC and D=0xAAAA.\r\n");
  num_inputs_entered=0;
  while (TRUE) {
    PrintF("Input %C: ",'A'+num_inputs_entered);
    i=PmtI64("",-1);
    if (i<0) break;
    if (i>table_size)
      PutS("Too large\r\n");
    else {
      if (gate_type_table[i])
	PutS("Duplicate\r\n");
      else {
	gate_type_table[i]=GT_INPUT;
	input1_table[i]=num_inputs_entered++;
      }
    }
  }
  if (!num_inputs_entered) {
    PutS("No inputs specified, aborting.\r\n");
    ThrowBreak;
  }

  PutS("\r\nEnter the hex truth table columns values of the outputs.\r\n");
  num_outputs_entered=0;
  while (TRUE) {
    PrintF("Output %C: ",'A'+num_outputs_entered);
    i=PmtI64("",-1);
    if (i<0) break;
    if (i>table_size)
      PutS("Too large\r\n");
    else {
      if (gate_type_table[i]==GT_INPUT)
	PrintF("To produce this output, connect to input %C\r\n",
	  'A'+input1_table[i]);
      else if (gate_type_table[i]==GT_OUTPUT)
	PutS("Duplicate\r\n");
      else {
	gate_type_table[i]=GT_OUTPUT;
	input1_table[i]=num_outputs_entered++;
      }
    }
  }

  if (!num_outputs_entered) {
    PutS("No output specified, aborting.\r\n");
    ThrowBreak;
  }
}


U0 DisplayExtents(U64 output, I64 depth,I64 *x_out,I64 *y_out)
{
  I64 type=gate_type_table[output],
    xx=(pass-depth)*64-32,yy,x1,y1,x2,y2,x3,y3;
  yy=y;
  if (x_out) *x_out=xx;
  if (y_out) *y_out=y;

  if (displayed_design[output] && type!=GT_INPUT)
    y+=10;
  else
  switch (type) {
    case GT_INPUT:
      y+=10;
      break;
    case GT_NOT:
      if (!displayed_design[output]) {
	y+=16;
	DisplayExtents(input1_table[output],depth+1,&x1,&y1);
	yy=y1;
	if (y_out) *y_out=yy;
      }
      break;
    case GT_AND:
    case GT_OR:
    case GT_NAND:
    case GT_NOR:
    case GT_XOR:
      if (!displayed_design[output]) {
	y+=24;
	DisplayExtents(input1_table[output],depth+1,&x1,&y1);
	DisplayExtents(input2_table[output],depth+1,&x2,&y2);
	yy=(y1+y2)/2;
	if (y_out) *y_out=yy;
      }
      break;
    case GT_AND3:
    case GT_OR3:
    case GT_NAND3:
    case GT_NOR3:
      if (!displayed_design[output]) {
	y+=32;
	DisplayExtents(input1_table[output],depth+1,&x1,&y1);
	DisplayExtents(input2_table[output],depth+1,&x2,&y2);
	DisplayExtents(input3_table[output],depth+1,&x3,&y3);
	yy=(y1+y2+y3)/3;
	if (y_out) *y_out=yy;
      }
      break;
  }
  if (xx<min_xx) min_xx=xx;
  if (xx>max_xx) max_xx=xx;
  if (yy<min_yy) min_yy=yy;
  if (yy>max_yy) max_yy=yy;
  displayed_design[output]=TRUE;
}

U0 DisplayDesign(GrBitMap *base,U64 output, I64 depth,I64 *x_out,I64 *y_out)
{
  I64 type=gate_type_table[output],
    xx=(pass-depth)*64-32,yy,x1,y1,x2,y2,x3,y3;

  yy=y;
  if (x_out) *x_out=xx;
  if (y_out) *y_out=y;

  if (displayed_design[output] && type!=GT_INPUT) {
    base->color=GREEN;
    GrPutS3(base,xx-FONT_WIDTH*3,y-4,0,"Dup");
    y+=10;
  } else
  switch (type) {
    case GT_INPUT:
      base->color=GREEN;
      GrPrintF3(base,xx-FONT_WIDTH-4,y-4,0,"%C",'A'+input1_table[output]);
      y+=10;
      break;
    case GT_NOT:
      if (!displayed_design[output]) {
	y+=16;
	DisplayDesign(base,input1_table[output],depth+1,&x1,&y1);
	yy=y1;

	base->color=BLUE;
	GrElemsPlot3(base,xx,yy,0,
	  imgs[type]);

	base->color=RED;
	GrLine3(base,xx-56,yy,0,x1,y1,0);

	if (y_out) *y_out=yy;
      }
      break;
    case GT_AND:
    case GT_OR:
    case GT_NAND:
    case GT_NOR:
    case GT_XOR:
      if (!displayed_design[output]) {
	y+=24;
	DisplayDesign(base,input1_table[output],depth+1,&x1,&y1);
	DisplayDesign(base,input2_table[output],depth+1,&x2,&y2);
	yy=(y1+y2)/2;

	base->color=BLUE;
	GrElemsPlot3(base,xx,yy,0,imgs[type]);

	base->color=RED;
	GrLine3(base,xx-56,yy-4,0,x1,y1,0);
	GrLine3(base,xx-56,yy+4,0,x2,y2,0);

	if (y_out) *y_out=yy;
      }
      break;
    case GT_AND3:
    case GT_OR3:
    case GT_NAND3:
    case GT_NOR3:
      if (!displayed_design[output]) {
	y+=32;
	DisplayDesign(base,input1_table[output],depth+1,&x1,&y1);
	DisplayDesign(base,input2_table[output],depth+1,&x2,&y2);
	DisplayDesign(base,input3_table[output],depth+1,&x3,&y3);
	yy=(y1+y2+y3)/3;

	base->color=BLUE;
	GrElemsPlot3(base,xx,yy,0,imgs[type]);

	base->color=RED;
	GrLine3(base,xx-56,yy-8,0,x1,y1,0);
	GrLine3(base,xx-56,yy  ,0,x2,y2,0);
	GrLine3(base,xx-56,yy+8,0,x3,y3,0);

	if (y_out) *y_out=yy;
      }
      break;
  }
  base->color=BLACK;
  GrPrintF3(base,xx,yy+3,0,"%04X",output);

  displayed_design[output]=TRUE;
}

U0 UpdateWin(TaskStruct *task)
{
  I64 i;
  GrBitMap *base=GrAlias(gr_refreshed_base,task);
  task->horz_scroll.min=min_xx-32;
  task->horz_scroll.max=max_xx+32-task->win_pixel_width;
  task->vert_scroll.min=min_yy-32;
  task->vert_scroll.max=max_yy+32-task->win_pixel_height;
  TaskDerivedValsUpdate(task);

  base->flags|=BMF_TRANSFORMATION;
  base->x=-task->horz_scroll.pos;
  base->y=-task->vert_scroll.pos;
  y=0;
  for (i=0;i<table_size;i++)
    displayed_design[i]=FALSE;
  DisplayDesign(base,cur_output,0,NULL,NULL);
  GrDel(base);
}

U0 FillNot(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i]) {
      logic_progress=i;
      j= (~i) & (table_size-1);
      old_type=gate_type_table[j];
      if (old_type<GT_INPUT) {
	gate_type_table[j]=GT_NOT;
	input1_table[j]=i;
	added_this_pass[j]=TRUE;
	*chged=TRUE;
	if (old_type==GT_OUTPUT) {
	  if (cur_output<0) cur_output=j;
	  *num_outputs_found=*num_outputs_found+1;
	}
      }
    }
}

U0 FillAnd(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k]) {
	  logic_progress=i;
	  j= (i & k) & (table_size-1);
	  old_type=gate_type_table[j];
	  if (old_type<GT_INPUT) {
	    gate_type_table[j]=GT_AND;
	    input1_table[j]=i;
	    input2_table[j]=k;
	    added_this_pass[j]=TRUE;
	    *chged=TRUE;
	    if (old_type==GT_OUTPUT) {
	      if (cur_output<0) cur_output=j;
	      *num_outputs_found=*num_outputs_found+1;
	    }
	  }
	}
}

U0 FillOr(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k]) {
	  logic_progress=i;
	  j= (i | k) & (table_size-1);
	  old_type=gate_type_table[j];
	  if (old_type<GT_INPUT) {
	    gate_type_table[j]=GT_OR;
	    input1_table[j]=i;
	    input2_table[j]=k;
	    added_this_pass[j]=TRUE;
	    *chged=TRUE;
	    if (old_type==GT_OUTPUT) {
	      if (cur_output<0) cur_output=j;
	      *num_outputs_found=*num_outputs_found+1;
	    }
	  }
	}
}

U0 FillNAnd(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k]) {
	  logic_progress=i;
	  j= (~ (i & k)) & (table_size-1);
	  old_type=gate_type_table[j];
	  if (old_type<GT_INPUT) {
	    gate_type_table[j]=GT_NAND;
	    input1_table[j]=i;
	    input2_table[j]=k;
	    added_this_pass[j]=TRUE;
	    *chged=TRUE;
	    if (old_type==GT_OUTPUT) {
	      if (cur_output<0) cur_output=j;
	      *num_outputs_found=*num_outputs_found+1;
	    }
	  }
	}
}

U0 FillNOr(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k]) {
	  logic_progress=i;
	  j= (~ (i | k)) & (table_size-1);
	  old_type=gate_type_table[j];
	  if (old_type<GT_INPUT) {
	    gate_type_table[j]=GT_NOR;
	    input1_table[j]=i;
	    input2_table[j]=k;
	    added_this_pass[j]=TRUE;
	    *chged=TRUE;
	    if (old_type==GT_OUTPUT) {
	      if (cur_output<0) cur_output=j;
	      *num_outputs_found=*num_outputs_found+1;
	    }
	  }
	}
}

U0 FillXor(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k]) {
	  logic_progress=i;
	  j= (i ^ k) & (table_size-1);
	  old_type=gate_type_table[j];
	  if (old_type<GT_INPUT) {
	    gate_type_table[j]=GT_XOR;
	    input1_table[j]=i;
	    input2_table[j]=k;
	    added_this_pass[j]=TRUE;
	    *chged=TRUE;
	    if (old_type==GT_OUTPUT) {
	      if (cur_output<0) cur_output=j;
	      *num_outputs_found=*num_outputs_found+1;
	    }
	  }
	}
}

U0 FillAnd3(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k,l;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k])
	  for (l=0;l<table_size;l++)
	    if (gate_type_table[l]>GT_OUTPUT && !added_this_pass[l]) {
	      logic_progress=i;
	      j= (i & k & l) & (table_size-1);
	      old_type=gate_type_table[j];
	      if (old_type<GT_INPUT) {
		gate_type_table[j]=GT_AND3;
		input1_table[j]=i;
		input2_table[j]=k;
		input3_table[j]=l;
		added_this_pass[j]=TRUE;
		*chged=TRUE;
		if (old_type==GT_OUTPUT) {
		  if (cur_output<0) cur_output=j;
		  *num_outputs_found=*num_outputs_found+1;
		}
	      }
	    }
}

U0 FillOr3(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k,l;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k])
	  for (l=0;l<table_size;l++)
	    if (gate_type_table[l]>GT_OUTPUT && !added_this_pass[l]) {
	      logic_progress=i;
	      j= (i | k | l) & (table_size-1);
	      old_type=gate_type_table[j];
	      if (old_type<GT_INPUT) {
		gate_type_table[j]=GT_OR3;
		input1_table[j]=i;
		input2_table[j]=k;
		input3_table[j]=l;
		added_this_pass[j]=TRUE;
		*chged=TRUE;
		if (old_type==GT_OUTPUT) {
		  if (cur_output<0) cur_output=j;
		  *num_outputs_found=*num_outputs_found+1;
		}
	      }
	    }
}

U0 FillNAnd3(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k,l;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k])
	  for (l=0;l<table_size;l++)
	    if (gate_type_table[l]>GT_OUTPUT && !added_this_pass[l]) {
	      logic_progress=i;
	      j= (~(i & k & l)) & (table_size-1);
	      old_type=gate_type_table[j];
	      if (old_type<GT_INPUT) {
		gate_type_table[j]=GT_NAND3;
		input1_table[j]=i;
		input2_table[j]=k;
		input3_table[j]=l;
		added_this_pass[j]=TRUE;
		*chged=TRUE;
		if (old_type==GT_OUTPUT) {
		  if (cur_output<0) cur_output=j;
		  *num_outputs_found=*num_outputs_found+1;
		}
	      }
	    }
}

U0 FillNOr3(BoolI8 *chged,I64 *num_outputs_found)
{
  U64 i,j,k,l;
  U8 old_type;
  for (i=0;i<table_size;i++)
    if (gate_type_table[i]>GT_OUTPUT && !added_this_pass[i])
      for (k=0;k<table_size;k++)
	if (gate_type_table[k]>GT_OUTPUT && !added_this_pass[k])
	  for (l=0;l<table_size;l++)
	    if (gate_type_table[l]>GT_OUTPUT && !added_this_pass[l]) {
	      logic_progress=i;
	      j= (~(i | k | l)) & (table_size-1);
	      old_type=gate_type_table[j];
	      if (old_type<GT_INPUT) {
		gate_type_table[j]=GT_NOR3;
		input1_table[j]=i;
		input2_table[j]=k;
		input3_table[j]=l;
		added_this_pass[j]=TRUE;
		*chged=TRUE;
		if (old_type==GT_OUTPUT) {
		  if (cur_output<0) cur_output=j;
		  *num_outputs_found=*num_outputs_found+1;
		}
	      }
	    }
}


I64 FillGateTable()
{
  I64 i,current_gate,num_outputs_found=0;
  BoolI8 chged=TRUE;
  pass=1;
  cur_output=-1;
  InstallLogicProgress;
  CrLf;
  while (num_outputs_found<num_outputs_entered && chged) {
    PrintF("Pass : %d\r\n",pass++);
    chged=FALSE;
    for (i=0;i<table_size;i++)
      added_this_pass[i]=FALSE;
    for (current_gate=0;current_gate<num_selected_gates &&
	 num_outputs_found<num_outputs_entered;current_gate++) {
      switch (selected_gates[current_gate]) {
	case GT_NOT:   FillNot	(&chged,&num_outputs_found); break;
	case GT_AND:   FillAnd	(&chged,&num_outputs_found); break;
	case GT_OR:    FillOr	(&chged,&num_outputs_found); break;
	case GT_NAND:  FillNAnd (&chged,&num_outputs_found); break;
	case GT_NOR:   FillNOr	(&chged,&num_outputs_found); break;
	case GT_XOR:   FillXor	(&chged,&num_outputs_found); break;
	case GT_AND3:  FillAnd3 (&chged,&num_outputs_found); break;
	case GT_OR3:   FillOr3	(&chged,&num_outputs_found); break;
	case GT_NAND3: FillNAnd3(&chged,&num_outputs_found); break;
	case GT_NOR3:  FillNOr3 (&chged,&num_outputs_found); break;
      }
    }
  }
  return num_outputs_found;
}

U0 DigitalLogic()
{
  I64 i;
  SettingsPush; //See [C:/LT/Adam/TaskSettings.APZ,3] SettingsPush
  WinMax;
  WinBorder(ON);
  LtfClear;
  PmtGates;
  InitGateTable();
  if (FillGateTable) {
    min_xx=MAX_I64;
    max_xx=MIN_I64;
    min_yy=MAX_I64;
    max_yy=MIN_I64;

    y=0;
    for (i=0;i<table_size;i++)
      displayed_design[i]=FALSE;
    DisplayExtents(cur_output,0,NULL,NULL);

    Fs->update_win=&UpdateWin;
    GetChar;
    LtfClear;
    WinSync(TRUE);
    LtfBottom;
  }
  SettingsPop;
}

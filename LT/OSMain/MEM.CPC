U1 *AMAlloc(U8 size)
{
  U1 *result=MAlloc(size,adam_tss);
  return result;
}

void AFree(U1 *add)
{
  Free(add,adam_tss);
}

U1 *AMAllocIdentical(U1 *src)
{
  U8 size=MSize(src);
  U1 *result=MAlloc(size,adam_tss);
  MemCpy(result,src,size);
}

U1 *MAllocIdentical(U1 *src,TssStruct *tss=NULL)
{
  U8 size=MSize(src);
  U1 *result=MAlloc(size,tss);
  MemCpy(result,src,size);
}

I1 *ANewString(I1 *buf)
{
  U8 size=StrLen(buf)+1;
  U1 *result=MAlloc(size,adam_tss);
  MemCpy(result,buf,size);
}

I1 *NewString(I1 *buf,TssStruct *tss=NULL)
{
  U8 size=StrLen(buf)+1;
  U1 *result=MAlloc(size,tss);
  MemCpy(result,buf,size);
}

U1 *AMAllocZ(U8 size)
{
  U1 *result=MAlloc(size,adam_tss);
  MemSet(result,0,size);
  return result;
}

U1 *MAllocZ(U8 size,TssStruct *tss=NULL)
{
  U1 *result=MAlloc(size,tss);
  MemSet(result,0,size);
  return result;
}

void DelLinkedList(U4 *list)
{
  U4 *d;
  while (list) {
    d=*list;
    Free(list);
    list=d;
  }
}

                                     TIPS

* Turn-off or reboot (<CTRL-ALT-DEL>) at any time, except during disk
writes.  
Writes are not cached unless you call [C:/LT/OSMain/Dsk/DskCache.CPZ,264]
CacheWrites(). 

* 64-bit values are most efficient for the compiler.

* If you make changes to LoseThos files in your HOME directory, generally you 
reboot to make them take effect.  (You don't compile anything.)  You should 
have two LoseThos partitions on your hard drive because a syntax error in a 
start-up file will make the partition unbootable.  Boot to the second 
partition or boot to a standard LoseThos CD-ROM and use
[C:/LT/OSMain/Dsk/DskAddDev.CPZ,198] Mount() to mount your 
hard drive.

* I copy my files to a mirrored identical partition, periodically with 
[C:/LT/Adam/Dsk2a.APZ,109] CopyTree() commands in scripts.  I do merge
commands with a menu entry like 
this:
M(\"D:/LT/*\",\"E:/LT/*\",\"+r+d\"); to check my changes.

* <WINDOWS KEY> at the cmd line to access your personal menu.  Place macros 
there with CTRL-L, or icon-like pictures with <CTRL-R>.  Use the Pop-Up
option 
on macros to [C:/LT/OSMain/Task1a.CPZ,230] Spawn() a task to run a file.  It
dies when it is finished.  This 
returns mem to the system.  Be sure to press <CTRL-S> to save your macro/menu 
area after making changes.

* You can adjust the num of answers displayed by setting
Fs->answers_displayed 
to a num from 0-3 in your [C:/LT/Accts/TAD/Adam3fSys.APZ,4] UserStartUp
routine.

* You can use ans0,ans1, etc. in cmd line expressions.  They hold results
from 
the last cmd line operations.  You can use the cmd prompt as a calculator by 
just entering expressions like 1+2*3;.  F64 results can be accessed with
ansf0 
or ansf1.

* Use the PullDown menu at the top of the screen to learn commands, like for 
games.

* You can adjust the mouse movement rate by setting global vars in your 
start-up file.  See [HOME/Adam3aLocalize.APZ,mxx_scale] mouse scale.

* If your mouse wheel doesn't work, you might try an actual PS/2 mouse.  My 
new machine does not have PS/2 ports.

* You can set your local time zone by setting the
[C:/LT/OSMain/OSGlbls.CPZ,43] local_time_offset global var 
in a start-up file.  It's units are [C:/LT/OSMain/Adam1a.HPZ,455]
LTDATE_FREQ.  See [HOME/Adam3aLocalize.APZ,local_time] local time.

* Use [C:/LT/Adam/Ltf/LtfRecalc.APZ,1774] LtfCurAttr() in
[C:/LT/Accts/TAD/Adam3fSys.APZ,4] UserStartUp() to set terminal window colors.

* See Key Map
`KeyMap;View;`
 for a list of defined keys.  Define your own keys in
[C:/LT/Accts/TAD/Adam3dKeyPlugIns.APZ,12] MyPutKey(). 
 See [::/LT/Doc/KeyBoard.TXZ] ::/LT/Doc/KeyBoard.TXZ.

* <CTRL-O> in the editor to autoindent a C+ function or renumber an asm 
routine.  If it's not a static module, select "recompile."  Otherwise, don't 
recompile and it will use the compiler info collected when it was most 
recently compiled.  The sole purpose of the $PJ,"",""$ (project) dollar sign 
cmd is to help autoindent.  **<CTRL-O> can be used to test if a file will 
compile.**

* While developing applications, keeping everything in one source file allows 
you to use the <CTRL-O> compile check/autoindent feature.  Alternatively, you 
can #include the files in a project a file depends on before entering the 
editor and <CTRL-O> it.

* You can use filter_lines in the editor text search form (<CTRL-F>) to 
temporarily display just lines near each match.  A value of filter lines set 
to 5 will display lines within 5 lines of matches.  Then, you can do another 
find to a different string and achieve a AND search.  When finished, press <ES
C>.
 
* You can recompile and reinstall the kernel with
[C:/LT/Adam/Boot/InsBoot.APZ,168] InstallBoot().  You'll 
probably want to make a function for recompiling that uses the
[C:/LT/OSMain/TaskCmd.CPZ,355] Auto() function 
to answer the cfg questions.  See my technique
[::/LT/Demo/AcctExample/TSAdam.APZ,1] Cfg Strs
[::/LT/Demo/AcctExample/TSDistribute.APZ,1] Update Funs.

* You can disable WORDSTAT commenting-out [HOME/Adam3fSys.APZ,WsInit]
WsInit() in [HOME/Adam3fSys.APZ,WsInit] HOME/Adam3fSys.APZ.

* You can rst MultiCore CPU's if they get hung with
[C:/LT/OSMain/MultiProc.CPZ,414] MPStart().  HD Audio will 
get screwed-up, however.

* Boolean expressions **not** in if statements don't have short circuit logic
and 
are compiled inefficiently.

* You can use [C:/LT/OSMain/Adam1b.HPZ,42]
progress1-[C:/LT/OSMain/Adam1b.HPZ,51] progress4 in your programs for
whatever you like.  
They're just global vars that are shown on the wallpaper.  The original
intent 
was to indicate how far along operations were.  There's no coordination, so 
different apps might interfere.  I use them most for debugging--just values 
easily viewed.  See [::/LT/Demo/Progress.CPZ] ::/LT/Demo/Progress.CPZ.

* You can save the cmd line doc as text with <CTRL-A>.  For a bitmap screen 
capture, use [C:/LT/Adam/BMPFile.APZ,296] BMPFileCaptureScreen().  You might
want to make a hot key.  See 
[::/LT/Demo/AcctExample/TSAdam.APZ,BMPFileCaptureScreen] BMPFileCaptureScreen.

* Use [C:/LT/Adam/Ltf/LtfNew.APZ,668] LtfMax() to adjust the size of the cmd
line buf.  It counts [C:/LT/OSMain/Adam1a.HPZ,1306] Ltf entries, 
not lines.

* Many data structures have a user_data member.  Those are available for you 
to store a data item, for convenience.  [C:/LT/OSMain/Adam1a.HPZ,3078]
TaskStruct, [C:/LT/OSMain/Adam1a.HPZ,1145] LtfEntry and
[C:/LT/OSMain/Adam1a.HPZ,2523] LTDirEntry 
have them.  You shouldn't encounter conflicts with LoseThos using them.

* You can reduce mem usage by making a smaller disk cache when you recompile 
the kernel; disabling WORDSTAT; Specifying smaller stk sizes when doing
[C:/LT/OSMain/Task1a.CPZ,230] Spawn(
), changing [C:/LT/OSMain/Adam1a.HPZ,2795] DFT_STK, and using
[C:/LT/Adam/Ltf/LtfNew.APZ,668] LtfMax() to reduce the cmd line buffer size.

* Filenames ending in Z will be automatically compressed and uncompressed
when 
read or written.  The compression method is not supported by other operating 
systems.  You can store files uncompressed by [C:/LT/Adam/Dsk2a.APZ,80]
Move()ing them to a filename not 
ending in Z.  See [::/LT/Doc/LTZ.TXZ] ::/LT/Doc/LTZ.TXZ if you want to
uncompress while in WINDOWS
.

* [C:/LT/Adam/Merge.APZ,40] MergeChk() can be used to see what's
changed.  The +d flag will show 
differences of files which have changed and allow you to merge code.  (The +r 
flag will recurse.)

* There is a utility [C:/LT/Adam/LinkChk.APZ,71] LinkChk() which will check
for broken links in 
documentation.

* You can use [C:/LT/Compiler/Directives.CPZ,8]
OptOn([C:/LT/OSMain/Adam1a.HPZ,1375] OPTf_PAREN_WARN) to find unnecessary
parentheses in code.

* Use [C:/LT/Adam/Ltf/LtfMain.APZ,149] Plain() to edit a plain text
file.  You'll need this if your file has $'
s.  Use the [::/LT/Misc/Dollar.CPZ] ::/LT/Misc/Dollar.CPZ utility to strip
dollar signs in text files.

* Use [C:/LT/OSMain/Misc1a.CPZ,468] Silent() to disable screen text output.

* Use [C:/LT/OSMain/Misc1a.CPZ,477] IOSnd() to disable noise from disk access.

* Grab-scroll any window at any time with {CTRL-LEFT-DRAG}.  Null 
grab-scrolling with {CTRL-RIGHT}.

* Use <CTRL-ALT-Z> to zoom-in and <CTRL-ALT-SHIFT-Z> to zoom-out.  You can 
scroll by moving to the edge of the window.  Set
[C:/LT/Adam/Gr/GrScreen.APZ,249] gr_continuous_scroll to TRUE 
if you want. 

* Use <CTRL-ALT-G> and <CTRL-ALT-SHIFT-G> to display a grid on the screen.

* Use <CTRL-ALT-A> to enter an extended ASCII char.

* There are handy functions--F(),R(),FD() and RD() which are defined in 
[HOME/Adam3eWrappers.APZ] HOME/Adam3eWrappers.APZ.  You're encouraged to
change them, since they're in 
acct files.  They will perform find-and-replace operations accross multiple 
files.  The +l flag is particularly useful since it limits to whole labels.  
You are encouraged to add or modify handy wrapper functions to make cmd line 
operations easier.

* When using [C:/LT/Adam/Grep.APZ,161] Grep() while modifying code, work from
the bottom-up so that line 
numbers are correct.  If you work top-down, then inserting or deleting lines 
causes the lower file links will be incorrect.

* You can save files after making changes, anytime you are within the editor, 
like when viewing help/macro files.  <CTRL-A> saves as, <CTRL-S> saves with 
the same name in the scrolling title bar.  Hitting <ESC> will exit and save.  
(<SHIFT-ESC> will abort).  You can save the cmd line window to a file, too, 
since you're actually in the editor when you're at the cmd line.

* When using <CTRL-L> to insert links in documents, you can usually leave the 
Tag Text blank and it will be filled-in automatically based on other entries.

* There is a feature of the precompiler that allows code to be executed in
the 
middle of compilation and data inserted into the compilation stream.  Click 
here for an example: [::/LT/OSMain/OSMain.CPZ,#exe {] #exe {.

* If you output to the cmd line and wish to allow users to scroll around and 
view data, you can use [C:/LT/Adam/Ltf/LtfPopUp.APZ,184] View().

* Use [C:/LT/Adam/Ltf/LtfPopUp.APZ,184] View() in Pop-up macros to linger
until the user presses <ESC> or <SHIFT
-ESC>.

* You can access the word under the cursor at
[C:/LT/Adam/WordStat/WordStat.APZ,36] ws_cur_word, but you should 
probably turn-off preemption or interrupts momentarily to copy it.

* You can reactivate WORDSTAT after closing it by pressing CTRL-FUN KEY.

* If you use consistent var names for items of different classes, you'll 
usually be able to use WORDSTAT's autocomplete for member vars.  I always use 
lx for [C:/LT/OSMain/Adam1a.HPZ,1929] LexStruct ptrs; l for
[C:/LT/OSMain/Adam1a.HPZ,1306] Ltf ptrs; ll or cl for
[C:/LT/OSMain/Adam1a.HPZ,1145] LtfEntry ptrs, etc.


* [C:/LT/OSMain/Adam1b.HPZ,94] Preempt() is used to keep a task from being
interrupted and swapped-out.  It 
has a similar effect to turning-off interrupts.  Each task has it's own 
preemption ctrl.  A task with preemption turned-off can voluntarily
[C:/LT/OSMain/Scheduler.CPZ,373] Yield() 
with preemption off.

* You can set a color for different drives with [C:/LT/Adam/Dsk2a.APZ,274]
SetDrvTextAttr().  Place calls 
to this in [HOME/Adam3aLocalize.APZ] HOME/Adam3aLocalize.APZ.

* <CTRL-SHIFT-T> to toggle to/from plain text just the
[C:/LT/OSMain/Adam1a.HPZ,1306] Ltf cmd under the 
cursor.  See [::/LT/Demo/Ltf/TextDemo.CPZ] ::/LT/Demo/Ltf/TextDemo.CPZ.
 
* If you toggle to plain text when you are working with graphics in a 
document, you can add duplicate entries for pictures by entering a PI cmd
with 
the same num.

* If you toggle to plain text when working with graphics, you can add a str
to 
the $PI$ entry to keep track of it.  Try $PI,"<2>",2$ where '2' is the
picture 
num.

* I use spaces-to-tab operations on all my src files to keep them small.  You 
have to be careful, though, because spaces in strings will be converted.  I 
use <SHIFT-SPACE> ' ' in such cases.  See [C:/LT/Adam/S2T.APZ,61] S2T() for
spaces-to-tabs.

* You can edit an existing Graphic Element by putting the cursor on it and 
pressing <CTRL-R>.

* When editing a Graphic Element, you can cut and paste the elements in the 
text list window.

* I recommend keeping GrSprite in vect format until you are done creating 
them, so you can edit the ctrl points.  Then, convert them to bitmaps, so the 
flood fills work well.  If you are doing interpolation, however, they must be 
vect.

* [C:/LT/Adam/Gr/GrPrimatives.APZ,226] GrFloodFill() is
slow.  [C:/LT/Adam/Gr/GrBitMap.APZ,1117] GrRect() is fast.

* You can customize the wallpaper.  See [::/LT/Demo/Graphics/MyWallPaper.APZ]
::/LT/Demo/Graphics/MyWallPaper.APZ.

* You can adjust the screen refresh rate (software).  It is automatically 
adjusted based on load.  The range is [C:/LT/Adam/Window.APZ,50]
win_min_refresh - Fs->win_max_refresh.

* You can make a RAM disk and it will not be reformatted if you reboot with 
[C:/LT/Adam/Boot/InsBoot.APZ,71] Boot().  You can even boot to a RAM
disk.  See [C:/LT/Adam/Boot/InsBoot.APZ,457] Install2RAMDrv() and 
[C:/LT/Adam/Boot/InsBoot.APZ,467] Boot2RAMDrv().

* try{} catch{} in a function will cause all vars to be non-register.

* Using a sub-int array, i.u8[3], for example, will force a var non-register.

* You can delete the HOME/Registry.CPZ file.  The policy is that deleting it 
will restore defaults.  It should plain text, if you want to edit it.  Be 
careful of tree indentations.

* Study [::/LT/Adam/MemRep.APZ] ::/LT/Adam/MemRep.APZ and
[C:/LT/Adam/WallPaper.APZ,19] WallPaper() to learn how the system 
resources are put together.

* The editor's select-text mechanism allows for disjoint portions of selected 
text.  This is a feature, not a bug -- you can cut-and-paste disjoint text.

* [C:/LT/OSMain/OSGlbls.CPZ,46] time_stamp_freq is continuously calibrated,
so be careful because 
expressions involving it might decrease.  Take a snap-shot, like this: timeout
=[C:/LT/OSMain/Adam1b.HPZ,202] GetTimeStamp+[C:/LT/OSMain/OSGlbls.CPZ,46]
time_stamp_freq x seconds; and compare against [C:/LT/OSMain/Adam1b.HPZ,202]
GetTimeStamp().

* Use [C:/LT/Adam/HeapLog.APZ,111] HeapLog() and [C:/LT/Adam/HeapLog.APZ,79]
HeapLogRep() to find leaks.  Don't be confused by
[C:/LT/OSMain/Adam1a.HPZ,1306] Ltf 
allocations.  Those are generated when text is written to the cmd line buffer.

* For advanced heap debugging, play with [C:/LT/OSMain/Adam1a.HPZ,2744]
_CFG_HEAP_DBG.  You're on your own.

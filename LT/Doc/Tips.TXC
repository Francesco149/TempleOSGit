                                     TIPS

* Turn-off or reboot(CTRL-ALT-DEL) at any time, except during disk writes.  
Writes are not cached.

* If you make changes to LoseThos files in your account directory, some will 
be complied at boot time, others when you open a new user window.  So, you 
don't need to recompile the kernel (OSMain).  You should have two LoseThos 
partitions on your hard drive because a syntax error in a start-up file will 
make the partition unbootable.  Boot to the second partition and fix it, or 
boot to a CD-ROM and use [AddDrives] AddDrives() to mount your hard drive.

* Press the WINDOW's key at the command line to access your macro/menu area.  
Place macros there with CTRL-L, or icon-like pictures with CTRL-R.  Use the "P
op-Up" option on macros to [C:/LT/OSMain/Task1a.CPZ,230] Spawn() a task to
run a file.  It dies when it is 
finished.  This returns memory to the system.  Be sure to press CTRL-S to
save 
your macro/menu area after making changes.

* You can adjust the number of answers displayed by setting Fs->answers_displa
yed to a number from 0-8 in your [HOME/User.CPZ] HOME/User.CPZ file.

* You can adjust the mouse movement rate by setting global variables in your 
start-up file.  See [HOME/Adam3.APZ,mouse_move_scale] mouse_scale.

* You can set your local time zone by setting the
[C:/LT/OSMain/OSGlbls.CPZ,43] local_time_offset global 
variable in a start-up file.  It's units are [C:/LT/OSMain/Adam1a.HPZ,455]
LTDATE_FREQ.  See [HOME/Adam3.APZ,local_time] local time.

* You can define or redefine behavior of all keys in your
[C:/LT/Accts/TAD/Adam3dKeyPlugIns.APZ,12] MyPutKey() routine.

* You can use "ans0","ans1", etc in expressions.  You can use the cmd prompt 
as a calculator by just entering expressions like "1+2*3;".  double results 
can be accessed with "ansd0" or "ansd1".

* You can recompile and reinstall the kernel with
[C:/LT/Opt/Boot/InsBoot.APZ,185] InstallBoot().  You'll 
probably want to make a function for recompiling that uses the
[C:/LT/OSMain/TaskCmd.CPZ,353] Auto() function 
to answer the config questions.

* You can disable WORDSTAT commenting-out [HOME/Adam3.APZ,WsInit] WsInit()
and the [C:/LT/OSMain/Task1a.CPZ,230] Spawn() in 
[HOME/Adam3.APZ,WsInit] HOME/Adam3.APZ.

* You can disable MutliCore by commenting-out [HOME/Adam3.APZ,MPStart]
MPStart in [HOME/Adam3.APZ,MPStart] HOME/Adam3.APZ.

* You can use [C:/LT/OSMain/Adam1b.HPZ,42]
progress1-[C:/LT/OSMain/Adam1b.HPZ,45] progress4 in your programs for
whatever you like.  
They're just global variables that are shown on the wallpaper.  The original 
intent was to indicate how far along operations were.  There's no 
coordination, so different apps might interfere.  I use them most for 
debugging--just values easily viewed.

* Use [C:/LT/Adam/Ltf/LtfNew.APZ,668] LtfMax() to adjust the size of the cmd
line buf.  It counts [C:/LT/OSMain/Adam1a.HPZ,1318] Ltf entries, 
not lines.

* You can get rid of the splash screen by commenting-out the start song in 
[HOME/Adam3.APZ,StartSong] HOME/Adam3.APZ.

* You can reduce memory usage by making a smaller disk cache when you 
recompile the kernel; disabling WORDSTAT; Specifying smaller stack sizes when 
doing [C:/LT/OSMain/Task1a.CPZ,230] Spawn(), changing [DEFAULT_STACK]
DEFAULT_STACK, and using [C:/LT/Adam/Ltf/LtfNew.APZ,668] LtfMax() to reduce
the 
command line buffer size.

* Filenames ending in "Z" will be automatically compressed and uncompressed 
when read or written.  The compression method is not supported by other 
operating systems.  You can store files uncompressed by
[C:/LT/Adam/Dsk2a.APZ,80] Move()ing them to a 
filename not ending in "Z".  See [::/LT/Doc/LTZ.TXZ] ::/LT/Doc/LTZ.TXZ if you
want to uncompress 
while in WINDOWS.

* The joystick can be recalibrated with [JoyCalibration] JoyCalibration().

* [C:/LT/Opt/Merge.APZ,40] MergeChk() can be used to see what's changed.  The
"+d" flag will show 
differences of files which have changed and allow you to merge code.  (The "+r
" flag will recurse.)

* There is a utility [C:/LT/Opt/LinkChk.APZ,75] LinkChk() which will check
for broken links in 
documentation.

* Use [C:/LT/Adam/Ltf/LtfMain.APZ,149] Plain() to edit a plain text
file.  You'll need this if your file has $'
s.

* Use [C:/LT/OSMain/Misc1a.CPZ,411] Silent() to disable screen text output.
* Use [IOSound] IOSound() to disable noise from disk access.

* There are handy functions--F(),R(),FD() and RD() which are defined in 
[HOME/User.CPZ] HOME/User.CPZ.  You're encouraged to change them, since
they're in account 
files.  They will perform find-and-replace operations accross multiple
files.  
The "+l" flag is particularly useful since it limits to whole labels.  You
are 
encouraged to add or modify handy wrapper functions to make command line 
operations easier.

* You can save files after making changes, anytime you are within the editor, 
like when viewing help/macro files.  CTRL-A saves as, CTRL-S saves with the 
same name in the scrolling title bar.  Hitting ESC will exit and save.  (CTRL-
Q will exit and not save).  You can save the cmd line window to a file, too, 
since you're actually in the editor when you're at the cmd line.

* When using CTRL-L to insert links in documents, you can usually leave the 
"Display Text" blank and it will be filled-in automatically based on other 
entries.

* There is a feature of the precompiler that allows code to be executed in
the 
middle of compilation and data inserted into the compilation stream.  Click 
here for an example: [::/LT/OSMain/OSEnd.CPZ,#exe {] #exe {.

* If you output to the cmd line and wish to allow users to scroll around and 
view data, you can use [C:/LT/Adam/Ltf/LtfPopUp.APZ,172]
View().  [WsPutMatrix] Example

* Use [C:/LT/Adam/Ltf/LtfPopUp.APZ,172] View() in Pop-up macros to linger
until the user presses ESC or CTRL-Q.

* You can access the word under the cursor at
[C:/LT/Adam/WordStat/WordStat.APZ,36] ws_cur_word, but you should 
probably turn-off preemption or interrupts momentarily to copy it.

* You can reactivate WORDSTAT after closing it by pressing CTRL-FUNCTION KEY.

* [C:/LT/OSMain/Adam1b.HPZ,98] Preempt() is used to keep a task from being
interrupted and swapped-out.  It 
has a similar effect to turning-off interrupts.  Each task has it's own 
preemption control.  A task with preemption turned-off can voluntarily 
[SwapInNext] SwapInNext() with preemption off.

* You can set a color for different drives with [SetDriveTextAttr]
SetDriveTextAttr().  Place 
calls to this in [::HOME/User.CPZ] ::HOME/User.CPZ.

* If you toggle to plain text when you are working with graphics in a 
document, you can add duplicate entries for pictures by entering a "PI" 
command with the same number.

* If you toggle to plain text when working with graphics, you can add a str
to 
the $PI$ entry to keep track of it.  Try "$PI,"<2>",2$" where '2' is the 
picture number.

* I use spaces-to-tab operations on all my files to keep them small.  You
have 
to be careful, though, because spaces in strings will be converted.  I use SHI
FT-SPACE ' ' in such cases.  See [C:/LT/Opt/S2T.APZ,62] S2T() for
spaces-to-tabs.

* You can edit an existing Graphic Element by putting the cursor on it and 
pressing CTRL-R.

* You might want to stick with manually filling-in a GrElem by drawing lines 
instead of flood-fill or convert the GrElem to bitmaps.  Bitmaps are a little 
slow and flood-fill behaves weird based on what's underneath.  Artistically, 
you get good results with brush-strokes produced by drawing with lines.

* You can customize the "wallpaper".  See
[::/LT/Demo/Graphics/MyWallPaper.APZ] ::/LT/Demo/Graphics/MyWallPaper.APZ.

* You can adjust the screen refresh rate (software).  It is automatically 
adjusted based on load.  The range is [C:/LT/Adam/Window.APZ,50]
win_min_refresh,[win_max_refresh] win_max_refresh.


                                  DEBUGGING

* While debugging, you specify addresses of assembly OSmain asm{} routines 
with just the label, as in "CP_MALLOC+0x20".  You specify C+ labels with "&" 
before functions as in "&Printf+0x10".

[C:/LT/OSMain/Dbg1a.CPZ,269] D() [C:/LT/Adam/Ltf/LtfMain.APZ,698] LtfD() to
hex dump mem with numbering from zero.  With [C:/LT/Adam/Ltf/LtfMain.APZ,698]
LtfD the values are 
updated continually and you can alter mem by editing.

[C:/LT/OSMain/Dbg1a.CPZ,302] Dm() [C:/LT/Adam/Ltf/LtfMain.APZ,682] LtfDm() to
hex dump mem with addresses showing.

[Dasm] Dasm() to disassemble mem.

[C:/LT/Adam/Profiler.APZ,45] ProfBin(),[C:/LT/Adam/Profiler.APZ,80] ProfAll()
and [C:/LT/Adam/Profiler.APZ,106] ProfRep() provide code profiling.  See 
[::/LT/Demo/AutoFile/Demo2.AUZ] ::/LT/Demo/AutoFile/Demo2.AUZ (This is an
"[::/LT/Doc/OSGlossary.GLZ,AutoFile] AutoFile".)

* Use [C:/LT/OSMain/Dbg1a.CPZ,183] DbgNum(), [C:/LT/OSMain/Dbg1a.CPZ,164]
DbgStr() and [C:/LT/OSMain/Dbg1a.CPZ,219] DbgAdd() to print debug info
bypassing the window 
framework.  You can use [C:/LT/OSMain/Misc1a.CPZ,442] Raw(TRUE) to make all
output bypass the window 
framework.

* Use [C:/LT/OSMain/Misc1a.CPZ,430] SysDbg() to set a flag which you can read
with [C:/LT/OSMain/Misc1a.CPZ,436] IsSysDbg() when you wish 
to trigger some debug activity.

* There are flags for various trace options that can help debugging when
there 
are compiler bugs.
  
[C:/LT/Compiler/Directives.CPZ,65] Echo() turns on or off raw data going into
  the lexical analyzer.

[C:/LT/Compiler/Directives.CPZ,56] LTrace() shows the tokens coming out of
  the lexical analyzer.

[C:/LT/Compiler/Directives.CPZ,51] CTrace() disassembles code generated from
  the C+ compiler.

[C:/LT/Compiler/Directives.CPZ,33] PTrace() shows "intermediate code" comming
  out of the first stage of the 
compiler (it's not 100% valid because it hasn't been fixed-up).

[C:/LT/Compiler/Directives.CPZ,38] OTrace() shows intermediate code
  coming-out after optimization.  
[C:/LT/Compiler/Directives.CPZ,43] OPassTraceMask() controls which passes are
  displayed.

These flags can be set and reset by placing them in "#exe{}" code blks.


* dbgo is an alias for "cout" and can be used to place output.  You can
easily 
find and remove them doing a [C:/LT/Opt/Grep.APZ,161] Grep().

* [SBpt] SBpt() to set breakpoints.  When the fault screen appears, use
[C:/LT/Adam/Dbg2a.APZ,341] Go() to 
continue.  You can altering modify what is displayed each break-point by 
[HOME/Fault.CPZ] HOME/Fault.CPZ in your account's home directory.

* There is a heap check utility which can find leaks.  Use
[C:/LT/Opt/HeapLog.APZ,112] HeapLog(), and 
[C:/LT/Opt/HeapLog.APZ,79] HeapLogRep().  It's a really simple program which
intercepts [C:/LT/OSMain/Memory.CPZ,925] MAlloc() and 
[C:/LT/OSMain/Memory.CPZ,919] Free().  You can customize the code to find
other heap issues.

* You can define functions for CTRL-ALT-LETTER keys, but they must operate in 
a interrupt environment.  You can do [C:/LT/OSMain/Misc1a.CPZ,442] Raw()
output.  Scan for 
[ctrl_alt_letter_routines] ctrl_alt_letter_routines[] and look at the code.

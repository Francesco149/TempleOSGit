                               Compiler Options

See [C:/LT/OSMain/Adam1a.HPZ,1384] Option Declarations for a list of
options.  Use [C:/LT/Compiler/Directives.CPZ,8] OptOn()
[C:/LT/Compiler/Directives.CPZ,13] OptOff().  You 
might need to do #exe {OptOn();}.

[C:/LT/OSMain/Adam1a.HPZ,1384] OPTf_STD_C make the compiler closer to
standard C.  See 
[::/LT/Demo/OldSchool/Demo1/Compatibility1.SPP]
::/LT/Demo/OldSchool/Demo1/Compatibility1.SPP.

[C:/LT/OSMain/Adam1a.HPZ,1385] OPTf_REPLACE_SYMS is to cause new declaritions
to replace old, instead of 
overshadowing them in the hash sym table.

[C:/LT/OSMain/Adam1a.HPZ,1386] OPTf_GLBLS_ON_DATA_HEAP without this option,
global vars are placed in the 
code heap which is limited to 2 Gig.  In static modules, global vars take-up 
room in the .BIN file, so you might want to use this option, instead.  You 
might wish to turn it on and off around specific vars.  A disadvantage of
data 
heap global vars in static modules is they can't be initialized.

[C:/LT/OSMain/Adam1a.HPZ,1381] OPTf_EXTERNS_TO_IMPORTS and
[C:/LT/OSMain/Adam1a.HPZ,1382] OPTf_KEEP_PRIVATE are strange options, you'll 
never need.  They're to allow the same header file for OSMain to act as extern
s when compiling itself and imports when compiled by static modules.  They
are 
used in [::/LT/OSMain/Static.HPZ] ::/LT/OSMain/Static.HPZ.

[C:/LT/OSMain/Adam1a.HPZ,1374] OPTf_UNUSED_VAR_WARN turns-off unused var
warning.  It is applied to 
functions.

[C:/LT/OSMain/Adam1a.HPZ,1375] OPTf_PAREN_WARN turns-on a warning if
parenthesis are not needed.

[C:/LT/OSMain/Adam1a.HPZ,1383] OPTf_NO_REG_VAR forces all function local vars
to the stk not registers.  
Applied to functions.

[C:/LT/OSMain/Adam1a.HPZ,1388] OPTf_NO_BUILTIN_CONST Disable 10-byte float
consts for pi, log2_10, log10_2, 
loge_2.  Applied to functions.



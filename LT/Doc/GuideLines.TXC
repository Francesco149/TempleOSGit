                                ACCOUNT FILES

You can add and remove accounts by making or removing directories in the ::/LT
/Accts directory.  You'll have to copy start-up files into them.

See [HOME/User.CPZ] for the user start-up file.

See [HOME/User.MUZ] for a personalizable menu/macro area which can be viewed
at 
the command line with the windows key or by clicking "MENU" in the upper left 
border area of a window.

See [HOME/DoIt.CPZ] for a file which is invoked at the start-up of the first 
user.

See [HOME/Favor.MUZ] for a handy "favorites" file which can be reached by 
pressing CTRL-SHIFT-F, pretty-much anywhere.  Users can place links and todo 
lists or any text within this.

See [HOME/Adam3.APZ] for the user files that get loaded into the adam task at 
start-up.  These are only loaded once.

See [HOME/System.CPZ] for the start-up file used when a [System] System()
command is 
used.

See [HOME/Servant.CPZ] for the start-up file other commands which
[C:/LT/OSMain/Task1a.CPZ,230] Spawn() tasks. 

See [HOME/Fault.CPZ] for a start-up file called when a fault occurs.  When 
debugging you might place data display commands here.

SysRegistry.BIZ is for operating system data.  It's just a 
[SysAccntRegistryStruct] SysAccntRegistryStruct that's been written-out.  For
application configuration 
data, create a data file in the application's subdirectory in HOME if you
make 
an application.

                             APPLICATION POLICIES

* Place applications in their own /LT/Apps subdirectory.

* Make a file called Load.CPZ to load the application.

* Make a file called Run.CPZ to load and run the application, preferable by #i
ncludeing the Load.CPZ file.

* Place user data in a subdirectory of HOME, preferably naming the 
subdirectory the same as the /LT/Apps subdirectory.

* Make a file called Install.CPZ or Install.AUZ to create the HOME 
subdirectory and do similar stuff.

 

                          OS PROGRAMMING GUIDELINES:

* Virtual mem is not used (It is identity mapped in EM64T mode).  The stack 
does not grow, so allocate enough when the task (process) is
[C:/LT/OSMain/Task1a.CPZ,230] Spawned and use 
the heap for most things.  (The "heap" refers to
[C:/LT/OSMain/Memory.CPZ,925] MAlloc() and [C:/LT/OSMain/Memory.CPZ,919]
Free().)

* I've tried to standardize names see [::/LT/Doc/OSGlossary.GLZ,Naming
convention] Naming convention

* There are two modes of compiling [::/LT/Doc/OSGlossary.GLZ,Static Compiled
Mode] Static Compiled Mode and 
[::/LT/Doc/OSGlossary.GLZ,Dynamic Compiled] Dynamic Compiled Mode.  Actual
compilation is done in both--nothing is 
"interpreted".

* [::/LT/Doc/Differences.TXZ] Differences from C/C++


                             Hash symbol tables:

* See [::/LT/Adam/HashUtils.APZ] ::/LT/Adam/HashUtils.APZ for examples of how
the hash tables are set-up. 
 Basically, symbols are placed into hash tables and child process hash tables 
are chained to parents.  This provides scopes for variables and functions.

* "adam_tss->hash_table" holds the C/C++ symbols loaded in on start-up.

* "Fs->hash_table" holds user C+ symbols and if a symbol is not found, it 
checks parents.  When a duplicate symbol is added to the table, it
overshadows 
the previous symbol.  When developing software, typically you include the
file 
at the command prompt, make changes and reinclude it.  Old symbols are 
overshadowed but they are still there.  Periodically, kill the TASK and start 
fresh when mem is low.  If you wish your applications to free themselves 
instead of staying in mem, spawn or [C:/LT/Adam/Ltf/LtfPopUp.APZ,395] PopUp()
a task to run the application and 
kill it when it's done.

* To display the contents of a hash table, use the [C:/LT/Adam/Hash2a.APZ,88]
HashRep() routine or the 
varients.

                         Assembly Language Concerns:

* FS must always point to the per-TASK's structure.  See
[::/LT/OSMain/AdamK.HPZ,TssStruct:2] C+ and [::/LT/OSMain/OSDefs.ASZ,TSS_RIP]
Asm.

* GS must always point to the per-CPU's structure.  See
[::/LT/OSMain/AdamK.HPZ,CPUStruct:1] C+ and [::/LT/OSMain/OSDefs.ASZ,CPU_NUM]
Asm.

* Don't change the segment registers unless interrupts are off.

* When interacting with compiled code, preserve RBP, RSI, RDI, R12-R15
because 
the compiler uses these for register vars.  You are free to trash RAX, RBX, 
RCX, RDX and R8-R11.

                             Keyboard Allocations

See [Char] Char for definition of scan codes.

When you are at the cmd line, editing documents, browsing documentation and 
help, entering items in forms or in menu's, the
[C:/LT/OSMain/Adam1a.HPZ,1302] Ltf editor handles keys.  It 
allows you to define your own key handlers in a
[C:/LT/Accts/TAD/Adam3dKeyPlugIns.APZ,12] MyPutKey() function.  If you 
choose, you can catch most keys, overriding the default handlers.  See 
[C:/LT/Adam/Ltf/LtfEd.APZ,1411] LtfPutKey().  The following is an overview of
key allocations.

ALT-keys and ALT-SHIFT-keys

Free for user cfgurations in your [C:/LT/Accts/TAD/Adam3dKeyPlugIns.APZ,12]
MyPutKey() handler, except for ALT-BACKSPACE 
(undo).  There are a few examples pre-defined, but you can change them if you 
wish.

ALT-digit keys

Extended ASCII (3 digit decimal number).



CTRL-ALT-keys and CTRL-ALT-SHIFT-keys

Handled at a system level, NOT by the [C:/LT/OSMain/Adam1a.HPZ,1302] Ltf
editor.  I reserve the right to 
allocate these, but in the mean time, you can make your own by assigning 
handlers to the [C:/LT/OSMain/OSGlbls.CPZ,40] fp_ctrl_alt_let_cbs[]
array.  Be aware that they operate in an 
interrupt framework, so they are tricky to use.


CTRL-function key

Auto-completes wordstat words.



CTRL-digit key

Auto-completes dictionary words.


CTRL-SHIFT-function key

Jumps to src code.


CTRL-SHIFT-digit key

Jumps to dictionary definition.


function keys and SHIFT-function keys

I reserve the right to allocate these, but there are some free now.


CTRL-key and CTRL-SHIFT-key

I reserve the right to allocate to these.  There are not many free.



                              Behind the Scenes

The editor mostly stays in a [C:/LT/OSMain/KbdMouse/Message.CPZ,139]
GetKey()/[C:/LT/OSMain/Display.CPZ,247] PutKey() loop.  The putkey portion is 
where keys are acted-upon.  LoseThos has a chain of putkey handlers in a 
[Circular Queue] Circular Queue with priorities.  The highest priority
handlers can choose to 
terminate handling, otherwise, the keys get sent on down the chain.

[C:/LT/OSMain/Display.CPZ,322] KeyDevAdd() defines a putkey device with a
priority.  "Device" might be a 
misnomer.  Currently, the following are defined:

Priority    Handler
---------- ---------
0x20000000 [C:/LT/Accts/TAD/Adam3dKeyPlugIns.APZ,12] MyPutKey() user handler
0x40000000 [C:/LT/OSMain/Display.CPZ,172] AKDInputFilterPutKey() for
[C:/LT/OSMain/TaskCmd.CPZ,355] Auto(), [C:/LT/OSMain/TaskCmd.CPZ,385]
AutoStr(), and [C:/LT/OSMain/TaskCmd.CPZ,397] AutoFile() 
handling.
0x50000000 [C:/LT/OSMain/Display.CPZ,204] AKDTaskPutKey() focus task key
device queue.  See below.
0x60000000 [C:/LT/OSMain/Display.CPZ,136] AKDRawDisplayPutKey() direct to
video mem debug output. 
0x80000000 [C:/LT/Adam/Ltf/LtfEd.APZ,2051] AKDLtfPutKey() standard document
cmds

Since handling individual keys is slow, LoseThos supports
[C:/LT/OSMain/Display.CPZ,272] PutS() as well.  If 
no puts handler is defined, individual keys are sent.

[C:/LT/OSMain/Display.CPZ,348] TaskKeyDevAdd() defines a putkey handler on a
task basis.  This is a new queue 
with it's own priorities and takes affect when the task is the focus
task.  **WA
RNING**: Preemption is turned off, so enable it in your handlers if necessary.

[C:/LT/OSMain/Adam1a.HPZ,1302] Ltf.user_put_key and
[C:/LT/OSMain/Adam1a.HPZ,1302] Ltf.user_put_s are call back routines which
offer some 
neat tricks.  See [::/LT/Apps/MusicOrgan/JukeBox.CPZ]
::/LT/Apps/MusicOrgan/JukeBox.CPZ.  There is a var
[C:/LT/OSMain/Adam1a.HPZ,1302] Ltf.user_
put_data which gets passed to them.

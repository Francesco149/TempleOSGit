I64 LtfCharDist(Ltf *l,I64 x,I64 y)
{
#assert FONT_WIDTH==FONT_HEIGHT
  return (SqrI64(l->x-x)+SqrI64(l->y-y))*FONT_WIDTH*FONT_WIDTH;
}

U0 LockToPage(Ltf *l)
{
  I64 win_page_len;
  LtfEntry *cl;
  LtfSettingsStruct *s;
  cl=l->cur_entry;
  if (cl->flags & LTFLF_LOCK_TO_PAGE)  {
    l->cur_top_line_num=cl->y-cl->page_line_num;
    s=LtfSettingsLast(cl);
    win_page_len=l->win_task->win_height;
    if (cl->page_line_num>=win_page_len)
      l->cur_top_line_num+=s->page_len-win_page_len;
  }
}

public U0 LtfCenter(Ltf *l=NULL)
{
  BoolI8 unlock;
  TaskStruct *task;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  task=l->win_task;
//TODO:  l->recalc_start=l;
  LtfRecalc(l);
  if (!(l->flags&LTFF_AUX_LTF))
    l->cur_top_line_num=l->y-(task->win_height+1)>>1;
  LockToPage(l);
  if (unlock)
    LtfUnlock(l);
}

U0 LtfDelToNum(Ltf *l,I64 num)
{
  LtfEntry *ll=l->root.next,*ll2;
  while (num-->0 && ll!=l) {
    ll2=ll->next;
    if (!(ll->flags & (LTFLF_HOLD|LTFLF_FILTER_SKIP))) {
      if (ll==l->cur_entry) {
	l->cur_entry=ll2;
	l->cur_data_col=ll2->min_col;
      }
      LtfEntryDel(l,ll);
    }
    ll=ll2;
  }
}

U0 LtfDelToEntry(Ltf *l,LtfEntry *clear_entry)
{
  LtfEntry *ll=l->root.next,*ll2;
  while (ll!=l) {
    ll2=ll->next;
    if (!(ll->flags & (LTFLF_HOLD|LTFLF_FILTER_SKIP))) {
      if (ll==l->cur_entry) {
	l->cur_entry=ll2;
	l->cur_data_col=ll2->min_col;
      }
      LtfEntryDel(l,ll);
    }
    if (ll==clear_entry)
      break;
    ll=ll2;
  }
}

U0 LtfBorderListDraw(Ltf *l)
{
  TaskStruct *win_task=l->win_task;
  I64 i,y=-1,attr=win_task->border_attr<<8;
  Ltf *templ=l;
  U8 *ptr;
  P3I64 saved_scroll;
  BoolI8 old_preempt=Preempt(OFF);
  while (templ && templ->ltf_signature==LTF_SIGNATURE_VAL) {
    y+=StrLen(templ->desc)+1;
    templ=templ->parent_ltf;
  }
  templ=l;
  if (y>win_task->win_height)
    y=win_task->win_height;
  WinScrollNull(win_task,&saved_scroll);
  while (templ && templ->ltf_signature==LTF_SIGNATURE_VAL) {
    ptr=templ->desc;
    i=StrLen(templ->desc);
    ptr+=i;
    attr=win_task->border_attr<<8;
    if (!templ->menu_ltf)
      attr=(attr&0xF00)<<4+(attr&0xF000)>>4;
    while (i-- && y>0)
      PlotBorderU8(win_task,attr+*--ptr,-1,--y);
    y--;
    templ=templ->parent_ltf;
  }
  WinScrollRestore(win_task,&saved_scroll);
  Preempt(old_preempt);
}

U8 ltf_spaces[9]=
{0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0};

U0 LtfUpdateWinJoin(Ltf *l,BoolI8 to_screen,BoolI8 has_cursor,
  BoolI8 recalc,BoolI8 find_cur_entry)
{
//l->recalc_start should be set to
//the entry to begin with.  This makes
//the cmd line perform better when
//text is added to the bottom.

//Setting l->recalc_start to l will
//recalc the whole thing.

//Setting l->recalc_start to NULL will skip.

  I64 i,ii,j,k,x,x0,y,y0,D,d2,col,col2,best_col=0,best_d=MAX_I64,xx,yy,zz;
  I64 num_entries=0;
  LtfEntry reg *cl,reg *cl2,*best_cl,*alias,*next_clear_found=NULL;
  LtfSettingsStruct *s;
  I64 ijif;
  U64 cur_u8_attr,temp_u32_attr;
  U8 *bptr;
  BoolI8 del_cl,skipped_update,tree_collapsed;
  U64 hide_collapsed[2];
  TaskStruct *win_task=l->win_task,*mem_task=l->mem_task;
  BoolI8 resize=FALSE,extra_processing,same_win,more=FALSE;
  BoolI8 blink_flag=Blink(,tP(win_task));
  GrDC *dc;
  I64 cursor_y=MIN_I64,left_margin,right_margin;
  I64 y_plot_top,y_plot_bottom;
  U8 *ptr,buf[64],ch;
  U32 *u32_ptr,*hl;
  BoolI8 full_refresh,full_refresh_and_extra_processing,unlock,no_highlight;
  I64 top,left,bottom,right,width,height,scroll_x,scroll_y;
  I64 pixel_top,pixel_left;
  I32 *depth_buf=NULL;
  WinScrollState *vss,*hss;
  DefineStrHashEntry *temph;

  if (!l || l->ltf_signature!=LTF_SIGNATURE_VAL) return;

  if (to_screen && (!Bt(&l->locked_flags,LTFlf_LOCKED) || l->owning_task!=Fs)) {
    i=8;
    while (Bt(&l->locked_flags,LTFlf_LOCKED)) {
      if (!--i)
	return;
      Yield;
    }
  }
  unlock=LtfLock(l);
  if (l->ltf_signature!=LTF_SIGNATURE_VAL) {
    LtfUnlock(l);
    return;
  }

  dc=GrDCAlias(gr_dc,win_task);

  PushFD;
  Cli;
  left	=win_task->win_left;
  right =win_task->win_right;
  width =win_task->win_width;
  top	=win_task->win_top;
  scroll_x=win_task->win_scroll_x;
  scroll_y=win_task->win_scroll_y;
  bottom=win_task->win_bottom;
  height=win_task->win_height;
  pixel_left  =win_task->win_pixel_left;
  pixel_top   =win_task->win_pixel_top;
  left_margin=left;
  right_margin=right;
  PopFD;
  if (l->flags&LTFF_AUX_LTF) {
    scroll_x=0;
    scroll_y=0;
  }
  best_cl=l->cur_entry;
  if (to_screen || find_cur_entry) {
    recalc=TRUE;
    l->recalc_start=l;
  }

  i=win_actual_refresh/10+1;
  if (Bt(&l->flags,LTFf_DO_FULL_UPDATE) ||
      !to_screen || !(l->refresh_cnt%i) ||
      l->flags&LTFF_BACKWARD_MOVEMENT)
    full_refresh=TRUE;
  else
    full_refresh=FALSE;

  no_highlight=TRUE;
  l->flags&=~LTFF_HIGHLIGHT;
  if (!(l->flags&(LTFF_PLAIN_TEXT|LTFF_PLAIN_TEXT_WITH_TABS))) {
    no_highlight=FALSE;
    if (FilesFindMatch(SRC_FILE_MASK,l->filename.name))
      l->flags|=LTFF_HIGHLIGHT;
  }

  x=l->start_x;
  y=l->start_y;
  l->page_line_num=0;
  if (full_refresh) {
    if (!find_cur_entry) {
      l->x=x;
      l->y=y;
    }
    if (LBtr(&win_task->display_flags,DISPLAYf_HAS_BEEN_RESIZED))
      resize=TRUE;
  }

  hss=&win_task->horz_scroll;
  vss=&win_task->vert_scroll;
  if (l->flags&LTFF_AUX_LTF) {
    l->cur_top_line_num=0;
    l->line_start_col=0;
    has_cursor=FALSE;
  } else if (has_cursor && full_refresh) {
    if (Bt(&hss->flags,WSSf_SET_TO_POS)||Bt(&vss->flags,WSSf_SET_TO_POS)) {
      if (Bt(&hss->flags,WSSf_SET_TO_POS)) {
	l->line_start_col=hss->pos;
	LBtr(&hss->flags,WSSf_SET_TO_POS);
      }
      if (Bt(&vss->flags,WSSf_SET_TO_POS)) {
	l->cur_top_line_num=vss->pos;
	LBtr(&vss->flags,WSSf_SET_TO_POS);
      }
      l->x=l->line_start_col+width/2;
      l->y=l->cur_top_line_num+height/2;
      find_cur_entry=TRUE;
      recalc=TRUE;
      l->recalc_start=l;
    }
  }
  x0=l->line_start_col;
  y0=l->cur_top_line_num;
  l->settings_root.cur_text_attr=l->settings_root.dft_text_attr=l->start_text_attr;
  same_win=top	 ==l->old_win_top &&
      bottom==l->old_win_bottom &&
      left  ==l->old_win_left &&
      right ==l->old_win_right &&
      l->cur_entry==l->old_cur_entry &&
      l->cur_data_col==l->old_cur_data_col;
  if (to_screen) {
    y_plot_top=y0-scroll_y/FONT_HEIGHT;
    y_plot_bottom=y0+height-1-scroll_y/FONT_HEIGHT;
    if (!(l->flags&LTFF_AUX_LTF) && !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER))
      LtfBorderListDraw(l);
  }

  if (recalc) {
    l->project=NULL;

    if (l->cur_data_col<=l->cur_entry->min_col)
      l->cur_data_col=l->cur_entry->min_col;
    if (!l->recalc_start)
      cl=l; //skip update
    else {
      cl=l->recalc_start;
      if (cl!=l) {
	i=l->ww_lines_back;
	ii=i/2;  //Threshold for stopping on SOFT_CR
	while (i-- && cl->type_u8!=LTFT_NEW_LINE &&
	    (i>ii || cl->type_u8!=LTFT_SOFT_NEW_LINE) &&
	    cl->flags & LTFLF_WORD_WRAP &&
	    cl->last!=l)
	  cl=cl->last;
	x=cl->x; y=cl->y;
	l->page_line_num=cl->page_line_num;
      } else {
	cl=l->root.next;
	cl->flags&=~(LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_HIGHLIGHT|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER);
      }
    }
  } else
    cl=l->root.next;

  s=LtfSettingsLast(cl);
  l->flags=cl->flags& (LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER) |
	    l->flags&~(LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER);
  cur_u8_attr=s->cur_text_attr;
  if (cl==l->root.next) {
    l->flags&=~LTFF_BACKWARD_MOVEMENT;
    if (to_screen && full_refresh)
      l->flags&=~LTFF_HAS_SONG;
  } else
    l->flags=cl->flags& LTFLF_HIGHLIGHT |
	      l->flags&~LTFLF_HIGHLIGHT;

  if (l->root.next==l) {
    best_cl=l;
    best_col=0;
    l->cur_entry=l;
    l->cur_data_col=0;
    cl=l;
  }
  skipped_update= cl==l && l->root.next!=l;

  extra_processing=recalc||find_cur_entry||resize;
  full_refresh_and_extra_processing=full_refresh&&extra_processing;
  if (full_refresh) {
    LtfSettlingsRemainingDel(l,s->next);
    l->min_x=MAX_I32; l->min_y=MAX_I32;
    l->max_x=MIN_I32; l->max_y=MIN_I32;
  }
  while (cl!=l) {
restart:
    del_cl=FALSE;
    if (cl->flags & (LTFLF_SKIP|LTFLF_HARD_SKIP|LTFLF_FILTER_SKIP)) {
      cl2=cl;
      goto skip;
    }
    if (!full_refresh && cl->settings)
      s=cl->settings;
    if (cl->flags & (LTFLF_TAG_CB|LTFLF_DEFINE)) {
      if (recalc || cl->flags & LTFLF_REFRESH_DATA) {
	Free(cl->tag);
	if (cl->flags & LTFLF_TAG_CB)
	  cl->tag=(*cl->tag_cb)(l,cl,mem_task);
	else {
	  if (temph=HashFind(cl->define_str,win_task->hash_table,HTT_DEFINE_STR))
	    cl->tag=StrNew(temph->data,mem_task);
	  else
	    cl->tag=CAlloc(1,mem_task);
	}
	cl->max_col=StrLen(cl->tag);
	if (l->cur_entry==cl) {
	  if (l->cur_data_col>=cl->max_col) {
	    if (cl->max_col)
	      l->cur_data_col=cl->max_col-1;
	    else
	      l->cur_data_col=0;
	  }
	}
      }
    }
    if (Bt(ltf_tag_types,cl->type_u8))
      k=StrLen(cl->tag);
    else
      k=0;
    if (full_refresh_and_extra_processing) {
word_wrap_start:
      cl2=cl->next;
      if (cl2->type_u8==LTFT_SOFT_NEW_LINE) {
	if (!same_win) {
	  if (l->cur_entry==cl2) {
	    l->cur_entry=cl2->next;
	    l->cur_data_col=l->cur_entry->min_col;
	  }
	  if (best_cl==cl2) {
	    best_cl=cl2->next;
	    best_col=0;
	  }
	  LtfEntryDel(l,cl2);
	  goto word_wrap_start;
	}
      }
      if (cl->type_u8==LTFT_TEXT && !(cl->flags&(LTFLF_TAG_CB|LTFLF_DEFINE|LTFLF_HTML_LINK|LTFLF_SCROLLING_X))) {
	if (cl->flags==cl2->flags &&
	    cl->type==cl2->type) {
	  j=StrLen(cl2->tag);
	  ptr=MAlloc(k+j+1,mem_task);
	  MemCpy(ptr,cl->tag,k);
	  MemCpy(ptr+k,cl2->tag,j+1);
	  Free(cl->tag);
	  cl->tag=ptr;
	  if (l->cur_entry==cl2) {
	    l->cur_entry=cl;
	    l->cur_data_col+=k;
	  }
	  if (best_cl==cl2) {
	    best_cl=cl;
	    best_col=0;
	  }
	  LtfEntryDel(l,cl2);
	  k+=j;
	  if (k>(right_margin-left_margin+1)<<1)
	    goto word_wrap2;
	  else
	    goto word_wrap_start;
	}
      }
    }
word_wrap2:
    if (cl->flags & LTFLF_SCROLLING_X)
      k=cl->scroll_len;
    if (cl->flags &
    (LTFLF_LEFT_X|LTFLF_RIGHT_X|LTFLF_CENTER_X|
    LTFLF_TOP_Y|LTFLF_BOTTOM_Y|LTFLF_CENTER_Y)) {
      if (cl->flags & LTFLF_MARGIN_REL_X) {
	if (cl->flags & LTFLF_LEFT_X)
	  x=left_margin-left;
	else if (cl->flags & LTFLF_RIGHT_X)
	  x=right_margin-(k-1)-left;
	else if (cl->flags & LTFLF_CENTER_X)
	  x=(right_margin+left_margin)>>1-k>>1-left;
      } else {
	if (cl->flags & LTFLF_LEFT_X)
	  x=x0;
	else if (cl->flags & LTFLF_RIGHT_X)
	  x=width+x0-k;
	else if (cl->flags & LTFLF_CENTER_X)
	  x=(width+x0-k)>>1;
      }
      i=y;
      if (cl->flags & LTFLF_PAGE_REL_Y) {
	l->flags|=LTFF_BACKWARD_MOVEMENT;
	if (cl->flags & LTFLF_TOP_Y)
	  y-=cl->page_line_num;
	else if (cl->flags & LTFLF_BOTTOM_Y)
	  y+=s->page_len-cl->page_line_num;
	else if (cl->flags & LTFLF_CENTER_Y)
	  y+=s->page_len>>1-cl->page_line_num;
      } else {
	l->flags|=LTFF_BACKWARD_MOVEMENT;
	if (cl->flags & LTFLF_TOP_Y)
	  y=y0;
	else if (cl->flags & LTFLF_BOTTOM_Y)
	  y=height-1+y0;
	else if (cl->flags & LTFLF_CENTER_Y)
	  y=height>>1+y0;
      }
      if (y!=i) {
	l->page_line_num+=y-i;
	if (l->page_line_num<0)
	  l->page_line_num=s->page_len+l->page_line_num%s->page_len;
	else
	  l->page_line_num=l->page_line_num%s->page_len;
	if (s->header!=LTF_DFT &&
	    l->page_line_num<s->header) {
	  y+=s->header-l->page_line_num;
	  l->page_line_num=s->header;
	}
	if (s->footer==LTF_DFT) {
	  if (l->page_line_num>=s->page_len) {
	    if (s->header==LTF_DFT)
	      l->page_line_num=0;
	    else {
	      l->page_line_num=s->header;
	      y+=s->header;
	    }
	  }
	} else {
	  if (l->page_line_num>=s->page_len-s->footer) {
	    y+=s->footer;
	    if (s->header==LTF_DFT)
	      l->page_line_num=0;
	    else {
	      l->page_line_num=s->header;
	      y+=s->header;
	    }
	  }
	}
      }
    }

    if (full_refresh_and_extra_processing && k>0) {
      if (l->flags & LTFF_WORD_WRAP) {
	i=right_margin+1-(x+left);  //Space left on line
	ii=x+1-s->left_margin;
	if (cl->type_u8==LTFT_TEXT && !(cl->flags&(LTFLF_TAG_CB|LTFLF_DEFINE|LTFLF_HTML_LINK|LTFLF_SCROLLING_X))) {
	  if (l->cur_entry==cl->next) {
	    if (l->cur_data_col==cl->next->min_col)
	      i--;
	  } else {
	    if (l->cur_entry==cl) {
	      if (l->cur_data_col==i)
		i--;
	    }
	  }
	  if (k>i) {
	    for (j=i;j>8-ii && j>=0;j--)
	      if (cl->tag[j]==CH_SPACE ||
		  cl->tag[j]==CH_SHIFT_SPACE) {
		i=j+1;
		break;
	      }
	    if (k>i && i>0) {
	      cl2=MAllocIdentical(cl,mem_task);
	      cl2->tag=StrNew(cl->tag+i,mem_task);
	      InsQue(cl2,cl);
	      if (l->cur_entry==cl && l->cur_data_col>=i) {
		l->cur_entry=cl2;
		l->cur_data_col=l->cur_data_col-i;
	      }
	      cl->tag[i]=0;
	      ptr=StrNew(cl->tag,mem_task);
	      Free(cl->tag);
	      cl->tag=ptr;
	      cl2=CAlloc(sizeof(LtfEntryBase),mem_task);
	      cl2->type=LTFT_SOFT_NEW_LINE | cl->type & 0xFFFFFF00;
	      cl2->flags=cl->flags;
	      cl2->x=x;
	      cl2->y=y;
	      cl2->page_line_num=cl->page_line_num;
	      cl2->settings=NULL;
	      InsQue(cl2,cl);
	      k=StrLen(cl->tag);
	      goto skip_soft_cr;
	    }
	  }
	  if (k==i)
	    goto skip_soft_cr;
	}
	if (k>=i) {
	  cl2=cl->last;
	  if (cl2->type_u8!=LTFT_SOFT_NEW_LINE &&
	      cl2->type_u8!=LTFT_NEW_LINE &&
	      cl2->type_u8!=LTFT_CURSOR_MOVEMENT) {
	    cl2=CAlloc(sizeof(LtfEntryBase),mem_task);
	    cl2->type=LTFT_SOFT_NEW_LINE | cl->type & 0xFFFFFF00;
	    cl2->flags=LTFLF_WORD_WRAP |
		cl->flags & (LTFLF_LOCK_TO_PAGE|LTFLF_HIGHLIGHT|LTFLF_LOCK_TO_CENTER|LTF_BL_IV_UL|LTFLF_SKIP|LTFLF_HARD_SKIP|LTFLF_FILTER_SKIP);
	    cl2->x=x;
	    cl2->y=y;
	    cl2->page_line_num=cl->last->page_line_num;
	    cl2->settings=s;
	    InsQue(cl2,cl->last);
	    cl=cl2;
	    goto restart;
	  }
	}
skip_soft_cr:
      }
    }
    if (full_refresh) {
      cl->x=x;
      cl->y=y;
      cl->page_line_num=l->page_line_num;
      cl->settings=s;
      if (x<l->min_x) l->min_x=x;
      if (y<l->min_y) l->min_y=y;

      if (find_cur_entry) {
	D=LtfCharDist(l,x,y);
	col=0;
      }
    }
    col2=0;

    cl->flags=l->flags& (LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_HIGHLIGHT|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER) |
	     cl->flags&~(LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_HIGHLIGHT|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER);
    temp_u32_attr=(cur_u8_attr&0xF0)<<8|l->flags&LTF_BL_IV_UL|(s->shifted_x&0x1F)<<16|(s->shifted_y&0x1F)<<21;
    switch (cl->type_u8) {
      case LTFT_PICTURE:
	if (cl->flags & LTFLF_LINK)
	  temp_u32_attr.u8[1]|=s->link_attr&15;
	else if (cl->flags & (LTFLF_LEFT_MACRO|LTFLF_LEFT_EXP))
	  temp_u32_attr.u8[1]|=s->macro_attr&15;
	else if (cl->flags & LTFLF_TREE)
	  temp_u32_attr.u8[1]|=s->tree_attr&15;
	else
	  temp_u32_attr.u8[1]|=s->bin_attr&15;
	break;
      case LTFT_HTML_IMG:
      case LTFT_HTML_VIDEO:
      case LTFT_HTML_CODE:
	temp_u32_attr.u8[1]|=s->bin_attr&15;
	break;
      case LTFT_LINK:
	temp_u32_attr.u8[1]|=s->link_attr&15;
	break;
      case LTFT_MACRO:
      case LTFT_MENU_VAL:
	temp_u32_attr.u8[1]|=s->macro_attr&15;
	break;
      case LTFT_ANCHOR:
      case LTFT_PROJECT:
	temp_u32_attr.u8[1]|=s->anchor_attr&15;
	break;
      case LTFT_TREE:
	temp_u32_attr.u8[1]|=s->tree_attr&15;
	break;
      case LTFT_HIDE_START:
      case LTFT_HIDE_END:
	temp_u32_attr.u8[1]|=s->hidden_attr&15;
	break;
      default:
	temp_u32_attr.u8[1]|=cur_u8_attr&15;
    }
    cl->type.u8[1]=temp_u32_attr.u8[1];
    temp_u32_attr|=cl->type&0xF3FF0000;
    if (cl==l->cur_entry) {
      if (cl->type_u8!=LTFT_TEXT)
	temp_u32_attr^=0xFF00;
      cursor_y=cl->y;
    }

    if (cl->flags & LTFLF_REFRESH_DATA) {
      if (cl->type_u8==LTFT_DATA || cl->type_u8==LTFT_CHECK_BOX)
	LtfDataFmt(cl);
    }

    if (Bt(ltf_tag_types,cl->type_u8)) {
      ptr=cl->tag;
      if (cl->flags & LTFLF_TREE) {
	if (k>=2) {
	  if (cl->flags & LTFLF_CHECKED_COLLAPSED)
	    *ptr++='+';
	  else
	    *ptr++='-';
	  *ptr++=']';
	  ptr=cl->tag;
	}
      } else if (cl->flags & LTFLF_HAS_BIN) {
	if (*ptr=='<') {
	  temp_u32_attr=temp_u32_attr & 0xFFFFF000 | (s->bin_attr&0xF)<<8;
	  cl->type.u8[1]=temp_u32_attr.u8[1];
	  if (cl==l->cur_entry && cl->type_u8!=LTFT_TEXT)
	      temp_u32_attr^=0x0F00;
	  if (full_refresh_and_extra_processing && '0'<=ptr[1]<='9') {
	    SPrintF(buf,"<%d>",cl->bin_num);
	    k=StrLen(buf);
	    Free(cl->tag);
	    ptr=cl->tag=MAlloc(k+1,l->mem_task);
	    MemCpy(ptr,buf,k+1);
	  }
	}
      } else if (cl->type_u8==LTFT_CHECK_BOX) {
	if (k>=3) {
	  *ptr++='[';
	  if (cl->flags & LTFLF_CHECKED_COLLAPSED)
	    *ptr++='X';
	  else
	    *ptr++=CH_SPACE;
	  *ptr++=']';
	  ptr=cl->tag;
	}
      } else if (cl->type_u8==LTFT_HIDE_START) {
	if (k>=2) {
	  *ptr++='<';
	  if (cl->flags & LTFLF_CHECKED_COLLAPSED)
	    *ptr++='+';
	  else
	    *ptr++='-';
	  ptr=cl->tag;
	}
      } else if (cl->type_u8==LTFT_HIDE_END) {
	if (k>=1)
	  *ptr='>';
      }

      if (cl->flags & LTFLF_SCROLLING_X) {
	j=StrLen(cl->tag);
	if (j && cl->scroll_len) {
	  if (HPET_freq)
	    ijif=HPET*FONT_WIDTH*win_task->scroll_speed/HPET_freq;
	  else
	    ijif=GetTimeStamp*FONT_WIDTH*win_task->scroll_speed/time_stamp_freq_initial;
	  ijif=ijif%(j*FONT_WIDTH);
	  temp_u32_attr=temp_u32_attr & 0xFFE0FF00|
	      (FONT_WIDTH-1-ijif&(FONT_WIDTH-1))<<16;
#assert FONT_WIDTH==8
	  ijif>>=3;
	  for (k=0;k<cl->scroll_len;k++) {
	    ch=ptr[(ijif+k)%j];
	    if (!Bt(displayable_chars_bitmap,ch)) ch='.';
	    if (to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
	      if (cl->flags & LTFLF_BORDER_PLOT &&
		  !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER))
		PlotBorderU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	      else
		PlotWinU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	    }
	    x++;
	  }
	  }
	if (find_cur_entry)  {
	  D=LtfCharDist(l,cl->x,cl->y);
	  col=cl->min_col;
	}
	col2=cl->scroll_len;  //TODO This is flawed
      } else {
	if (cl->flags & LTFLF_BORDER_PLOT &&
	    !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER)) {
	  while (ch=*ptr++) {
	    if (to_screen && !(cl->flags&LTFLF_DONT_DRAW))
	      PlotBorderU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	    else
	      if (find_cur_entry) {
	      d2=LtfCharDist(l,x,y);
	      if (d2<D) {
		D=d2;
		col=col2;
	      }
	    }
	    col2++;
	    x++;
	  }
	} else {
	  if (cl->type_u8==LTFT_TEXT && cl->flags&LTFLF_HIGHLIGHT)
	    hl=LtfHighlight(l,full_refresh,cl,&s,ptr,k,temp_u32_attr);
	  else
	    hl=NULL;
	  if (to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
	    if (y>y_plot_bottom) //Technically we should do this for scrolling_x, too.
	      more=TRUE;
	    else if (y>=y_plot_top) {
	      if (hl)
		PlotAttrStr2(win_task,hl,k,x-x0,y-y0);
	      else
		PlotWinStr2(win_task,ptr,k,temp_u32_attr,x-x0,y-y0);
	    }
	    col2+=k;
	    x+=k;
	  } else {
	    if (find_cur_entry) {
	      while (k--) {
		d2=LtfCharDist(l,x,y);
		if (d2<D) {
		  D=d2;
		  col=col2;
		}
		col2++;
		x++;
	      }
	    } else {
	      col2+=k;
	      x+=k;
	    }
	  }
	  Free(hl);
	}
      }
    }
    nobound_switch (cl->type_u8) {
      case LTFT_TEXT:
	if (!col2 && recalc &&
	    !(cl->flags & (LTFLF_TREE|LTFLF_TAG_CB|LTFLF_DEFINE|LTFLF_HTML_LINK)))
	    del_cl=TRUE;
	break;
      case LTFT_HEX_ED:
	if (cl->flags & LTFLF_DATA_IS_PTR)
	  bptr=cl->data;
	else
	  bptr=&cl->data;
	k=cl->hex_ed_width; //columns
	for (i=0;i<cl->len;i+=k) {
	  if (cl->flags & LTFLF_ZERO_BASED)
	    SPrintF(buf,"%08tX ",i);
	  else
	    SPrintF(buf,"%08tX ",bptr);
	  ptr=buf;
	  while (ch=*ptr++) {
	    if (to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
	      if (cl->flags & LTFLF_BORDER_PLOT &&
		  !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER))
		PlotBorderU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	      else
		PlotWinU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	    }
	    if (find_cur_entry) {
	      d2=LtfCharDist(l,x,y);
	      if (d2<D) {
		D=d2;
		col=i*3;
	      }
	    }
	    x++;
	  }
	  if (i+k>cl->len) k=cl->len-i;
	  for (j=0;j<k;j++) {
	    SPrintF(buf,"%02tX",*bptr++);
	    ptr=buf;
	    while (ch=*ptr++) {
	      if (to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
		if (cl->flags & LTFLF_BORDER_PLOT &&
		    !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER))
		  PlotBorderU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
		else
		  PlotWinU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	      }
	      if (find_cur_entry) {
		d2=LtfCharDist(l,x,y);
		if (d2<D) {
		  D=d2;
		  col=col2;
		}
	      }
	      col2++;
	      x++;
	    }
	    x++;
	  }
	  bptr-=j;
	  x+=(cl->hex_ed_width-k)*3;
	  for (j=0;j<k;j++) {
	    ch=*bptr++;
	    if (!Bt(displayable_chars_bitmap,ch)) ch='.';
	    if (to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
	      if (cl->flags & LTFLF_BORDER_PLOT &&
		  !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER))
		PlotBorderU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	      else
		PlotWinU8(win_task,temp_u32_attr+ch,x-x0,y-y0);
	    }
	    if (find_cur_entry) {
	      d2=LtfCharDist(l,x,y);
	      if (d2<D) {
		D=d2;
		col=col2;
	      }
	    }
	    col2++;
	    x++;
	  }
	  y++;
	  x-=cl->hex_ed_width*3+k+9;
	}
	break;
      case LTFT_TAB:
	k=(x+8) & ~7;
	if (cl->flags & LTFLF_BORDER_PLOT &&
	    !Bt(&win_task->display_flags,DISPLAYf_NO_BORDER)) {
	  while (x<k) {
	    if (to_screen && !(cl->flags&LTFLF_DONT_DRAW))
	      PlotBorderU8(win_task,temp_u32_attr+CH_SPACE,x-x0,y-y0);
	    if (find_cur_entry) {
	      d2=LtfCharDist(l,x,y);
	      if (d2<D)
		D=d2;
	    }
	    x++;
	  }
	} else {
	  k-=x;
	  if (to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
	    if (y_plot_top<=y<=y_plot_bottom)
	      PlotWinStr2(win_task,ltf_spaces,k,temp_u32_attr,x-x0,y-y0);
	    x+=k;
	  } else {
	    if (find_cur_entry) {
	      while (k--) {
		d2=LtfCharDist(l,x,y);
		if (d2<D)
		  D=d2;
		x++;
	      }
	    } else
	      x+=k;
	  }
	}
	break;
      case LTFT_NEW_LINE:
      case LTFT_SOFT_NEW_LINE:
	if (to_screen) {
	  if (!(cl->flags&LTFLF_DONT_DRAW)&& y_plot_top<=y<=y_plot_bottom)
	    PlotWinAttr(win_task,width-(x-x0),
		cur_u8_attr<<8,x-x0,y-y0);
	}
	if (cl->flags&LTFLF_HIGHLIGHT) {
	  if (s->state&7==LTFSS_CPP_COMMENT) {
	    if (full_refresh) {
	      s=LtfSettingsIdentical(l,s);
	      s->state=LTFSS_NORMAL;
	      InsQue(s,l->settings_root.last);
	    } else
	      s=LtfSettingsNext(cl->next);
	  } else if (s->state&LTFSSF_BPT) {
	    if (full_refresh) {
	      s=LtfSettingsIdentical(l,s);
	      s->state&=~LTFSSF_BPT;
	      InsQue(s,l->settings_root.last);
	    } else
	      s=LtfSettingsNext(cl->next);
	  }
	}
	y++;
	l->page_line_num++;
start_of_line:
	if (s->left_margin==LTF_DFT)
	  x=s->indent;
	else
	  x=s->indent+s->left_margin;
adjust_xy:
	i=s->indent+s->left_margin;
	if (x<i)
	  x=i;
	if (l->page_line_num<0)
	  l->page_line_num=s->page_len+l->page_line_num%s->page_len;
	else {
	  if (l->page_line_num>=s->page_len) {
	    l->page_line_num-=s->page_len;
	    if (l->page_line_num>=s->page_len) //avoid extra divide
	      l->page_line_num=l->page_line_num%s->page_len;
	  }
	}
	if (s->header!=LTF_DFT) {
	  if (l->page_line_num<s->header) {
	    y+=s->header-l->page_line_num;
	    l->page_line_num=s->header;
	    goto start_of_line;
	  }
	}
	if (s->footer==LTF_DFT) {
	  if (l->page_line_num>=s->page_len) {
	    if (s->header==LTF_DFT)
	      l->page_line_num=0;
	    else {
	      l->page_line_num=s->header;
	      y+=s->header;
	    }
	    goto start_of_line;
	  }
	} else {
	  if (l->page_line_num>=s->page_len-s->footer) {
	    y+=s->footer;
	    if (s->header==LTF_DFT)
	      l->page_line_num=0;
	    else {
	      l->page_line_num=s->header;
	      y+=s->header;
	    }
	    goto start_of_line;
	  }
	}
	break;
      case LTFT_CURSOR_MOVEMENT:
	l->flags|=LTFF_BACKWARD_MOVEMENT;
	x+=cl->cursor_x_offset;
	if (cl->flags & LTFLF_PAGE_REL_Y) {
	  i=l->page_line_num;
	  if (cl->flags & LTFLF_TOP_Y)
	    l->page_line_num=0;
	  else if (cl->flags & LTFLF_BOTTOM_Y)
	    l->page_line_num=s->page_len-1;
	  else if (cl->flags & LTFLF_CENTER_Y)
	    l->page_line_num=s->page_len>>1;
	  y+=l->page_line_num-i;
	}
	y+=cl->cursor_y_offset;
	l->page_line_num+=cl->cursor_y_offset;
	goto adjust_xy;
      case LTFT_PAGE_BREAK:
	l->flags|=LTFF_BACKWARD_MOVEMENT;
	y+=s->page_len-cl->page_line_num;
	l->page_line_num=0;
	goto start_of_line;
      case LTFT_INDENT:
	if (full_refresh) {
	  if (cl->flags & LTFLF_LEFT_X)
	    i=cl->attr;
	  else
	    i=s->indent+cl->attr;
	  s=LtfSettingsIdentical(l,s);
	  s->indent=i;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	goto start_of_line;
      case LTFT_PAGE_LEN:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->page_len=cl->attr;
	  if (cl->flags & LTFLF_WIN_REL)
	    s->page_len+=height;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	goto adjust_xy;
      case LTFT_LEFT_MARGIN:
	i=cl->attr;
	left_margin=left+i;
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->left_margin=i;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	goto start_of_line;
      case LTFT_RIGHT_MARGIN:
	if (cl->flags & LTFLF_WIN_REL)
	  i=width-1-cl->attr;
	else
	  i=cl->attr;
	right_margin=left+i;
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->right_margin=i;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	goto adjust_xy;
      case LTFT_HEADER:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->header=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	goto adjust_xy;
      case LTFT_FOOTER:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->footer=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	goto adjust_xy;
      case LTFT_FOREGROUND:
	cur_u8_attr&=0xF0;
	if (cl->attr==LTF_DFT)
	  cur_u8_attr|=s->dft_text_attr&0x0F;
	else
	  cur_u8_attr|=cl->attr;
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->cur_text_attr=cur_u8_attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_BACKGROUND:
	cur_u8_attr&=0x0F;
	if (cl->attr==LTF_DFT)
	  cur_u8_attr|=s->dft_text_attr&0xF0;
	else
	  cur_u8_attr|=cl->attr<<4;
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->cur_text_attr=cur_u8_attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	if (to_screen && !(cl->flags&LTFLF_DONT_DRAW))
	  win_task->text_attr=cur_u8_attr;
	break;
      case LTFT_DFT_FOREGROUND:
	cur_u8_attr&=0xF0;
	if (cl->attr==LTF_DFT)
	  cur_u8_attr|=s->dft_text_attr&0xF;
	else
	  cur_u8_attr|=cl->attr;
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->dft_text_attr=s->dft_text_attr&0xF0|cur_u8_attr&0x0F;
	  s->cur_text_attr=cur_u8_attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_DFT_BACKGROUND:
	cur_u8_attr&=0x0F;
	if (cl->attr==LTF_DFT)
	  cur_u8_attr|=s->dft_text_attr&0xF0;
	else
	  cur_u8_attr|=cl->attr<<4;
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->dft_text_attr=s->dft_text_attr&0x0F|cur_u8_attr&0xF0;
	  s->cur_text_attr=cur_u8_attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	if (to_screen && !(cl->flags&LTFLF_DONT_DRAW))
	  win_task->text_attr=cur_u8_attr;
	break;
      case LTFT_ALT_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->alt_text_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_LINK_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->link_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_MACRO_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->macro_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_ANCHOR_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->anchor_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_HIDDEN_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->hidden_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_TREE_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->tree_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_USER_FOREGROUND:
	if (cl->attr==LTF_DFT) {
	  cur_u8_attr=cur_u8_attr&0xF0|s->user_attr&0x0F;
	  if (y==cursor_y) {
	    l->cur_entry=cl->next;
	    l->cur_data_col=l->cur_entry->min_col;
	  }
	} else {
	  if (full_refresh) {
	    s=LtfSettingsIdentical(l,s);
	    s->user_attr=cl->attr;
	    InsQue(s,l->settings_root.last);
	  } else
	    s=LtfSettingsNext(cl->next);
	}
	break;
      case LTFT_BINARY_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->bin_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_KEYWORD_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->keyword_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_KEYWORD2_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->keyword2_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_COMMENT_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->comment_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_QUOTE_FOREGROUND:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->quote_attr=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_WORD_WRAP:
	if (cl->attr)
	  l->flags|=LTFF_WORD_WRAP;
	else
	  l->flags&=~LTFF_WORD_WRAP;
	break;
      case LTFT_HIGHLIGHT:
	if (cl->attr)
	  l->flags|=LTFF_HIGHLIGHT;
	else
	  l->flags&=~LTFF_HIGHLIGHT;
	break;
      case LTFT_LOCK_TO_PAGE:
	if (cl->attr)
	  l->flags|=LTFF_LOCK_TO_PAGE;
	else
	  l->flags&=~LTFF_LOCK_TO_PAGE;
	break;
      case LTFT_LOCK_TO_CENTER:
	if (cl->attr)
	  l->flags|=LTFF_LOCK_TO_CENTER;
	else
	  l->flags&=~LTFF_LOCK_TO_CENTER;
	break;
      case LTFT_UNDERLINE:
	if (cl->attr)
	  l->flags|=LTFF_UNDERLINE;
	else
	  l->flags&=~LTFF_UNDERLINE;
	break;
      case LTFT_INVERT:
	if (cl->attr)
	  l->flags|=LTFF_INVERT;
	else
	  l->flags&=~LTFF_INVERT;
	break;
      case LTFT_BLINK:
	if (cl->attr)
	  l->flags|=LTFF_BLINK;
	else
	  l->flags&=~LTFF_BLINK;
	break;
      case LTFT_SHIFTED_X:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->shifted_x=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_SHIFTED_Y:
	if (full_refresh) {
	  s=LtfSettingsIdentical(l,s);
	  s->shifted_y=cl->attr;
	  InsQue(s,l->settings_root.last);
	} else
	  s=LtfSettingsNext(cl->next);
	break;
      case LTFT_PROJECT:
	l->project=cl;
	break;
      case LTFT_CURSOR:
	if (!find_cur_entry && !(l->flags & LTFF_NO_CURSOR)) {
	  l->cur_entry=cl->next;
	  l->cur_data_col=l->cur_entry->min_col;
	}
	del_cl=TRUE;
	break;
      case LTFT_PICTURE:
	if (!cl->bin_data)
	  cl->bin_data=LtfBinFind(l,cl->bin_num);
	if (cl->bin_data && (to_screen||find_cur_entry)) {
	  GrDCRst(dc);
	  dc->flags&=~(DCF_DONT_DRAW|DCF_LOCATE_NEAREST);
	  if (!to_screen || cl->flags&LTFLF_DONT_DRAW)
	    dc->flags|=DCF_DONT_DRAW;
	  ii=GrSpriteTypeMask(cl->bin_data->data);
	  if (ii&(1<<GRST_FLOOD_FILL|1<<GRST_FLOOD_FILL_NOT))
	    i=cur_u8_attr>>4 &0xF ^ win_task->text_attr>>4 & 0xF;
	  else {
	    i=temp_u32_attr>>12&0xF ^ win_task->text_attr>>4 & 0xF;
	    if (temp_u32_attr & LTFLT_SELECTED)
	      i^=0xF;
	    if (temp_u32_attr & LTFLT_INVERT)
	      i^=0xF;
	    if (blink_flag && (cl==l->cur_entry || temp_u32_attr&LTFLT_BLINK))
	      i^=0xF;
	  }
	  dc->color=i;
	  if (find_cur_entry)
	    dc->flags|=DCF_LOCATE_NEAREST;
	  dc->nearest_sprite_elem_num=0;
	  dc->nearest_dist=MAX_I64;
	  if (to_screen && l->cur_sprite==cl->bin_data->data) {
	    dc->flags|=DCF_LOCATE_NEAREST;
	    dc->cur_x=ipx;
	    dc->cur_y=ipy;
	  } else {
	    dc->cur_x=(l->x-x0)*FONT_WIDTH+pixel_left+scroll_x;
	    dc->cur_y=(l->y-y0)*FONT_HEIGHT+pixel_top+scroll_y;
	  }
	  dc->cur_z=0;
	  dc->bkcolor=i;
	  if (cl->flags & LTFLF_FROM_START) {
	    xx=(x-k-x0)*FONT_WIDTH; //TODO: scrolling text is not length k
	    yy=(y-y0)*FONT_HEIGHT;
	    zz=0;
	  } else {
	    xx=(x-x0)*FONT_WIDTH;
	    yy=(y-y0)*FONT_HEIGHT;
	    zz=0;
	  }
	  if (ii&(1<<GRST_MESH|1<<GRST_SHIFTABLE_MESH)) {
	    if (!depth_buf) {
	      GrDCAllocDepthBuf(dc);
	      depth_buf=dc->depth_buf;
	    } else
	      dc->depth_buf=depth_buf;
	    GrRotZEqu(dc->r,tP(win_task)*3.1);
	    GrRotYEqu(dc->r,tP(win_task)*1.9);
	    GrRotXEqu(dc->r,tP(win_task));
	    dc->flags|=DCF_TRANSFORMATION;
	    dc->x=xx;
	    dc->y=yy;
	    dc->z=GR_Z_ALL;
	    xx=0; yy=0; zz=0;
	  }
	  GrSpritePlot3(dc,xx,yy,zz,cl->bin_data->data);
	  dc->depth_buf=NULL;
	  if (to_screen && l->cur_sprite==cl->bin_data->data)
	    l->cur_sprite_elem_num=dc->nearest_sprite_elem_num;
	  dc->flags&=~(DCF_LOCATE_NEAREST|DCF_DONT_DRAW|DCF_TRANSFORMATION);
	  if (dc->nearest_dist<=D) {
	    D=dc->nearest_dist;
	    col=cl->min_col;
	  }
	}
	break;
      case LTFT_BPT:
	if (!(s->state&LTFSSF_BPT)) {
	  if (full_refresh) {
	    s=LtfSettingsIdentical(l,s);
	    s->state|=LTFSSF_BPT;
	    InsQue(s,l->settings_root.last);
	  } else
	    s=LtfSettingsNext(cl->next);
	}
	break;
      case LTFT_SONG:
	if (sys_focus_task==win_task && to_screen && !(cl->flags&LTFLF_DONT_DRAW)) {
	  if (cl->aux_str && (!cur_song || StrCmp(cur_song,cl->aux_str))) {
	    Free(cur_song);
	    MusicSettingsRst;
	    cur_song=AStrNew(cl->aux_str);
	  }
	}
	l->flags|=LTFF_HAS_SONG;
	break;
      case LTFT_CLEAR:
	if (recalc)
	  next_clear_found=cl;
	break;
      case LTFT_NUM_TYPES-1: //nobound_switch
      default:
	break;
    }

    if (cl->flags & LTFLF_HAS_BORDER) {
      if (cl->flags & LTFLF_SOLID_BORDER)
	DrawBorder(win_task,1,cl->x-x0,x-x0-1,cl->y-y0,y-y0,temp_u32_attr.u8[1],TRUE);
      else
	DrawBorder(win_task,0,cl->x-x0,x-x0-1,cl->y-y0,y-y0,temp_u32_attr.u8[1],TRUE);
    }
    if (full_refresh) {
      switch (cl->type_u8) {
	case LTFT_CHECK_BOX:
	case LTFT_HIDE_START:
	  cl->max_col=2;
	  break;
	case LTFT_TREE:
	case LTFT_BUTTON:
	case LTFT_LINK:
	case LTFT_MENU_VAL:
	case LTFT_MACRO:
	case LTFT_HIDE_END:
	  cl->max_col=1;
	  break;
	default:
	  cl->max_col= cl->flags & LTFLF_TREE ? 1:col2;
      }

      if (x>l->max_x) l->max_x=x;
      if (y>l->max_y) l->max_y=y;
      if (D<=best_d && !(cl->flags&LTFLF_NO_CLICK_ON)) {
	best_d=D;
	best_cl=cl;
	best_col=col;
      }
      if (cl->flags & LTFLF_TREE) {
	if (cl->flags & LTFLF_ALIAS)
	  alias=cl;
	else
	  alias=NULL;
	if (cl->flags & LTFLF_CHECKED_COLLAPSED)
	  tree_collapsed=TRUE;
	else
	  tree_collapsed=FALSE;
	cl2=cl->next;
	while (cl2!=l && cl2->type_u8!=LTFT_INDENT && !(cl2->flags & LTFLF_TREE))
	  cl2=cl2->next;
	if (cl2->type_u8==LTFT_INDENT) {
	  i=s->indent;
	  j=i;
	  do {
	    if (tree_collapsed)
	      cl2->flags|=LTFLF_SKIP;
	    else
	      cl2->flags&=~LTFLF_SKIP;
	    if (alias && cl2==l->cur_entry && Bt(ltf_tag_types,cl2->type_u8)) {
	      Free(alias->tag);
	      alias->tag=MAlloc(StrLen(cl2->tag)+8,mem_task);
	      alias->tag[0]='+';
	      alias->tag[1]=']';
	      alias->tag[2]=CH_SPACE;
	      StrCpy(alias->tag+3,cl2->tag);
	      alias->max_col=cl2->max_col+3;
	    }
	    if (cl2->type_u8==LTFT_INDENT) {
	      if (cl2->flags & LTFLF_LEFT_X)
		j=cl2->attr;
	      else
		j+=cl2->attr;
	    }
	    cl2=cl2->next;
	  } while (cl2!=l && j>i);
	}
      }
      if (cl->type_u8 == LTFT_HIDE_START) {
	if (cl->flags & LTFLF_ALIAS)
	  alias=cl;
	else
	  alias=NULL;
	cl2=cl->next;
	LBtr(hide_collapsed,0);
	j=1;
	LBEqu(hide_collapsed,j,cl->flags & LTFLF_CHECKED_COLLAPSED);
	while (cl2!=l && j>0) {
	  if (Bt(hide_collapsed,j))
	    cl2->flags|=LTFLF_SKIP;
	  else
	    cl2->flags&=~LTFLF_SKIP;
	  if (cl2->type_u8==LTFT_HIDE_START) {
	    j++;
	    LBEqu(hide_collapsed,j,cl2->flags & LTFLF_CHECKED_COLLAPSED);
	    if (Bt(hide_collapsed,j-1))
	      LBts(hide_collapsed,j);
	  } else if (cl2->type_u8==LTFT_HIDE_END) {
	    j--;
	    if (Bt(hide_collapsed,j))
	      cl2->flags|=LTFLF_SKIP;
	    else
	      cl2->flags&=~LTFLF_SKIP;
	  }
	  cl2=cl2->next;
	}
      }
    }

    cl2=cl->next;
skip:
    while (cl2!=l && cl2->flags & (LTFLF_SKIP|LTFLF_HARD_SKIP|LTFLF_FILTER_SKIP)) {
      if (cl2==l->cur_entry) {
	l->cur_entry=cl2->next;
	l->cur_data_col=l->cur_entry->min_col;
      }
      if (full_refresh) {
	cl2->x=x;
	cl2->y=y;
	cl2->page_line_num=l->page_line_num;
	cl2->settings=s;
	cl2->type.u8[1]=cur_u8_attr;
	cl2->flags=l->flags& (LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_HIGHLIGHT|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER) |
		 cl2->flags&~(LTF_BL_IV_UL|LTFLF_WORD_WRAP|LTFLF_HIGHLIGHT|LTFLF_LOCK_TO_PAGE|LTFLF_LOCK_TO_CENTER);
      }
      cl2=cl2->next;
    }

    if (full_refresh) {
      if (del_cl) {
	if (!(cl->flags & (LTFLF_HOLD|LTFLF_FILTER_SKIP))) {
	  if (cl==l->cur_entry) {
	    l->cur_entry=cl2;
	    l->cur_data_col=cl2->min_col;
	  }
	  if (best_cl==cl) {
	    best_cl=cl2;
	    best_col=cl2->min_col;  //TODO: might be bug
	  }
	  LtfEntryDel(l,cl);
	}
      }
    }
    num_entries++;
    if (!full_refresh)
      if (cl->y>y_plot_bottom)
	break;
    cl=cl2;
  }

  if (full_refresh) {
    if (l->min_x>l->max_x) {
      l->max_x=l->start_x;
      l->min_x=l->start_x;
    }
    if (l->min_y>l->max_y) {
      l->max_y=l->start_y;
      l->min_y=l->start_y;
    }

    //Update header
    if (!skipped_update) {
      cl->x=x;
      cl->y=y;
      cl->page_line_num=l->page_line_num;
      cl->settings=s;
      cl->type.u8[1]=cur_u8_attr;
      if (find_cur_entry) {
	D=LtfCharDist(l,x,y);
	if (D<best_d && !(cl->flags&LTFLF_NO_CLICK_ON)) {
	  best_d=D;
	  best_cl=cl;
	  best_col=0;
	}
      }
    }
    if (recalc && l->recalc_start==l && l->flags & LTFF_MIN_SIZE) {
      if (Bt(&win_task->display_flags,DISPLAYf_NO_BORDER)) {
	if (left<0)
	  left=0;
	i=left+l->max_x-l->min_x;
	if (i>TEXT_COLS-1)
	  i=TEXT_COLS-1;
	SetWinHorz(left,i,win_task);
	if (top<0)
	  top=0;
	i=top+l->max_y-l->min_y;
	if (i>TEXT_ROWS-1)
	  i=TEXT_ROWS-1;
	SetWinVert(top,i,win_task);
      } else {
	if (left<1)
	  left=1;
	i=left+l->max_x-l->min_x;
	if (i>TEXT_COLS-2)
	  i=TEXT_COLS-2;
	SetWinHorz(left,i,win_task);
	if (top<1)
	  top=1;
	i=top+l->max_y-l->min_y;
	if (i>TEXT_ROWS-2)
	  i=TEXT_ROWS-2;
	SetWinVert(top,i,win_task);
      }
    }
    if (find_cur_entry) {
      l->cur_entry=best_cl;
      l->cur_data_col=best_col;
      LtfFormBackward(l);

      //We need this because text coordinates are used
      if (best_d<FONT_WIDTH)
	best_d=0;

      l->best_d=best_d;
    }

    if (l->cur_entry->type_u8!=LTFT_HEX_ED) {
      l->y=l->cur_entry->y;
      l->x=l->cur_entry->x+l->cur_data_col;
    } else {
      l->y=l->cur_entry->y+l->cur_data_col/3/l->cur_entry->hex_ed_width;
      x=l->cur_data_col%(l->cur_entry->hex_ed_width*3);
      i=x/l->cur_entry->hex_ed_width;
      l->x=l->cur_entry->x+9;
      if (i<2)
	l->x+=x>>1*3+x&1;
      else
	l->x+=l->cur_entry->hex_ed_width*3+
	    (x-l->cur_entry->hex_ed_width<<1);
    }
    l->line=l->y+1;
    l->col=l->x+1;

    if (has_cursor) {
      if (to_screen) {
	x=0;
	y=0;
      } else {
	x=scroll_x/FONT_WIDTH;
	y=scroll_y/FONT_HEIGHT;
      }
      if (l->cur_top_line_num-y+height-1>l->max_y)
	l->cur_top_line_num=l->max_y-(height-1)+y;
      if (l->cur_top_line_num-y<l->min_y)
	l->cur_top_line_num=l->min_y+y;

      if (l->y-l->cur_top_line_num+y>height-1)
	l->cur_top_line_num=l->y-(height-1)+y;
      if (l->y-l->cur_top_line_num+y<0)
	l->cur_top_line_num=l->y+y;

      if (l->cur_entry->flags & LTFLF_LOCK_TO_CENTER)
	LtfCenter(l);
      LockToPage(l);

      if (l->line_start_col-x+width-1>l->max_x)
	l->line_start_col=l->max_x-(width-1)+x;
      if (l->line_start_col-x<l->min_x)
	l->line_start_col=l->min_x+x;

      if (l->x-l->line_start_col+x>width-1)
	l->line_start_col=l->x-(width-1)+x;
      if (l->x-l->line_start_col+x<0)
	l->line_start_col=l->x+x;
    }
    if (recalc)
      l->recalc_start=NULL;
  }
  if (to_screen && has_cursor) {
    x=l->x-l->line_start_col+left +scroll_x/FONT_WIDTH;
    y=l->y-l->cur_top_line_num+top+scroll_y/FONT_HEIGHT;
    if (0<=x<=right && 0<=y<=bottom &&
	x<TEXT_COLS && y<TEXT_ROWS &&
	!(l->flags&LTFF_HIDE_CURSOR)) {
      u32_ptr=gr_text_base+y*TEXT_COLS+x;
      *u32_ptr|=LTFLT_BLINK;
      *u32_ptr^=0xFF00;
    }
    if (full_refresh) {
      if (!Bt(&hss->flags,WSSf_SET_TO_POS)) {
	hss->min=l->min_x;
	if (l->max_x-width+1<hss->min)
	  hss->max=hss->min;
	else
	  hss->max=l->max_x-width+1;
	hss->pos=l->line_start_col;
      }
      if (!Bt(&vss->flags,WSSf_SET_TO_POS)) {
	vss->min=l->min_y;
	if (l->max_y-height+1<vss->min)
	  vss->max=vss->min;
	else
	  vss->max=l->max_y-height+1;
	vss->pos=l->cur_top_line_num;
      }
      LBEqu(&l->flags,LTFf_MORE,more);
    }
  }
  if (extra_processing && !same_win) {
    l->old_win_top=top;
    l->old_win_bottom=bottom;
    l->old_win_left=left;
    l->old_win_right=right;
    l->old_cur_entry=l->cur_entry;
    l->old_cur_data_col=l->old_cur_data_col;
  }
  if (l->flags & LTFF_HAS_SONG)
    LBts(&win_task->task_flags,TASKf_HAS_SONG);
  if (recalc && full_refresh) {
    i=num_entries-l->max_entries;
    if (next_clear_found) {
      LtfDelToEntry(l,next_clear_found);
      LtfUpdateWinJoin(l,to_screen,has_cursor,recalc,find_cur_entry);
    } else if (i>1024) {
      LtfDelToNum(l,i);
      LtfUpdateWinJoin(l,to_screen,has_cursor,recalc,find_cur_entry);
    }
  }
  if (to_screen)
    l->refresh_cnt++;
  GrDCDel(dc);
  Free(depth_buf);
  if (unlock)
    LtfUnlock(l);
}

public U0 LtfRecalc(Ltf *l=NULL)
{
//l->recalc_start should be set to
//the entry to begin with.  This makes
//the cmd line perform better when
//text is added to the bottom.

//Setting l->recalc_start to l will
//recalc the whole thing.

//Setting l->recalc_start to NULL will skip.

  BoolI8 unlock;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  if (l->recalc_start) {
    if (l->recalc_start!=l)
      LtfRemSoftNewLines(l,l->recalc_start);
  }
  LtfUpdateWinJoin(l,FALSE,FALSE,TRUE,FALSE);
  if (unlock)
    LtfUnlock(l);
}

public U0 LtfInsertSafe(Ltf *l,U8 *st)
{ //This is necessary when hidden text might screw-up
  //inserts.  It does them all-at-once.
  BoolI8 unlock;
  U64 old_flags;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  old_flags=l->flags;
  l->flags|=LTFF_NO_CURSOR;
  LtfPutS(l,st);
  LtfRecalc(l);
  l->flags=old_flags;
  if (unlock)
    LtfUnlock(l);
}

public U0 LtfBottom(Ltf *l=NULL)
{
  BoolI8 unlock;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  l->cur_entry=l;
  l->cur_data_col=0;
  l->recalc_start=l;
  LtfRecalc(l);
  if (unlock)
    LtfUnlock(l);
}

public U0 LtfTop(Ltf *l=NULL)
{
  BoolI8 unlock;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  l->cur_entry=l->root.next;
  l->cur_data_col=0;
  l->recalc_start=l;
  LtfRecalc(l);
  if (unlock)
    LtfUnlock(l);
}

public U0 LtfClear(Ltf *l=NULL)
{
  BoolI8 unlock;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  LtfPutS(l,"$CL$");
  l->recalc_start=l;
  LtfRecalc(l);
  if (unlock)
    LtfUnlock(l);
}

public BoolI64 LtfCursor(BoolI8 show=FALSE,Ltf *l=NULL)
{
  if (!l) {
    l=LtfCur;
    if (!l)
      return FALSE;
  }
  return !LBEqu(&l->flags,LTFf_HIDE_CURSOR,!show);
}

public U64 LtfBkColor(Ltf *l,U64 col)
{
  U64 result=l->start_text_attr>>4&15;
  LtfSettingsStruct *s=&l->settings_root;
  col=(col&15)<<4;
  l->start_text_attr=l->start_text_attr&15+col;
  s->cur_text_attr  =s->cur_text_attr&15+col;
  s->dft_text_attr  =s->dft_text_attr&15+col;
  return result;
}

public U64 LtfCurAttr(U64 attr=WHITE<<4+BLUE,TaskStruct *task=NULL)
{
  U64 result=0;
  Ltf *l;
  if (!task) task=Fs;
  result=task->text_attr;
  if (l=LtfCur(task)) {
    result=l->start_text_attr;
    l->start_text_attr=attr;
    LtfBkColor(l,attr>>4);
  }
  task->text_attr=attr;
  return result;
}

public U64 LtfAuxAttr(U64 attr=WHITE<<4+BLUE,TaskStruct *task=NULL)
{ //This will probably be ineffective since the
  //[C:/LT/OSMain/Adam1a.HPZ,1224] LTFF_ATTR_BY_PRT or [C:/LT/OSMain/Adam1a.HPZ,1225] LTFF_ATTR_BY_FILENAME flag is probably set
  //which means [C:/LT/Adam/Dsk2a.APZ,274] SetDrvTextAttr() is overriding it.
  U64 result=0;
  Ltf *l;
  if (!task) task=Fs;
  result=task->border_attr;
  if (l=LtfAux(task)) {
    result=l->start_text_attr;
    l->start_text_attr=attr;
    LtfBkColor(l,attr>>4);
  }
  task->border_attr=attr;
  return result;
}

public U0 LtfCollapse(BoolI8 collapse=TRUE,Ltf *l=NULL)
{
  LtfEntry *ll;
  BoolI8 unlock;
  if (!l) {
    l=LtfCur;
    if (!l)
      return;
  }
  unlock=LtfLock(l);
  ll=l->root.next;
  while (ll!=l) {
    if (ll->flags&LTFLF_TREE || ll->type_u8==LTFT_HIDE_START)
      BEqu(&ll->flags,LTFLf_CHECKED_COLLAPSED,collapse);
    ll=ll->next;
  }
  l->recalc_start=l;
  LtfRecalc(l);
  if (unlock)
    LtfUnlock(l);
}

#help_index "Ltf/Task"
public U0 LtfUpdateTaskLtfs(TaskStruct *task)
{
  LTPrt *p;
  U8 attr=task->border_attr;
  Ltf *l;
  P3I64 saved_scroll;
  BoolI8 old_preempt;
  l=task->last_ltf;
  while (l!=(&task->next_ltf)><(U8 *)-offset(Ltf.next_ltf)) {
    if (!(l->flags&LTFF_DONT_SHOW)) {
      if (l->flags&LTFF_AUX_LTF) {
	if (attr&0xF!=attr>>4)
	  l->start_text_attr=attr;
	old_preempt=Preempt(OFF);
	WinScrollNull(task,&saved_scroll);
	LtfUpdateWinJoin(l,TRUE,FALSE,FALSE,FALSE);
	WinScrollRestore(task,&saved_scroll);
	Preempt(old_preempt);
      } else {
	if (l->flags&LTFF_ATTR_BY_PRT) {
	  p=task->cur_prt;
	  attr=p->text_attr;
	}
	if (l->flags&LTFF_ATTR_BY_FILENAME) {
	  try
	    p=Drv2Prt(l->filename.name[0]);
	  catch {
	    p=NULL;
	    Fs->catch_except=TRUE;
	  }
	  if (p)
	    attr=p->text_attr;
	}
	if (attr&0xF!=attr>>4)
	  task->border_attr=attr;
	LtfUpdateWinJoin(l,TRUE,TRUE,FALSE,FALSE);
      }
    }
    l=l->last_ltf;
  }
}
#help_index "Ltf"

#help_index "Info;Utils;Memory/Info;Cmd Line (Typically)"

I64 TssSize(TssStruct *tss)
{
  return MSize2(tss)+
      MSize2(tss->st0)+
      MSize2(tss->st1)+
      MSize2(tss->st2);
}

I64 PenBrushesSize()
{
  I64 result=0,i;
  for (i=0;i<GR_NUM_PEN_BRUSHES;i++)
    result+=
      GrDCSize(gr_pen_brushes[i])+
      GrDCSize(gr_even_pen_brushes[i])+
      GrDCSize(gr_odd_pen_brushes[i] );
  return result;
}

I64 ScreenScaleTablesSize()
{
  I64 result=0,i;
  for (i=1;i<=GR_MAX_SCREEN_SCALE;i++)
    result+=MSize2(gr_screen_scale_tables[i]);
  return result;
}

I64 TaskStkSize(TaskStruct *task)
{
  I64 result=0;
  TaskStk *temps=task->stk;
  while (temps) {
    result+=MSize2(temps);
    temps=temps->next_stk;
  }
  return result;
}

BoolI64 MemRepTask(TaskStruct *task,BoolI8 override_validate=FALSE)
{
  I64 i;
  U8 *st;
  Ltf *l;
  LexStruct *lx;
  LTBlkDev *bd;
  Ode *o;
  if (!override_validate && !TaskValidate(task))
    return FALSE;
  if (task==Fs)
    task->rsp=GetStkPtr;
  st=MStrUtil(task->task_title,SUF_REM_CTRL_CHARS|SUF_SAFE_DOLLAR);
  PrintF("$FG,GREEN$Task:%08X$FG,CYAN$ %-30ts$FG$\r\n$ID,2$",task,st);
  Free(st);
  PrintF("$FG,PURPLE$Alloced  :%08X $FG,RED$Unused:%08X$FG$\r\n",
      TaskAllocatedMem(task,override_validate),
      TaskUnusedAllocatedMem(task,override_validate));
  PrintF("HashTable:%08X\r\n",
      HashTableSize(task->hash_table));

  i=UnusedStk(task);
  if (0<=i<=task->stk->stk_size)
    PrintF("Stk Size :%08X Unused:%08X\r\n",
      TaskStkSize(task),i);
  else
    PrintF("Stk Size :%08X $FG,RED$$BK,1$Overflow$BK,0$$FG$\r\n",
      TaskStkSize(task));

  l=task->last_ltf;
  while (l!=(&task->next_ltf)><(U8 *)-offset(Ltf.next_ltf) &&
      l->ltf_in_queue_signature==LTF_IN_QUEUE_SIGNATURE_VAL) {
    PrintF("Ltf      :%08X\r\n",LtfSize(l));
    l=l->last_ltf;
  }

  lx=task->next_lex;
  while (lx!=&task->next_lex) {
    PrintF("Lex      :%08X\r\n",LexSize(lx));
    lx=lx->next;
  }

  o=task->next_ode;
  while (o!=&task->next_ode) {
    PrintF("Ode      :%08X\r\n",OdeSize(o));
    o=o->next;
  }

  if (task==sys_winmgr_task) {
    PrintF("gr_dc2\t:%08X\r\n",GrDCSize(gr_dc2));
    PrintF("gr_dc\t:%08X\r\n",GrDCSize(gr_dc));
    PrintF("gr_screen_image\t:%08X\r\n",GrDCSize(gr_screen_image));
    PrintF("gr_scaled_dc\t:%08X\r\n",GrDCSize(gr_scaled_dc));
    PrintF("gr_pen_brushes\t:%08X\r\n",PenBrushesSize);
    PrintF("gr_text_base\t:%08X\r\n",MSize2(gr_text_base));
    PrintF("gr_text_base_cache\t:%08X\r\n",MSize2(gr_text_base_cache));
    PrintF("gr_win_z_buf\t:%08X\r\n",MSize2(gr_win_z_buf)+MSize2(gr_win_uncovered_bitmap));
    PrintF("gr_screen_scale_tables:%08X\r\n",ScreenScaleTablesSize);
  } else if (task==adam_task) {
    if (sys_ltdc_base)
      PrintF("DskCache :%08X\r\n",
	  MSize2(sys_ltdc_base)+MSize2(sys_ltdc_hash_table)+MSize2(sys_ltdc_ctrl));
    if (ws_hash_table)
      PrintF("WordStat :%08X\r\n",
	  HashTableSize(ws_hash_table)+ws_num_structs*(sizeof(WsStruct)+offset(UsedAllocatedMem.start))+
	  MSize2(ws_sorted_words)+MSize2(ws_matrix)+MSize2(ws_dict_word_list));
    for (i=0;i<num_blkdevs;i++) {
      bd=&local_blkdevs[i];
      if (bd->type==LTBDT_RAM) {
	PrintF("RAMDsk  %C:%08X Unused:%08X\r\n",
	    bd->drv_let_base,MSize2(bd->RAM_dsk),UnusedDrvSpace(bd->drv_let_base));
      }
    }
    PrintF("Clipboard:%08X\r\n",LtfSize(sys_clipboard_ltf));
  }
  PutS("$ID,-2$");
  return TRUE;
}


public U0 MemRep()
{
  I64 i;
  TaskStruct *task;
  CPUStruct *c;
  U32 *u32_ptr;
  BoolI8 old_preempt=Preempt(OFF);
  BinFileHeaderStruct *bfh=sys_boot_base-sizeof(BinFileHeaderStruct);
  bfh><(U64)+=bfh->file_size-1;

  PutS("$FG,BLACK$Low Memory\t:00100000$FG$\r\n$ID,2$");
  u32_ptr=SYS_BOOT_BASE;
  PrintF("OSMain\t:%08X-%08X\r\n",*u32_ptr-sizeof(BinFileHeaderStruct),bfh);
  PutS("VGA\t\t:000A0000-000BFFFF\r\n");
  PrintF("$ID,-2$$FG,BLACK$High Memory\t:00100000-%08X$FG$\r\n",
      sys_heap_limit);
  PrintF("$ID,2$Page Tables\t:%08X-%08X\r\n",PAGE_TABLE_BASE,sys_heap_base-1);
  PutS("$ID,-2$");

  if (sys_data_bp) {
    PrintF("$FG,BLACK$Code Heap:%010X $FG,RED$Unused:%010X$FG$\r\n",
	sys_code_bp->size*PAGE_SIZE,UnusedBPMem(sys_code_bp));
    PrintF("$FG,BLACK$Data Heap:%010X $FG,RED$Unused:%010X$FG$\r\n",
	sys_data_bp->size*PAGE_SIZE,UnusedBPMem(sys_data_bp));
  } else
    PrintF("$FG,BLACK$Code/Data Heap:%08X $FG,RED$Unused:%08X$FG$\r\n",
	sys_code_bp->size*PAGE_SIZE,UnusedBPMem(sys_code_bp));

  for (i=0;i<mp_cnt;i++) {
    c=&cpu_structs[i];
    PrintF("$FG,GREEN$CPU%d$FG$\r\n$ID,2$",i);
    PrintF("Tss:%08X\r\n",TssSize(c->tss));
    task=c->seth_task;
    do {
      if (!MemRepTask(task))
	break;
      task=task->next_task;
    } while (task!=c->seth_task);
    MemRepTask(c->idle_task,TRUE);
    PutS("$ID,-2$");
  }

  PutS("$FG,GREEN$Independent Heaps$FG$\r\n$ID,2$");
  PrintF("$FG,BLACK$sys_uncached_heap:%08X $FG,RED$Unused:%08X$FG$\r\n",
      sys_uncached_heap->bp->size*PAGE_SIZE,UnusedBPMem(sys_uncached_heap->bp));
  PutS("$ID,-2$\r\n");
  Preempt(old_preempt);
}

#help_index ""

                             DIRECTORY STRUCTURE

/TempleOS/Accts Each subdirectory is an acct.  When you boot, you can select 
an acct to login to, unless you compile Kernel soas to pick one.  Your acct 
directory is your HOME directory and all your user data should be placed in 
here to ease backing-up your data.  When you Install an application it will 
create a subdirectory of your HOME directory for storage.

/TempleOS/Apps Applications are placed in subdirectories of /TempleOS/Apps.  
Applications should have a file called Install.CPP.Z which will install the 
app for the current user acct.  The file, Load.CPP.Z will load the
application 
into mem.  The file, Run.CPP.Z, will usually load and execute the app.  To
add 
an app to your personal menu, use <CTRL-L>, insert a macro with the PopUp 
option checked and invoke the Run.CPP.Z file.

/TempleOS/Demo Here you can find lots of sample code to do various things.

/TempleOS/Doc Here you can find documentation.

/TempleOS/Kernel The core of the operating system is found here.  Since 
priviledge levels are not used, calling it a "kernel" is deceptive.  It is
AOT 
compiled by [C:/TempleOS/Adam/Boot/InsBoot.CPP.Z,128]
MakeOSInstallPrtBootLoader().  It is loaded by the boot loader and 
must fit in 640K.

/TempleOS/Compiler The compiler module src code is found here.  The compiler 
is AOT compiled to produce a binary file which is loaded at boot.  It is also 
AOT compiled by [C:/TempleOS/Adam/Boot/InsBoot.CPP.Z,128]
MakeOSInstallPrtBootLoader().

/TempleOS/Adam The non-kernel part of the operating system is found here.  It 
is JIT compiled during boot.



                                  ACCT FILES

You can add and remove accts by making or removing directories in the ::/Templ
eOS/Accts directory.  An empty account directory should be valid because it 
will get default files from the parent directory.  Compile the
[C:/TempleOS/Adam/Boot/InsBoot.CPP.Z,128] Kernel to set 
the active acct or cause it to prompt an account at boot. 

[C:/TempleOS/Accts/TAD/PersonalMenu.TXT,1] a menu viewed with the <CTRL-M>
key or by clicking "MENU
" in the upper left border area of a window.

[C:/TempleOS/Accts/TAD/PersonalNotes.TXT,1] a personal note file viewed with
the <CTRL-SHIFT-M> 
key.

[C:/TempleOS/Accts/TAD/DoItOnce.CPP,1] a file invoked at the start-up of the
first user.  Customize 
this!

[C:/TempleOS/Accts/TAD/Adam3.CPP,1] files invoked when the adam task
starts-up.  Customize these!

[C:/TempleOS/Accts/TAD/Registry.CPP.Z,1] can be edited by hand or deleted to
reset to defaults.  
Takes affect next boot.



                             APPLICATION POLICIES

* Place applications in their own /TempleOS/Apps subdirectory.

* Make a file called Load.CPP.Z to load the application.

* Make a file called Run.CPP.Z to load and run the application, preferable by 
#includeing the Load.CPP.Z file.

* Place user data in a subdirectory of HOME, preferably naming the 
subdirectory the same as the /TempleOS/Apps subdirectory.  Or, place data in 
the Registry.CPP.Z file.  See [C:/TempleOS/Demo/RegistryDemo.CPP.Z,1].

* Make a file called Install.CPP.Z or Install.AUT.Z to create the HOME 
subdirectory and do similar stuff.

 

                            PROGRAMMING GUIDELINES

* Virtual mem/Paging is not used -- it is identity mapped in x86_64 mode. 
The 
stk does not grow, so allocate enough when the task (process) is
[C:/TempleOS/Kernel/Task1a.CPP.Z,224] Spawned and 
use the heap for most things.  (The "heap" refers to
[C:/TempleOS/Kernel/Memory.CPP.Z,956] MAlloc() and
[C:/TempleOS/Kernel/Memory.CPP.Z,950] Free().)

* See [C:/TempleOS/Doc/Glossary.TXT.Z,1] Naming Convention and
[C:/TempleOS/Doc/Glossary.TXT.Z,1] Abbreviations.

* There are two modes of compiling [C:/TempleOS/Doc/Glossary.TXT.Z,1] AOT
Compile Mode and [C:/TempleOS/Doc/Glossary.TXT.Z,1] JIT Compile Mode.  
Actual compilation is done in both -- nothing is "interpreted".

* [C:/TempleOS/Doc/HolyC.TXT.Z,1] HolyC

* I often use 64-bit values when smaller would be more appropriate because
the 
compiler generally is more efficient with 64-bit values.  (All value get 
promoted to 64-bit by the TempleOS compiler, when fetched.)

* I use signed ints unless absolutely necessary.  I would like to move toward 
a language with one type of integer more like BASIC or something.  I think
one 
type of integer is more friendly to new programmers, but I have no plans to 
actually switch to one type of int.

* Short circuit logic is assumed.

* I generally avoid boolean expression assignments.  Boolean assignments
don't 
have short circuit logic and are not compiled efficiently.  The Bool type is 
just an alias for a 1 byte int -- nothing forces it to 1 or 0.  There is a 
[C:/TempleOS/Kernel/Adam1b.HPP.Z,212] ToBool() function that will, however.

* If you use floats in your interrupt routine, save and restore the fpu state 
with [C:/TempleOS/Kernel/Adam1b.HPP.Z,252] Fxsave() and
[C:/TempleOS/Kernel/Adam1b.HPP.Z,253] Fxrstor().  The timer interrupt does
this.  The keyboard and 
mouse don't use floats.

* Bracketing code with PushFD;Cli; and PopFD; will protect against 
simultaneous accesses from tasks on _one_ core.  To protect against multiple 
cores, you need a locked semaphore.  I think semiphores need to be in their 
own cache line, but I'm not sure.  I use lock bits in a lot of places not 
aligned.

* [C:/TempleOS/Kernel/Misc1a.CPP.Z,263] SysDbg() and
[C:/TempleOS/Kernel/Misc1a.CPP.Z,269] IsSysDbg() are really handy when
working on the compiler or 
kernel.  It's just a bit you can set and test.

* I don't use "U0 *" because the size would be weird for ptr arithmetic.  The 
size of "U0" is zero.



                               HASH SYM TABLES

* See [C:/TempleOS/Adam/Hash2a.CPP.Z,1] for examples of how the hash tables
are 
set-up.  Basically, syms are placed into hash tables and child process hash 
tables are chained to parents.  This provides scopes for vars and functions.

* adam_task->hash_table holds the HolyC syms loaded in on start-up.

* Fs->hash_table holds user HolyC syms and if a sym is not found, it checks 
parents.  When a duplicate sym is added to the table, it overshadows the 
previous sym unless you have done [C:/TempleOS/Compiler/Directives.CPP.Z,6]
OptOn([C:/TempleOS/Kernel/Adam1a.HPP.Z,1586] OPTf_REPLACE_SYMS).  When
developing 
software, typically you include the file at the cmd prompt, make changes and 
reinclude it.  Old syms are overshadowed but they are still there.  
Periodically, kill the TASK and start fresh when mem is low.  If you wish
your 
applications to free themselves instead of staying in mem, spawn or
[C:/TempleOS/Adam/Doc/DocPopUp.CPP.Z,376] PopUp() a 
task to run the application and kill it when it's done.

* To display the contents of a hash table, use the [MN:Who] Who() routine or
the 
varients.  [C:/TempleOS/Adam/Hash2a.CPP.Z,387] HashDepthRep() gives a
histogram  of how long the chains are, in 
case you wish to make hash table sizes bigger.



                          ASSEMBLY LANGUAGE CONCERNS

* FS must always point to the [C:/TempleOS/Kernel/Adam1a.HPP.Z,3008] CTask.

* GS must always point to the [C:/TempleOS/Kernel/Adam1a.HPP.Z,3618] CCPU.

* Don't change the segment registers unless interrupts are off.  It's hard to 
do, anyway.  [C:/TempleOS/Kernel/Utils1a.CPP.Z,306] SET_FS_BASE and
[C:/TempleOS/Kernel/Utils1a.CPP.Z,290] _SET_GS_BASE.

* When interacting with compiled code, preserve RBP, RSI, RDI, R10-R15
because 
the compiler uses these for register vars.  You are free to clobber RAX, RBX, 
RCX, RDX, R8 and R9.  See [C:/TempleOS/Kernel/Adam1a.HPP.Z,3682] Compiler Reg
Masks.

* I recommend using the standard stk frame for functions because
[C:/TempleOS/Kernel/Dbg1a.CPP.Z,53] Caller() is 
used to display the call stk, such as for the wallpaper.
	ENTER	nnnn
...
	LEAVE
	RET

* The args are removed from the stack with RET1 statements.

	RET1	16	//remove two args

                        System Programming Guide-Lines

* See [C:/TempleOS/Doc/Glossary.TXT.Z,1] Naming convention.

* See [C:/TempleOS/Doc/Glossary.TXT.Z,1] Abbreviations.

* I avoid the '?' operator.  It's not very efficient with my compiler since
it 
executes both expressions and I just don't like it.

* I place "New", "Del", "Init", "Rst", ect. on the end of a function name 
instead of beginning.  "RstMusicSettings" should be "MusicSettingsRst".

* I often use 64-bit values in function args when smaller would be more 
appropriate because the compiler generally is more efficient with 64-bit 
values.  (All value get promoted to 64-bit by the TempleOS compiler, when 
fetched.)

* Short circuit logic is assumed.

* I generally avoid boolean expression assignments because TRUE is dangerous 
with different compilers, though, the TempleOS compiler should use 1 for TRUE 
values, not just nonzero.  Boolean assignments don't have short circuit logic 
and are not compiled efficiently.  The Bool type is just an alias for a 1
byte 
int -- nothing forces it to 1 or 0.  There is a
[C:/TempleOS/Kernel/Adam1b.HPP.Z,212] ToBool() function.

* If you use floats in your interrupt routine, save and restore the fpu state 
with [C:/TempleOS/Kernel/Adam1b.HPP.Z,252] Fxsave() and
[C:/TempleOS/Kernel/Adam1b.HPP.Z,253] Fxrstor().  The timer interrupt does
this.  The keyboard and 
mouse don't use floats.

* Bracketing code with PushFD;Cli; and PopFD; will protect against 
simultaneous accesses from tasks on _one_ core.  To protect against multiple 
cores, you need a locked semaphore.

* I put an '_' on the front of the name of pass-by-ref fun args.

* I put an '_' on the front of C callable ASM routines.

* [C:/TempleOS/Kernel/Misc1a.CPP.Z,272] SysDbg() and
[C:/TempleOS/Kernel/Misc1a.CPP.Z,278] IsSysDbg() are really handy when
working on the compiler or 
Kernel.  It's just a bit you can set and test.

* I don't use "U0 *" because the size would be weird for ptr arithmetic.

* "result" is reserved for local variable that holds function return val.

* I use I64 instead of U64 unless necessary.

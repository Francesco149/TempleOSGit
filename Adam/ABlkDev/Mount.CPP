#help_index "Install;File/Cmd Line (Typically);Cmd Line (Typically);"
I64 Mount2(U8 boot_drv_let,CDoc *_doc,Bool repartition)
{//If _doc, called by [C:/Kernel/KCfg.CPP.Z,1] else called by [C:/Adam/ABlkDev/Mount.CPP.Z,127] Mount().
  I64 cnt,res=0,num_hints,drv_let,type,unit;
  U8 blks_buf[STR_LEN],addr_buf[STR_LEN],base0_buf[STR_LEN],base1_buf[STR_LEN],
	*filename=NULL,*filename2=NULL;
  CATARep *head=NULL,*tempha;
  Bool one_drv,make_free;
  CDoc *doc;
  boot_drv_let=ToUpper(boot_drv_let);
  do {
    cnt=0;
    if (!_doc)
      DrvRep;
    "\n****** Mount Drives ******\n"
	  "$GREEN$A$FG$-$GREEN$B$FG$ are RAM drives.\n"
	  "$GREEN$C$FG$-$GREEN$L$FG$ are ATA hard drives.\n"
	  "$GREEN$M$FG$-$GREEN$P$FG$ are ISO file read drives.\n"
	  "$GREEN$Q$FG$-$GREEN$S$FG$ are ISO file write drives.\n"
	  "$GREEN$T$FG$-$GREEN$Z$FG$ are ATAPI CD/DVD drives.\n"
	  "\nDrive Letter ($PURPLE$<ENTER>$FG$ to exit):";
    drv_let=ToUpper(GetChar);
    '\n';
    if (type=Let2BlkDevType(drv_let)) {
      one_drv=FALSE;
      if (_doc) { //Called by [C:/Kernel/KCfg.CPP.Z,1]
	doc=_doc;
	make_free=FALSE;
      } else { //Called by [C:/Adam/ABlkDev/Mount.CPP.Z,127] Mount()
	doc=DocNew;
	DocPrint(doc,"CBlkDev *bd;\n");
	make_free=TRUE;
      }
      unit=0;
      switch (type) {
	case BDT_RAM:
	  "Addr of RAM disk ($PURPLE$<ENTER>$FG$ to MAlloc):";
	  GetS(addr_buf,STR_LEN);
	case BDT_ISO_FILE_WRITE:
	  "Blks of 512 bytes:";
	  GetS(blks_buf,STR_LEN);
	  break;
	case BDT_ISO_FILE_READ:
	  filename=GetStr("File Name:");
	  break;
	case BDT_ATA:
	case BDT_ATAPI:
	  num_hints=ATARep(,,&head);
	  if (type==BDT_ATAPI && boot_drv_let)
	    "<ENTER> to use booted CD/DVD\n"; //Only [C:/Kernel/KCfg.CPP.Z,1]
	  do {
	    if (num_hints)
	      "Enter dev number or\nport with $PURPLE$0x$FG$ prefix.\n"
		    "I/O Port Base0:\n";
	    else
	      "Include $PURPLE$0x$FG$ prefix.\nI/O Port Base0:\n";
	    GetS(base0_buf,STR_LEN);
	  } while (!Str2I64(base0_buf) && (type!=BDT_ATAPI || !boot_drv_let));
	  if (1<=Str2I64(base0_buf)<=num_hints) {
	    tempha=ATARepFind(head,Str2I64(base0_buf));
	    StrPrint(base0_buf,"0x%X",tempha->base0);
	    StrPrint(base1_buf,"0x%X",tempha->base1);
	    unit=tempha->unit;
	  } else if (type!=BDT_ATAPI || *base0_buf) {
	    if (type==BDT_ATAPI)
	      StrCpy(base1_buf,"0");
	    else
	      do {
		"I/O Port Base1:\n";
		GetS(base1_buf,STR_LEN);
	      } while (!Str2I64(base1_buf));
	    do {
	      "\t$PURPLE$0$FG$=Master\n\t$PURPLE$1$FG$=Slave\nUnit:";
	      unit=GetChar-'0';
	    } while (!(0<=unit<=1));
	    '\n';
	  }
	  LinkedLstDel(head);
	  break;
      }
      DocPrint(doc,"bd=BlkDevNextFreeSlot(\'%C\',%d);bd->unit=%d;\n",
	    drv_let,type,unit);
      switch (type) {
	case BDT_RAM:
	  if (!*addr_buf) StrCpy(addr_buf,"0");
	  DocPrint(doc,"bd->RAM_dsk=%s;\n",addr_buf);
	case BDT_ISO_FILE_WRITE:
	  if (!*blks_buf) StrCpy(blks_buf,"0");
	  DocPrint(doc,"bd->max_blk=(%s)-1;\n",blks_buf);
	  break;
	case BDT_ISO_FILE_READ:
	  filename2=FileNameAbs(filename);
	  DocPrint(doc,"bd->file_dsk_name=AStrNew(\"%s\");\n",filename2);
	  DocPrint(doc,"bd->drv_offset=19<<2+"
		"(DVD_BLK_SIZE*2+DVD_BOOT_LOADER_SIZE)/BLK_SIZE;\n");
	  break;
	case BDT_ATA:
	case BDT_ATAPI:
	  if (type==BDT_ATAPI && !*base0_buf) {
	    DocPrint(doc,"GetBaseUnit(bd);\n"); //Only [C:/Kernel/KCfg.CPP.Z,1]
	    if (drv_let==boot_drv_let)
	      make_free=TRUE;
	  } else
	    DocPrint(doc,"bd->base0=%s;bd->base1=%s;\n",base0_buf,base1_buf);
	  if (type==BDT_ATA && repartition) {
	    "\nReformat WHOLE drive!";
	    one_drv=YorN;
	  }
	  break;
      }
      DocPrint(doc,"BlkDevAdd(bd,%d,%d);\n",one_drv,make_free);
      if (_doc) //Called by [C:/Kernel/KCfg.CPP.Z,1]
	cnt++;
      else { //Called by [C:/Adam/ABlkDev/Mount.CPP.Z,127] Mount()
	if ((cnt=ExeDoc(doc)) && one_drv)
	  PrtDsk(drv_let);
	DocDel(doc);
      }
    }
    res+=cnt;
  } while (cnt || !res && _doc); //At least 1 if Called by [C:/Kernel/KCfg.CPP.Z,1]
  Free(filename);
  Free(filename2);
  return res;
}

public I64 Mount(Bool repartition=FALSE)
{//Mount drives.
  return Mount2(0,NULL,repartition);
}

public U0 Unmount(U8 drv_let=0)
{//Unmount drive(s).
  BlkDevDel(Let2BlkDev(drv_let));
}

public U8 MountFile(U8 *filename)
{//Mount ISO.C file.
  U8 *filename2=DftExt(filename,"ISO.C"),*filename3=FileNameAbs(filename2);
  CDrv *dv=DrvMakeFreeSlot(DrvNextFreeLet('M')); //First [C:/Kernel/KernelA.HPP.Z,2632] BDT_ISO_FILE_READ
  CBlkDev *bd=BlkDevNextFreeSlot(dv->drv_let,BDT_ISO_FILE_READ);
  bd->drv_offset=19<<2+(DVD_BLK_SIZE*2+DVD_BOOT_LOADER_SIZE)/BLK_SIZE;
  bd->file_dsk_name=AStrNew(filename3);
  BlkDevAdd(bd,TRUE,TRUE);
  Free(filename3);
  Free(filename2);
  return dv->drv_let;
}

#help_index "DolDoc/Misc"

#define C_INDENT_SPACES		2
#define ASM_RENUM_SPACING	5

#define EF_REINDENT	0
#define EF_CHK_COMPILE	1
#define EF_RENUM_ASM	2
#define EF_CTRL_SLIDER	3
#define EF_CH_SC	4

I64 PopUpEdFmt()
{
  I64 i;
  CDoc *doc=DocNew;
  DocPrint(doc,"$LTBLUE$$MU,\"Check Compile\",LE=EF_CHK_COMPILE$\n"
	"$MU,\"Reindent CPP.Z Fun\",LE=EF_REINDENT$\n"
	"$MU,\"Renum Asm Local @@ Labels for Fun\",LE=EF_RENUM_ASM$\n"
	"$MU,\"Insert Template Code: Ctrl Slider\",LE=EF_CTRL_SLIDER$\n"
	"$MU,\"Insert ASCII/Scan Code Hex Codes for key pressed\",LE=EF_CH_SC$\n\n"
	"$MU,\"CANCEL\",LE=DOCM_CANCEL$\n\n"
	"$GREEN$<ALT-BACKSPACE>$FG$ to undo if not happy\n"
	"with the results.\n");
  i=PopUpMenu(doc);
  DocDel(doc);
  return i;
}

class CRILex
{
  CLex *lx1,*lx2;
  CQueVectU8 *indent;
  I64 depth,exp_depth,one_shot;
  Bool was_new_line,is_not_cont;
};

I64 EdRILex(CRILex *rx)
{
  rx->is_not_cont=FALSE;
  I64 i;
  do {
    Lex(rx->lx1);
    Lex(rx->lx2);
    i=PrsKeyWord(rx->lx2);
    if (rx->lx1->token=='\n' && rx->lx2->token==';' || rx->lx2->token=='{' ||
	rx->lx2->token=='}' || rx->lx2->token==':' || rx->lx2->token==')' &&
	!rx->exp_depth || i==KW_ELSE || i==KW_CATCH || i==KW_DO)
	rx->is_not_cont=TRUE;
    if (rx->was_new_line && (rx->lx1->token!=':' ||
	i==KW_DFT || i==KW_SUB_SWITCH_START || i==KW_SUB_SWITCH_END)) {
      QueVectU8Put(rx->indent,rx->lx2->lfns[0].cur_entry->y,rx->depth+rx->one_shot);
      rx->one_shot=0;
    }
    if (rx->lx2->token=='\n')
      rx->was_new_line=TRUE;
    else
      rx->was_new_line=FALSE;
  } while (rx->lx1->token=='\n');
  return rx->lx1->token;
}

U0 EdRIExp(CRILex *rx)
{
  if (rx->lx1->token=='(') {
    if (!rx->exp_depth++)
      rx->depth+=3;
    EdRILex(rx);
    while (rx->lx1->token && rx->lx1->token!=')')
      EdRIExp(rx);
    if (!--rx->exp_depth) {
      rx->depth-=3;
      if (rx->depth<0) rx->depth=0;
    }
  }
  EdRILex(rx);
}

U0 EdRIStmt(CRILex *rx,Bool indent)
{
  I64 i;
  Bool cont;
  if (rx->lx1->token=='{') {
    rx->depth++;
    EdRILex(rx);
    while (rx->lx1->token && rx->lx1->token!='}')
      EdRIStmt(rx,FALSE);
    if (--rx->depth<0) rx->depth=0;
    EdRILex(rx);
  } else {
    if (indent) rx->depth++;
    do {
      cont=FALSE;
      switch (PrsKeyWord(rx->lx1)) {
	case KW_IF:
	  EdRILex(rx);
	  EdRIExp(rx);
	  EdRIStmt(rx,TRUE);
	  if (PrsKeyWord(rx->lx1)==KW_ELSE) {
	    EdRILex(rx);
	    if (PrsKeyWord(rx->lx1)==KW_IF && rx->lx2->token!='\n')
	      EdRIStmt(rx,FALSE);
	    else
	      EdRIStmt(rx,TRUE);
	  }
	  break;
	case KW_TRY:
	  EdRILex(rx);
	  EdRIStmt(rx,TRUE);
	  if (PrsKeyWord(rx->lx1)==KW_CATCH) {
	    EdRILex(rx);
	    EdRIStmt(rx,TRUE);
	  }
	  break;
	case KW_FOR:
	case KW_WHILE:
	  EdRILex(rx);
	  EdRIExp(rx);
	  EdRIStmt(rx,TRUE);
	  break;
	case KW_ASM:
	  EdRILex(rx);
	  EdRIStmt(rx,TRUE);
	  break;
	case KW_DO:
	  EdRILex(rx);
	  EdRIStmt(rx,TRUE);
	  if (PrsKeyWord(rx->lx1)==KW_WHILE) {
	    EdRILex(rx);
	    EdRIExp(rx);
	  }
	  if (rx->lx1->token==';')
	    EdRILex(rx);
	  break;
	case KW_SWITCH:
	case KW_NOBOUND_SWITCH:
	  EdRILex(rx);
	  EdRIExp(rx);
	  if (rx->lx1->token=='{') {
	    rx->depth++;
	    EdRILex(rx);
	    i=0;
	    while (rx->lx1->token && rx->lx1->token!='}') {
	      switch (PrsKeyWord(rx->lx1)) {
		case KW_SUB_SWITCH_START:
		  rx->depth+=i; i=0;
		  while (EdRILex(rx) && rx->lx1->token!=':');
		  EdRILex(rx);
		  i++;
		  break;
		case KW_SUB_SWITCH_END:
		  rx->depth+=i; i=0;
		  if (--rx->depth<0) rx->depth=0;
		  while (EdRILex(rx) && rx->lx1->token!=':');
		  EdRILex(rx);
		  break;
		case KW_CASE:
		case KW_DFT:
		  rx->depth+=i; i=0;
		  while (EdRILex(rx) && rx->lx1->token!=':');
		  EdRILex(rx);
		  break;
		default:
		  if (rx->lx1->token)
		    EdRIStmt(rx,TRUE);
	      }
	    }
	    if (--rx->depth<0) rx->depth=0;
	    EdRILex(rx);
	  }
	  break;
	default:
	  if (rx->lx1->token==TK_IDENT && rx->lx1->hash_entry &&
	    rx->lx1->hash_entry->type&(HTT_OPCODE|HTT_ASM_KEYWORD)) {
	    rx->one_shot=4-rx->depth;
	    do EdRILex(rx);
	    while (rx->lx2->token && rx->lx2->token!='\n');
	    rx->is_not_cont=TRUE;
	  } else {
	    while (rx->lx1->token && rx->lx1->token!=';' && rx->lx1->token!=':') {
	      if (rx->lx2->token=='\n' && !rx->is_not_cont)
		rx->one_shot=3;
	      EdRILex(rx);
	    }
	    if (rx->lx1->token==':')
	      cont=TRUE;
	    EdRILex(rx);
	  }
      }
    } while (cont && rx->lx1->token!='}');
    if (indent && --rx->depth<0)
      rx->depth=0;
  }
}

CQueVectU8 *EdRICode(CDoc *doc)
{
  CQueVectU8 *result;
  CRILex *rx=CAlloc(sizeof(CRILex));

  rx->lx1=LexNew(,LF_KEEP_NEW_LINES|LF_DONT_FREE_BUF,doc->filename.name);
  Free(rx->lx1->lfns[0].full_name);
  LexAttachDoc(rx->lx1,&rx->lx1->lfns[0],doc,,doc->cur_entry,doc->cur_data_col);

  rx->lx2=LexNew(,LF_KEEP_NEW_LINES|LF_DONT_FREE_BUF,doc->filename.name);
  Free(rx->lx2->lfns[0].full_name);
  LexAttachDoc(rx->lx2,&rx->lx2->lfns[0],doc,,doc->cur_entry,doc->cur_data_col);

  rx->indent=QueVectU8New(doc->cur_entry->y);

  Lex(rx->lx1);
  EdRIStmt(rx,FALSE);

  LexDel(rx->lx1);
  LexDel(rx->lx2);
  result=rx->indent;
  Free(rx);
  return result;
}

U0 EdRemFunLeadingSpace(CDoc *doc)
{
  Bool unlock=DocLock(doc),
	start_of_line=TRUE;
  U8 *ptr;
  I64 ch,levels=1;
  CDocEntry *doc_e,*doc_e2;

  EdGoToFun(doc,FALSE,FALSE);
  doc_e=doc->cur_entry->next;
  do {
    doc_e2=doc_e->next;
    if (doc_e!=doc && doc_e!=doc->cur_entry &&
	  !(doc_e->de_flags&(DOCEG1_DONT_EDIT-DOCEF_SCROLLING_X)))
      switch (doc_e->type_u8) {
	case DOCT_TEXT:
	  ptr=doc_e->tag;
	  if (start_of_line) {
	    while (*ptr==CH_SPACE)
	      ptr++;
	    if (*ptr)
	      start_of_line=FALSE;
	    ptr=StrNew(ptr,doc->mem_task);
	    Free(doc_e->tag);
	    doc_e->tag=ptr;
	  }
	  if (!*ptr)
	    DocEntryDel(doc,doc_e);
	  else {
	    while (ch=*ptr++)
	      if (ch=='{')
		levels++;
	      else if (ch=='}') {
		if (!--levels)
		  break;
	      }
	    if (!levels) goto ls_done;
	  }
	  break;
	case DOCT_TAB:
	  if (start_of_line)
	    DocEntryDel(doc,doc_e);
	  break;
	case DOCT_NEW_LINE:
	  start_of_line=TRUE;
	  break;
	default:
	  start_of_line=FALSE;
      }
    doc_e=doc_e2;
  } while (doc_e!=doc->cur_entry);
ls_done:
  DocRecalc(doc);
  DocCenter(doc);
  if (unlock)
    DocUnlock(doc);
}

class CRenum
{
  CRenum *next,*last;
  U8 label[sizeof(CEdFindText.find_text)];
};

I64 EdRAGetU8(CDoc *doc)
{
  I64 result=-1;
  while (doc->cur_entry!=doc && doc->cur_entry->type&DOCET_SELECTED && result<0) {
    result=EdCurU8(doc);
    EdCursorRight(doc);
  }
  return result;
}

U0 EdRACollect(CDoc *doc,CRenum *root)
{
  I64 ch,i;
  CRenum *tempr;
  U8 buf[sizeof(CEdFindText.find_text)];
  ch=EdRAGetU8(doc);
  while (ch>=0) {
    if (ch!='@')
      ch=EdRAGetU8(doc);
    else {
      ch=EdRAGetU8(doc);
      if (ch=='@') {
	ch=EdRAGetU8(doc);
	StrCpy(buf,"@@");
	i=2;
	while (ch>=0 && i<sizeof(CEdFindText.find_text)) {
	  if (Bt(chars_bitmap_alpha_numeric,ch))
	    buf[i++]=ch;
	  else
	    break;
	  ch=EdRAGetU8(doc);
	}
	if (i<sizeof(CEdFindText.find_text)) {
	  buf[i++]=0;
	  while (ch>=0 && Bt(chars_bitmap_white_space,ch))
	    ch=EdRAGetU8(doc);
	  if (ch==':') {
	    ch=EdRAGetU8(doc);
	    tempr=MAlloc(sizeof(CRenum));
	    StrCpy(tempr->label,buf);
	    QueIns(tempr,root->last);
	  }
	}
      }
    }
  }
  //This is needed because we moved the
  //cursor and it didn't recalc.
  DocRecalc(doc);
}

U0 EdRenumAsm(CDoc *doc)
{
  Bool unlock=DocLock(doc);
  I64 num=0;
  CRenum root,*tempr,*tempr1;
  U8 buf[sizeof(CEdFindText.find_text)],
	buf2[sizeof(CEdFindText.find_text)];

  QueInit(&root);
  EdSelectFun(doc,TRUE);
  EdRACollect(doc,&root);

  tempr=root.next;
  while (tempr!=&root) {
    tempr1=tempr->next;
    num+=ASM_RENUM_SPACING;
    StrPrint(buf,"@#%02d",num);
    EdReplace(doc,tempr->label,buf,TRUE,TRUE,TRUE);
    Free(tempr);
    tempr=tempr1;
  }

  while (num) {
    StrPrint(buf, "@#%02d",num);
    StrPrint(buf2,"@@%02d",num);
    EdReplace(doc,buf,buf2,TRUE,TRUE,TRUE);
    num-=ASM_RENUM_SPACING;
  }
  EdSelectAll(doc,FALSE);
  DocRecalc(doc);
  DocCenter(doc);
  if (unlock)
    DocUnlock(doc);
}

U0 EdCodeTools2(CDoc *doc,I64 tool_action)
{
  Bool okay,unlock=DocLock(doc),start_of_line=TRUE;
  CDocEntry *doc_e,*doc_ne;
  I64 i,start_y,end_y,x,r,goto_line_num;
  U8 *b,*st,*st2,*prj_file;
  CTask *task=NULL;
  CSrvCmd *tempc;
  CQueVectU8 *indent;

  DocRecalc(doc);
  goto_line_num=doc->cur_entry->y+1;

  DocCaptureUndo(doc,TRUE);
  switch (tool_action) {
    case EF_CHK_COMPILE:
      okay=FALSE;
      if (doc->flags&DOCF_PLAIN_TEXT)
	DocFlagsToggle(doc,DOCF_PLAIN_TEXT);
      DocWrite(doc);
      task=Spawn(&SrvCmdLine,NULL,"Srv",,Fs);
      st2=CurDir;
      st=MStrPrint("Cd(\"%s\");",st2);
      tempc=TaskExe(task,Fs,st,1<<SVCf_WAKE_MASTER|1<<SVCf_FOCUS_MASTER);
      Free(st2);
      Free(st);
      WinHorz(Fs->win_left,Fs->win_right, task);
      WinVert(Fs->win_top, Fs->win_bottom,task);
      if (ScanResult(tempc,&r)) {
	st=DirFile(doc->filename.name,,"PRJ.Z");
	prj_file=FileNameAbs(st,FUF_Z_OR_NOT_Z);
	Free(st);
	if (FileFind(prj_file)) {
	  st2=DirFile(prj_file),
	  st=MStrPrint("Cd(\"%s\");",st2);
	  Free(st2);
	  tempc=TaskExe(task,Fs,st,1<<SVCf_WAKE_MASTER|1<<SVCf_FOCUS_MASTER|1<<SVCf_FREE_ON_COMPLETE);
	  Free(st);
	  st=MStrPrint("\"$WW,1$\";Cmp(\"%s\",\"SysTemp\",\"SysTemp\");",prj_file);
	  tempc=TaskExe(task,Fs,st,1<<SVCf_WAKE_MASTER|1<<SVCf_FOCUS_MASTER);
	  Free(st);
	  if (ScanResult(tempc,&r))
	    if (!r) {
	      tempc=TaskExe(task,Fs,
		    "Load(\"SysTemp\",LDF_JUST_LOAD);",1<<SVCf_WAKE_MASTER|1<<SVCf_FOCUS_MASTER);
	      if (ScanResult(tempc,&r))
		okay=TRUE;
	    }
	  tempc=TaskExe(task,Fs,"Del(\"SysTemp.*\");",1<<SVCf_WAKE_MASTER|1<<SVCf_FOCUS_MASTER);
	  ScanResult(tempc,&r);
	} else {
	  Free(prj_file);
	  st=DirFile(doc->filename.name,"Load","CPP.Z");
	  prj_file=FileNameAbs(st,FUF_Z_OR_NOT_Z);
	  Free(st);
	  if (FileFind(prj_file))
	    st=MStrPrint("\"$WW,1$\";ExeFile(\"%s\",TRUE);",prj_file);
	  else
	    st=MStrPrint("\"$WW,1$\";ExeFile(\"%s\",TRUE);",doc->filename.name);
	  tempc=TaskExe(task,Fs,st,1<<SVCf_WAKE_MASTER|1<<SVCf_FOCUS_MASTER);
	  Free(st);
	  if (ScanResult(tempc,&r) && r)
	    okay=TRUE;
	}
	Free(prj_file);
      }
      if (!okay) {
	PopUpOk("Has Errors");
	while (LBts(&sys_semas[SYS_SEMA_FIX],0))
	  Yield;
	ToFileLine(dbg.fix_file_line,&st,&i);
	LBtr(&sys_semas[SYS_SEMA_FIX],0);
	if (!StrCmp(st,doc->filename.name))
	  goto_line_num=i;
	Free(st);
      }
      break;
    case EF_REINDENT:
      if (EdGoToFun(doc,FALSE,FALSE)) {
	start_y=doc->cur_entry->y;
	indent=EdRICode(doc);
	DocUnlock(doc);
	Snd(2000); Sleep(150); Snd(0);
	Sleep(100);
	Snd(2000); Sleep(150); Snd(0);
	DocLock(doc);
	EdRemFunLeadingSpace(doc);
	DocLineNumGoTo(doc,start_y+1);
	doc_e=doc->cur_entry;
	end_y=start_y+indent->total_cnt;
	while (start_y<=doc_e->y<end_y) {
	  if (doc_e!=doc && doc_e!=doc->cur_entry &&
		!(doc_e->de_flags&(DOCEG1_DONT_EDIT-DOCEF_SCROLLING_X))) {
	    if (doc_e->type_u8==DOCT_NEW_LINE||doc_e->type_u8==DOCT_SOFT_NEW_LINE)
	      start_of_line=TRUE;
	    else {
	      if (start_of_line) {
		i=QueVectU8Get(indent,doc_e->y)*C_INDENT_SPACES;
		x=doc_e->x+1;
		while (i>8) {
		  doc_ne=CAlloc(sizeof(CDocEntryBase),doc->mem_task);
		  doc_ne->type=DOCT_TAB | doc->settings_root.dft_text_attr<<8;
		  doc_ne->de_flags=doldoc.dft_de_flags[DOCT_TAB];
		  doc_ne->x=x;
		  doc_ne->y=doc_e->y;
		  doc_ne->page_line_num=doc_e->page_line_num;
		  MemCpy(&doc_ne->settings,&doc_e->settings,sizeof(CDocSettings));
		  QueIns(doc_ne,doc_e->last);
		  i-=8;
		  x+=8;
		}
		if (i>0) {
		  b=MAlloc(i+1,doc->mem_task);
		  MemSet(b,CH_SPACE,i);
		  b[i]=0;
		  doc_ne=CAlloc(sizeof(CDocEntryBase),doc->mem_task);
		  doc_ne->type=DOCT_TEXT | doc->settings_root.dft_text_attr<<8;
		  doc_ne->de_flags=doldoc.dft_de_flags[DOCT_TEXT];
		  doc_ne->tag=b;
		  doc_ne->max_col=1;
		  doc_ne->x=x;
		  doc_ne->y=doc_e->y;
		  doc_ne->page_line_num=doc_e->page_line_num;
		  MemCpy(&doc_ne->settings,&doc_e->settings,sizeof(CDocSettings));
		  QueIns(doc_ne,doc_e->last);
		}
	      }
	      start_of_line=FALSE;
	    }
	  }
	  doc_e=doc_e->next;
	}
	QueVectU8Del(indent);
      }
      break;
    case EF_RENUM_ASM:
      if (EdGoToFun(doc,FALSE,TRUE)) {
	if (EdCurU8(doc)=='{') {
	  EdCursorRight(doc);
	  DocRecalc(doc);
	} else if (EdCurU8(doc)==':') {
	  EdCursorRight(doc);
	  if (EdCurU8(doc)==':')
	    EdCursorRight(doc);
	  DocRecalc(doc);
	}
	DocUnlock(doc);
	Snd(2000); Sleep(150); Snd(0);
	Sleep(100);
	Snd(2000); Sleep(150); Snd(0);
	DocLock(doc);
	EdRenumAsm(doc);
      }
      break;
  }

  DocRecalc(doc);
  DocLineNumGoTo(doc,goto_line_num);

  DocUnlock(doc);
  if (!unlock)
    DocLock(doc);
  if (task)
    Kill(task,FALSE);
}

U0 EdPopUpChSC(I64 *_ch,I64 *_sc)
{
  I64 sc;
  "Press A Key\n";
  DocPut->flags|=DOCF_MIN_SIZE;
  do GetMsg(_ch,&sc,1<<MSG_KEY_DOWN);
  while (sc.u8[0]==SC_SHIFT || sc.u8[0]==SC_CTRL || sc.u8[0]==SC_ALT);
  *_sc=sc;
}

U0 EdChSC(CDoc *doc)
{
  I64 ch,sc;
  U8 buf[136];
  StrPrint(buf,"EdPopUpChSC(%d,%d);",&ch,&sc);
  PopUp(buf,Fs);
  if (ch==CH_BACKSPACE)
    DocPrint(doc,"CH_BACKSPACE,0x%X",sc);
  else if (ch=='\n')
    DocPrint(doc,"'\n',0x%X",sc);
  else if (CH_CTRLA<=ch<=CH_CTRLZ)
    DocPrint(doc,"CH_CTRL%C,0x%X",ch+'@',sc);
  else if (ch=='$')
    DocPrint(doc,"'$$',0x%X",sc);
  else if (ch=='\\')
    DocPrint(doc,"'\\\\',0x%X",sc);
  else if (ch=='\'')
    DocPrint(doc,"'\\\'',0x%X",sc);
  else if (ch==CH_ESC)
    DocPrint(doc,"CH_ESC,0x%X",sc);
  else if (ch==CH_SHIFT_ESC)
    DocPrint(doc,"CH_SHIFT_ESC,0x%X",sc);
  else if (ch==CH_SPACE)
    DocPrint(doc,"CH_SPACE,0x%X",sc);
  else if (ch==CH_SHIFT_SPACE)
    DocPrint(doc,"CH_SHIFT_SPACE,0x%X",sc);
  else if (Bt(chars_bitmap_displayable,ch))
    DocPrint(doc,"'%c',0x%X",ch,sc);
  else
    DocPrint(doc,"0x%X,0x%X",ch,sc);
}

U0 EdCodeTools(CDoc *doc)
{
  I64 tool_action=PopUpEdFmt;
  switch (tool_action) {
    case EF_CHK_COMPILE:
    case EF_REINDENT:
    case EF_RENUM_ASM:
      EdCodeTools2(doc,tool_action);
      break;
    case EF_CTRL_SLIDER:
      TemplateCtrlSlider(doc);
      break;
    case EF_CH_SC:
      EdChSC(doc);
      break;
  }
}
